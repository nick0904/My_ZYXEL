//  ZapiDataModel.h
//  Zapi
//  
//  Created by Zyxel Zapi code generate tool on 2017/07/25.
//  Copyright Â© 2017 Zyxel. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "ZapiDataModelEnum.h"


////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - Forward declaration class

@class StructResponseContainer;


////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - Zapi

/**
 Zapi, containing Class methods for the usage of Zapi.
 
 */
@interface Zapi : NSObject

/**
 Build request RPC with root object

 @param rootObject Root object, must be rpc related objects.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The JSON string representation of Zapi Request if successful, otherwise nil.
 @note Only rpc related objects can be put into rootObject.
 */
+ (NSString *)buildRequestRPCWithRoot:(NSObject *)rootObject errorCode:(ZapiErrorCode *)errorCode;

/**
 Build request JSON string with array of root objects
 
 @param arrayOfRoot Array of root objects.
 @param operationType Currently only support get-config & edit config.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The JSON string representation of Zapi Request if successful, otherwise nil.
 @note Only the root objects can be put into array, otherwise the API will crash if detected illegal objects.
 
 Code snippet of example usage:
 
```objective-c
 NSMutableArray *mutableArray = [[NSMutableArray alloc] init];
  [mutableArray addObject:[[StructNat alloc] init]];
  [mutableArray addObject:[[StructWan alloc] init]];
  [mutableArray addObject:[[StructTop alloc] init]];
  [mutableArray addObject:[[StructNacm alloc] init]];
  [mutableArray addObject:[[StructGetChannelList alloc] init]];
  [mutableArray addObject:[[StructNetworkDevices alloc] init]];
  [mutableArray addObject:[[StructRemoveDeviceCustomizedData alloc] init]];
  [mutableArray addObject:[[StructSetHostType alloc] init]];
  [mutableArray addObject:[[StructSetHostName alloc] init]];
  [mutableArray addObject:[[StructDeviceInformation alloc] init]];
  [mutableArray addObject:[[StructDeviceStatus alloc] init]];
  [mutableArray addObject:[[StructSetDeviceName alloc] init]];
  [mutableArray addObject:[[StructAccessEasy123 alloc] init]];
  [mutableArray addObject:[[StructSetWifi alloc] init]];
  [mutableArray addObject:[[StructIsDefaultPassword alloc] init]];
  [mutableArray addObject:[[StructAccessInternetStatus alloc] init]];
  [mutableArray addObject:[[StructIsWanPortConnected alloc] init]];
  [mutableArray addObject:[[StructGetWifiConfiguration alloc] init]];
  [mutableArray addObject:[[StructIsWifiButtonOn alloc] init]];
  [mutableArray addObject:[[StructDetectWanProto alloc] init]];
  [mutableArray addObject:[[StructEverEasy123 alloc] init]];
  [mutableArray addObject:[[StructServerControl alloc] init]];
  [mutableArray addObject:[[StructGetHistory alloc] init]];
  [mutableArray addObject:[[StructSpeedTest alloc] init]];
  [mutableArray addObject:[[StructTestResult alloc] init]];
  [mutableArray addObject:[[StructCleanHistory alloc] init]];
  [mutableArray addObject:[[StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer alloc] init]];
  [mutableArray addObject:[[StructAddStaticIp alloc] init]];
  [mutableArray addObject:[[StructOnLineCancel alloc] init]];
  [mutableArray addObject:[[StructOnLineCheck alloc] init]];
  [mutableArray addObject:[[StructUpgradeAfterUpload alloc] init]];
  [mutableArray addObject:[[StructOnLineDownload alloc] init]];
  [mutableArray addObject:[[StructUpload alloc] init]];
  [mutableArray addObject:[[StructOnLineUpgrade alloc] init]];
  [mutableArray addObject:[[StructOnLineDownloadStatus alloc] init]];
  [mutableArray addObject:[[StructUpgradeStatus alloc] init]];
  [mutableArray addObject:[[StructTicTacToe alloc] init]];
  [mutableArray addObject:[[StructApplyWifiInterfaceSetting alloc] init]];
  [mutableArray addObject:[[StructTransferCertificate alloc] init]];
  [mutableArray addObject:[[StructGetPrivateKeyPath alloc] init]];
  [mutableArray addObject:[[StructInterfacesState alloc] init]];
  [mutableArray addObject:[[StructInterfaces alloc] init]];
  [mutableArray addObject:[[StructBleState alloc] init]];
  [mutableArray addObject:[[StructActionForBle alloc] init]];
  [mutableArray addObject:[[StructPairUnpair alloc] init]];
  [mutableArray addObject:[[StructFirewall alloc] init]];
  [mutableArray addObject:[[StructUnblock alloc] init]];
  [mutableArray addObject:[[StructBlock alloc] init]];
  [mutableArray addObject:[[StructGeneratePinCode alloc] init]];
  [mutableArray addObject:[[StructSiteSurvey alloc] init]];
  [mutableArray addObject:[[StructPressStartButton alloc] init]];
  [mutableArray addObject:[[StructPressPushButton alloc] init]];
  [mutableArray addObject:[[StructClearSetting alloc] init]];
  [mutableArray addObject:[[StructWpsButtonPinStatus alloc] init]];
  [mutableArray addObject:[[StructRequestContainer alloc] init]];
  [mutableArray addObject:[[StructResponseContainer alloc] init]];
  [mutableArray addObject:[[StructCapability alloc] init]];
  [mutableArray addObject:[[StructTopUrnZyxelCpeSystemZyxelWifiSystemLog alloc] init]];
  [mutableArray addObject:[[StructDumpFile alloc] init]];
  [mutableArray addObject:[[StructClear alloc] init]];
  [mutableArray addObject:[[StructGetLog alloc] init]];
  [mutableArray addObject:[[StructBonus alloc] init]];
  [mutableArray addObject:[[StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] init]];
  [mutableArray addObject:[[StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] init]];
  [mutableArray addObject:[[StructAddDevice alloc] init]];
  [mutableArray addObject:[[StructRemoveDevice alloc] init]];
  [mutableArray addObject:[[StructDeleteProfile alloc] init]];
  [mutableArray addObject:[[StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] init]];
  [mutableArray addObject:[[StructLan alloc] init]];
  [mutableArray addObject:[[StructSetCurrentDatetime alloc] init]];
  [mutableArray addObject:[[StructSystemShutdown alloc] init]];
  [mutableArray addObject:[[StructSystemConfigRestore alloc] init]];
  [mutableArray addObject:[[StructSystemFactoryPassword alloc] init]];
  [mutableArray addObject:[[StructSystemConfigUpload alloc] init]];
  [mutableArray addObject:[[StructSystemConfigBackup alloc] init]];
  [mutableArray addObject:[[StructSystem alloc] init]];
  [mutableArray addObject:[[StructSystemState alloc] init]];
  [mutableArray addObject:[[StructSystemWakeOnLan alloc] init]];
  [mutableArray addObject:[[StructApiVersion alloc] init]];
  [mutableArray addObject:[[StructSystemRestart alloc] init]];
  [mutableArray addObject:[[StructCurrentBandWidth alloc] init]];
  [mutableArray addObject:[[StructSystemResetToDefault alloc] init]];
  [mutableArray addObject:[[StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp alloc] init]];
  [mutableArray addObject:[[StructSystemDevicesState alloc] init]];
  [mutableArray addObject:[[StructSwitchLed alloc] init]];
  [mutableArray addObject:[[StructAuthorizeDevice alloc] init]];
  [mutableArray addObject:[[StructFinishSetup alloc] init]];
  [mutableArray addObject:[[StructUnauthorizeDevice alloc] init]];
  [mutableArray addObject:[[StructResetWifiSystem alloc] init]];
  [mutableArray addObject:[[StructNaming alloc] init]];
  [mutableArray addObject:[[StructRetriveDeviceInformation alloc] init]];
  [mutableArray addObject:[[StructRestart alloc] init]];
  [mutableArray addObject:[[StructGetMac alloc] init]];
 ZapiErrorCode error = ZapiErrorCode_OK;
 NSString *requestString = [Zapi buildRequestJsonWithArray:(NSArray *)mutableArray operationType:EnumOperationType_GET_CONFIG errorCode:&error];
 if (error != ZapiErrorCode_OK) {
   NSLog(@"buildRequestJsonWithArray failed! error code: %lu", (unsigned long)error);
   return;
 }
 
 NSLog(@"requestString: %@", requestString);
 
```
 
 */
+ (NSString *)buildRequestJsonWithArray:(NSArray *)arrayOfRoot operationType:(EnumOperationType)operationType errorCode:(ZapiErrorCode *)errorCode;

/**
 Parse response JSON string into Zapi resonse.
 
 @param jsonString The JSON string representation of Zapi response.
 @param errorCode ZapiErrorCode_OK if successfully parsed, otherwise if failed.
 @return Response container, nil if parsed with failure, otherwise:
    
    Response with OK: 
      the rpcReply.result will be ok, if the request is get-config then rpcReply.data will contain the result for the request made.
    Response with error: 
      the pcReply.result will be error, and with rpcError class for detailed error message.
    
    Please see the code snippet for more detailed explanation.
 
 Code snippet of example usage:
 
```objective-c
 NSString *jsonString = @"{ \"rpc-reply\":{ \"xmlns\":\"urn:ietf:params:xml:ns:netconf:base:1.0\", \"message-id\":102, \"result\":\"ok\" } }";
 ZapiErrorCode error = ZapiErrorCode_OK;
 StructResponseContainer *responseContainer = [Zapi parseResponseFromJson:jsonString errorCode:&error];
 if (error != ZapiErrorCode_OK) {
   NSLog(@"responseContainer init failed! error code: %lu", (unsigned long)error);
   return;
 }
 if (!responseContainer) {
   NSLog(@"responseContainer is nil with no error code, Please Contact Zapi team should such issue occured.");
   return;
 }
 
 // -----------------------------------------------
 // To Json
 NSLog(@"responseContainer init successful! toJson: %@", [responseContainer toJson]);
 
 if ([responseContainer.rpcReply getResult] == EnumReplyResult_OK) {
   NSLog(@"rpcReply is OK");
   if (responseContainer.rpcReply.data) {
     for (id o in responseContainer.rpcReply.data) {
       NSLog(@"class of data is :%@", [o class]);
     }
   }
 }
 else if ([responseContainer.rpcReply getResult] == EnumReplyResult_ERROR) {
   NSLog(@"rpcReply with error: %@", [responseContainer.rpcReply.rpcError toJson]);
 }
 
```
 
 */
+ (StructResponseContainer *)parseResponseFromJson:(NSString *)jsonString errorCode:(ZapiErrorCode *)errorCode;

+ (BOOL)validateString:(NSString *)aString withPattern:(NSString *)aPattern;

@end



////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - ZapiMock

/**
 ZapiMock, containing Class methods for the usage of Mocking Zapi response.
 
 */
@interface ZapiMock : NSObject

/**
 Set ZapiMock to return Error even when its correct, so engineer can simulate loading error or etc.
 Use setReplyWithOK to undo setReplyWithError.
 @see setReplyWithOK
 */
+ (void)setReplyWithError;
 
/**
 Set ZapiMock to return OK when successful.
 @see setReplyWithError
 */
+ (void)setReplyWithOK;
 
/**
 Return the number of mock data sets currently in ZapiMock.
 */
+ (NSUInteger)numberOfMockDataSets;
 
/**
 Change current data set index, to switch between data sets.
 @param index Index to set.
 @return YES if successfully set, otherwise NO.
 */
+ (bool)setCurrentDataSetWithIndex:(NSUInteger)index;
 
/**
 Read mock data into ZapiMock.
 @param filePath File path where mock data is stored.
 @return YES if successfully added data set, otherwise NO.
 */
+ (bool)addToDataSetWithJsonFilePath:(NSString *)filePath;
 
/**
 Mock response from Zapi with ZapiMock.
 @param jsonString Request in JSON string representation.
 @return JSON string representation of response, nil if failed.
 */
+ (NSString *)respondWithRequestJson:(NSString *)jsonString;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNatInterfaceSettingElement

/**
 StructNatInterfaceSettingElement, as in YANG: __nat-interface-setting-element__.
 
 Detailed Description: NAT interface setting
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-nat -> nat -> nat-interface-setting -> nat-interface-setting-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNatInterfaceSettingElement example:
      StructNatInterfaceSettingElement *natInterfaceSettingElement = [[StructNatInterfaceSettingElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"natInterfaceSettingElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!natInterfaceSettingElement) {
        NSLog(@"natInterfaceSettingElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"natInterfaceSettingElement init successful! toJson: %@", [natInterfaceSettingElement toJson]);
      NSLog(@"natInterfaceSettingElement validated result: %lu, 0 means it passes validation.", (unsigned long)[natInterfaceSettingElement validate]);
      
      // -----------------------------------------------
      // Setters of StructNatInterfaceSettingElement
      if ((error = [natInterfaceSettingElement setIndex:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natInterfaceSettingElement setIndex:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natInterfaceSettingElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[natInterfaceSettingElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natInterfaceSettingElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natInterfaceSettingElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natInterfaceSettingElement setInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natInterfaceSettingElement setInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNatInterfaceSettingElement
      [natInterfaceSettingElement getStatus];
      [natInterfaceSettingElement getIndex];
      [natInterfaceSettingElement getEnable];
      [natInterfaceSettingElement getAlias];
      [natInterfaceSettingElement getInterface];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"natInterfaceSettingElement toJson: %@", [natInterfaceSettingElement toJson]);
```
 
 */
@interface StructNatInterfaceSettingElement : NSObject


/**
 Designated initializer for StructNatInterfaceSettingElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNatInterfaceSettingElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 reference TR181 Device.NAT.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatusNatInterfaceSettingElement)aStatus;

/**
 Setter for Index.
 
 Index
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSInteger)aIndex;

/**
 Setter for Enable.
 
 Enables or disables the InterfaceSetting entry,
indicating if NAT is enabled for the referenced IP Interface instance.
On creation, an InterfaceSetting entry is disabled by default.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for Alias.
 
 reference TR181 Device.NAT.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for Interface.
 
 	The value MUST be the path name of a row in the IP.Interface table.
If the referenced object is deleted, the parameter value MUST be set to an empty string.
The associated IP interface on which NAT is to be enabled.
 
 @param aInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterface:(NSString *)aInterface;


/**
 Getter for Status.
 
 reference TR181 Device.NAT.
 
 @return EnumStatusNatInterfaceSettingElement The value of property.
 */
- (EnumStatusNatInterfaceSettingElement)getStatus;

/**
 Getter for Index.
 
 Index
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIndex;

/**
 Getter for Enable.
 
 Enables or disables the InterfaceSetting entry,
indicating if NAT is enabled for the referenced IP Interface instance.
On creation, an InterfaceSetting entry is disabled by default.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for Alias.
 
 reference TR181 Device.NAT.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for Interface.
 
 	The value MUST be the path name of a row in the IP.Interface table.
If the referenced object is deleted, the parameter value MUST be set to an empty string.
The associated IP interface on which NAT is to be enabled.
 
 @return NSString * The value of property.
 */
- (NSString *)getInterface;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNatPortMappingElement

/**
 StructNatPortMappingElement, as in YANG: __nat-port-mapping-element__.
 
 Detailed Description: NAT port mapping
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-nat -> nat -> nat-port-mapping -> nat-port-mapping-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNatPortMappingElement example:
      StructNatPortMappingElement *natPortMappingElement = [[StructNatPortMappingElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"natPortMappingElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!natPortMappingElement) {
        NSLog(@"natPortMappingElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"natPortMappingElement init successful! toJson: %@", [natPortMappingElement toJson]);
      NSLog(@"natPortMappingElement validated result: %lu, 0 means it passes validation.", (unsigned long)[natPortMappingElement validate]);
      
      // -----------------------------------------------
      // Setters of StructNatPortMappingElement
      if ((error = [natPortMappingElement setIndex:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setIndex:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setExternalPortEndRange:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setExternalPortEndRange:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setInternalPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setInternalPort:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setRemoteHost:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setRemoteHost:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setInternalClient:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setInternalClient:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setProtocol:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setProtocol:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setAllInterfaces:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setAllInterfaces:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setLeaseDuration:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setLeaseDuration:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [natPortMappingElement setExternalPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[natPortMappingElement setExternalPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNatPortMappingElement
      [natPortMappingElement getStatus];
      [natPortMappingElement getIndex];
      [natPortMappingElement getEnable];
      [natPortMappingElement getExternalPortEndRange];
      [natPortMappingElement getInternalPort];
      [natPortMappingElement getAlias];
      [natPortMappingElement getRemoteHost];
      [natPortMappingElement getInternalClient];
      [natPortMappingElement getInterface];
      [natPortMappingElement getProtocol];
      [natPortMappingElement getAllInterfaces];
      [natPortMappingElement getLeaseDuration];
      [natPortMappingElement getExternalPort];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"natPortMappingElement toJson: %@", [natPortMappingElement toJson]);
```
 
 */
@interface StructNatPortMappingElement : NSObject


/**
 Designated initializer for StructNatPortMappingElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNatPortMappingElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 reference Device.NAT.PortMapping.{i}.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatus)aStatus;

/**
 Setter for Index.
 
 Index
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSInteger)aIndex;

/**
 Setter for Enable.
 
 Enables or disables the port mapping instance. On creation, an entry is disabled by default.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for ExternalPortEndRange.
 
 Indicates the last port of the external port range that starts with ExternalPort.
If an external port range is specified, then the behavior described for ExternalPort applies to all ports within the range.
 
 @param aExternalPortEndRange Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setExternalPortEndRange:(NSInteger)aExternalPortEndRange;

/**
 Setter for InternalPort.
 
 The port on InternalClient that the gateway SHOULD forward traffic to.
 
 @param aInternalPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInternalPort:(NSInteger)aInternalPort;

/**
 Setter for Alias.
 
 reference TR181 Device.NAT.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for RemoteHost.
 
 This parameter is the IP address of the source of inbound packets.
An empty string indicates a wildcard
, i.e. any IP address (this will be an empty string in most cases).
CPE are REQUIRED only to support an empty string.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aRemoteHost Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRemoteHost:(NSString *)aRemoteHost;

/**
 Setter for InternalClient.
 
 The IP address or DNS host name of an internal client (on the LAN).
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aInternalClient Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInternalClient:(NSString *)aInternalClient;

/**
 Setter for Interface.
 
 The value MUST be the path name of a row in the IP.Interface table.
If the referenced object is deleted, the parameter value MUST be set to an empty string.
Specifies the IP interface to which this port mapping applies.
 
 @param aInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterface:(NSString *)aInterface;

/**
 Setter for Protocol.
 
 The protocol of the port mapping. Enumeration of:TCP/UDP
 
 @param aProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProtocol:(NSString *)aProtocol;

/**
 Setter for AllInterfaces.
 
 Indicates whether this port mapping applies to all IP interfaces that support port mappings.
If true, the value of Interface is ignored since all supported IP interfaces are indicated.
 
 @param aAllInterfaces Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAllInterfaces:(BOOL)aAllInterfaces;

/**
 Setter for LeaseDuration.
 
 Determines the time to live, in seconds, of a port mapping lease,
where time-to-live means the number of seconds before the port mapping expires.
 
 @param aLeaseDuration Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLeaseDuration:(NSInteger)aLeaseDuration;

/**
 Setter for ExternalPort.
 
 The external port (or the first port of a range of external ports) that the NAT gateway would listen on
for traffic to a corresponding InternalPort. Inbound packets to this external port on the WAN interface
SHOULD be forwarded to the IP.Interface associated with the InternalClient on the InternalPort.
 
 @param aExternalPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setExternalPort:(NSInteger)aExternalPort;


/**
 Getter for Status.
 
 reference Device.NAT.PortMapping.{i}.
 
 @return EnumStatus The value of property.
 */
- (EnumStatus)getStatus;

/**
 Getter for Index.
 
 Index
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIndex;

/**
 Getter for Enable.
 
 Enables or disables the port mapping instance. On creation, an entry is disabled by default.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for ExternalPortEndRange.
 
 Indicates the last port of the external port range that starts with ExternalPort.
If an external port range is specified, then the behavior described for ExternalPort applies to all ports within the range.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getExternalPortEndRange;

/**
 Getter for InternalPort.
 
 The port on InternalClient that the gateway SHOULD forward traffic to.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInternalPort;

/**
 Getter for Alias.
 
 reference TR181 Device.NAT.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for RemoteHost.
 
 This parameter is the IP address of the source of inbound packets.
An empty string indicates a wildcard
, i.e. any IP address (this will be an empty string in most cases).
CPE are REQUIRED only to support an empty string.
 
 @return NSString * The value of property.
 */
- (NSString *)getRemoteHost;

/**
 Getter for InternalClient.
 
 The IP address or DNS host name of an internal client (on the LAN).
 
 @return NSString * The value of property.
 */
- (NSString *)getInternalClient;

/**
 Getter for Interface.
 
 The value MUST be the path name of a row in the IP.Interface table.
If the referenced object is deleted, the parameter value MUST be set to an empty string.
Specifies the IP interface to which this port mapping applies.
 
 @return NSString * The value of property.
 */
- (NSString *)getInterface;

/**
 Getter for Protocol.
 
 The protocol of the port mapping. Enumeration of:TCP/UDP
 
 @return NSString * The value of property.
 */
- (NSString *)getProtocol;

/**
 Getter for AllInterfaces.
 
 Indicates whether this port mapping applies to all IP interfaces that support port mappings.
If true, the value of Interface is ignored since all supported IP interfaces are indicated.
 
 @return BOOL The value of property.
 */
- (BOOL)getAllInterfaces;

/**
 Getter for LeaseDuration.
 
 Determines the time to live, in seconds, of a port mapping lease,
where time-to-live means the number of seconds before the port mapping expires.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getLeaseDuration;

/**
 Getter for ExternalPort.
 
 The external port (or the first port of a range of external ports) that the NAT gateway would listen on
for traffic to a corresponding InternalPort. Inbound packets to this external port on the WAN interface
SHOULD be forwarded to the IP.Interface associated with the InternalClient on the InternalPort.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getExternalPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNat

/**
 StructNat, as in YANG: __nat__.
 
 Detailed Description: NAT
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-nat -> nat

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNat example:
      StructNat *nat = [[StructNat alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"nat init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!nat) {
        NSLog(@"nat is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"nat init successful! toJson: %@", [nat toJson]);
      NSLog(@"nat validated result: %lu, 0 means it passes validation.", (unsigned long)[nat validate]);
      
      // -----------------------------------------------
      // Setters of StructNat
  
      // -----------------------------------------------
      // Getters of StructNat
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"nat toJson: %@", [nat toJson]);
```
 
 */
@interface StructNat : NSObject

/**
 Array which contains StructNatInterfaceSettingElement, as in YANG: __nat-interface-setting__
 
 Detailed Description: NAT interface setting
 
 @see StructNatInterfaceSettingElement
 */
@property (atomic, retain) NSMutableArray <StructNatInterfaceSettingElement *> *natInterfaceSetting;
/**
 Array which contains StructNatPortMappingElement, as in YANG: __nat-port-mapping__
 
 Detailed Description: NAT port mapping
 
 @see StructNatPortMappingElement
 */
@property (atomic, retain) NSMutableArray <StructNatPortMappingElement *> *natPortMapping;

/**
 Designated initializer for StructNat either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNat if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSixin4Profile

/**
 StructSixin4Profile, as in YANG: __sixin4-profile__.
 
 Detailed Description: IPv6 in IPv4 profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-tunneling -> sixin4-profile
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSixin4Profile example:
      StructSixin4Profile *sixin4Profile = [[StructSixin4Profile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"sixin4Profile init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!sixin4Profile) {
        NSLog(@"sixin4Profile is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"sixin4Profile init successful! toJson: %@", [sixin4Profile toJson]);
      NSLog(@"sixin4Profile validated result: %lu, 0 means it passes validation.", (unsigned long)[sixin4Profile validate]);
      
      // -----------------------------------------------
      // Setters of StructSixin4Profile
      if ((error = [sixin4Profile setIpv6Prefix:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[sixin4Profile setIpv6Prefix:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixin4Profile setPeerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[sixin4Profile setPeerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixin4Profile setIpv6PeerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[sixin4Profile setIpv6PeerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixin4Profile setIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[sixin4Profile setIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSixin4Profile
      [sixin4Profile getIpv6Prefix];
      [sixin4Profile getPeerAddress];
      [sixin4Profile getIpv6PeerAddress];
      [sixin4Profile getIpv6Address];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"sixin4Profile toJson: %@", [sixin4Profile toJson]);
```
 
 */
@interface StructSixin4Profile : NSObject


/**
 Designated initializer for StructSixin4Profile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSixin4Profile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ipv6Prefix.
 
 Prefix of this interface if user want use a static IP address.
 
 @param aIpv6Prefix Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6Prefix:(NSInteger)aIpv6Prefix;

/**
 Setter for PeerAddress.
 
 Remote gateway.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aPeerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPeerAddress:(NSString *)aPeerAddress;

/**
 Setter for Ipv6PeerAddress.
 
 Remote gateway.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpv6PeerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6PeerAddress:(NSString *)aIpv6PeerAddress;

/**
 Setter for Ipv6Address.
 
 IPv6 address assigned by ISP.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6Address:(NSString *)aIpv6Address;


/**
 Getter for Ipv6Prefix.
 
 Prefix of this interface if user want use a static IP address.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpv6Prefix;

/**
 Getter for PeerAddress.
 
 Remote gateway.
 
 @return NSString * The value of property.
 */
- (NSString *)getPeerAddress;

/**
 Getter for Ipv6PeerAddress.
 
 Remote gateway.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6PeerAddress;

/**
 Getter for Ipv6Address.
 
 IPv6 address assigned by ISP.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6Address;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSixrdProfile

/**
 StructSixrdProfile, as in YANG: __sixrd-profile__.
 
 Detailed Description: IPv6 rapid deployment.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-tunneling -> sixrd-profile
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSixrdProfile example:
      StructSixrdProfile *sixrdProfile = [[StructSixrdProfile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"sixrdProfile init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!sixrdProfile) {
        NSLog(@"sixrdProfile is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"sixrdProfile init successful! toJson: %@", [sixrdProfile toJson]);
      NSLog(@"sixrdProfile validated result: %lu, 0 means it passes validation.", (unsigned long)[sixrdProfile validate]);
      
      // -----------------------------------------------
      // Setters of StructSixrdProfile
      if ((error = [sixrdProfile setBorderRelayIpv4Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[sixrdProfile setBorderRelayIpv4Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixrdProfile setIpv6Prefix:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[sixrdProfile setIpv6Prefix:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixrdProfile setIpv6PrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[sixrdProfile setIpv6PrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [sixrdProfile setIpv4PrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[sixrdProfile setIpv4PrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSixrdProfile
      [sixrdProfile getBorderRelayIpv4Address];
      [sixrdProfile getIpv6Prefix];
      [sixrdProfile getAuto6rd];
      [sixrdProfile getIpv6PrefixLength];
      [sixrdProfile getIpv4PrefixLength];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"sixrdProfile toJson: %@", [sixrdProfile toJson]);
```
 
 */
@interface StructSixrdProfile : NSObject


/**
 Designated initializer for StructSixrdProfile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSixrdProfile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for BorderRelayIpv4Address.
 
 The relay server ip address.
 
 @param aBorderRelayIpv4Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBorderRelayIpv4Address:(NSString *)aBorderRelayIpv4Address;

/**
 Setter for Ipv6Prefix.
 
 IPv6 prefix for tunneling IPv6 traffic to the ISP's Border Relay
router and connecting to the native IPv6 internet.
 
 @param aIpv6Prefix Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6Prefix:(NSString *)aIpv6Prefix;

/**
 Setter for Auto6rd.
 
 automatically configured by DHCPC or manually configured.
 
 @param aAuto6rd Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAuto6rd:(EnumAuto6rd)aAuto6rd;

/**
 Setter for Ipv6PrefixLength.
 
 Specifies how many most significant bits (strating from the left)
in the address compose the network address.
 
 Range:       32..64

 @param aIpv6PrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6PrefixLength:(NSInteger)aIpv6PrefixLength;

/**
 Setter for Ipv4PrefixLength.
 
 The subnet mask number for the IPv4 network. 0~32.
 
 @param aIpv4PrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv4PrefixLength:(NSInteger)aIpv4PrefixLength;


/**
 Getter for BorderRelayIpv4Address.
 
 The relay server ip address.
 
 @return NSString * The value of property.
 */
- (NSString *)getBorderRelayIpv4Address;

/**
 Getter for Ipv6Prefix.
 
 IPv6 prefix for tunneling IPv6 traffic to the ISP's Border Relay
router and connecting to the native IPv6 internet.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6Prefix;

/**
 Getter for Auto6rd.
 
 automatically configured by DHCPC or manually configured.
 
 @return EnumAuto6rd The value of property.
 */
- (EnumAuto6rd)getAuto6rd;

/**
 Getter for Ipv6PrefixLength.
 
 Specifies how many most significant bits (strating from the left)
in the address compose the network address.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpv6PrefixLength;

/**
 Getter for Ipv4PrefixLength.
 
 The subnet mask number for the IPv4 network. 0~32.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpv4PrefixLength;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv6Tunneling

/**
 StructIpv6Tunneling, as in YANG: __ipv6-tunneling__.
 
 Detailed Description: IPv6 tunneling.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-tunneling
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv6Tunneling example:
      StructIpv6Tunneling *ipv6Tunneling = [[StructIpv6Tunneling alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv6Tunneling init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv6Tunneling) {
        NSLog(@"ipv6Tunneling is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv6Tunneling init successful! toJson: %@", [ipv6Tunneling toJson]);
      NSLog(@"ipv6Tunneling validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv6Tunneling validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv6Tunneling
      if ((error = [ipv6Tunneling setRelayAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipv6Tunneling setRelayAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpv6Tunneling
      [ipv6Tunneling getRelayAddress];
      [ipv6Tunneling getSixin4Profile];
      [ipv6Tunneling getSixrdProfile];
      [ipv6Tunneling getTunnelingType];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv6Tunneling toJson: %@", [ipv6Tunneling toJson]);
```
 
 */
@interface StructIpv6Tunneling : NSObject

/**
 As in YANG: __sixin4-profile__
 
 @see StructSixin4Profile
 */
@property (atomic, retain) StructSixin4Profile *sixin4Profile;
/**
 As in YANG: __sixrd-profile__
 
 @see StructSixrdProfile
 */
@property (atomic, retain) StructSixrdProfile *sixrdProfile;

/**
 Designated initializer for StructIpv6Tunneling either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv6Tunneling if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for RelayAddress.
 
 6 to 4 relay server IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aRelayAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRelayAddress:(NSString *)aRelayAddress;

/**
 Setter for TunnelingType.
 
 Tunneling type.
 
 @param aTunnelingType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTunnelingType:(EnumTunnelingType)aTunnelingType;


/**
 Getter for RelayAddress.
 
 6 to 4 relay server IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getRelayAddress;

/**
 Getter for TunnelingType.
 
 Tunneling type.
 
 @return EnumTunnelingType The value of property.
 */
- (EnumTunnelingType)getTunnelingType;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructFirstDnsServer

/**
 StructFirstDnsServer, as in YANG: __first-dns-server__.
 
 Detailed Description: The first DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-dns-server -> first-dns-server
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-dns-server -> second-dns-server
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-dns-server -> third-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructFirstDnsServer example:
      StructFirstDnsServer *firstDnsServer = [[StructFirstDnsServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"firstDnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!firstDnsServer) {
        NSLog(@"firstDnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"firstDnsServer init successful! toJson: %@", [firstDnsServer toJson]);
      NSLog(@"firstDnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[firstDnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructFirstDnsServer
      if ((error = [firstDnsServer setDnsServerIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[firstDnsServer setDnsServerIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructFirstDnsServer
      [firstDnsServer getDnsServer];
      [firstDnsServer getDnsServerIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"firstDnsServer toJson: %@", [firstDnsServer toJson]);
```
 
 */
@interface StructFirstDnsServer : NSObject


/**
 Designated initializer for StructFirstDnsServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructFirstDnsServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DnsServer.
 
 DNS server define type.
 
 @param aDnsServer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServer:(EnumDnsServer)aDnsServer;

/**
 Setter for DnsServerIp.
 
 The IPv6 address on the interface.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aDnsServerIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServerIp:(NSString *)aDnsServerIp;


/**
 Getter for DnsServer.
 
 DNS server define type.
 
 @return EnumDnsServer The value of property.
 */
- (EnumDnsServer)getDnsServer;

/**
 Getter for DnsServerIp.
 
 The IPv6 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getDnsServerIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv6DnsServer

/**
 StructIpv6DnsServer, as in YANG: __ipv6-dns-server__.
 
 Detailed Description: IPv6 DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv6DnsServer example:
      StructIpv6DnsServer *ipv6DnsServer = [[StructIpv6DnsServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv6DnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv6DnsServer) {
        NSLog(@"ipv6DnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv6DnsServer init successful! toJson: %@", [ipv6DnsServer toJson]);
      NSLog(@"ipv6DnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv6DnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv6DnsServer
  
      // -----------------------------------------------
      // Getters of StructIpv6DnsServer
      [ipv6DnsServer getFirstDnsServer];
      [ipv6DnsServer getSecondDnsServer];
      [ipv6DnsServer getThirdDnsServer];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv6DnsServer toJson: %@", [ipv6DnsServer toJson]);
```
 
 */
@interface StructIpv6DnsServer : NSObject

/**
 As in YANG: __first-dns-server__
 
 @see StructFirstDnsServer
 */
@property (atomic, retain) StructFirstDnsServer *firstDnsServer;
/**
 As in YANG: __second-dns-server__
 
 @see StructFirstDnsServer
 */
@property (atomic, retain) StructFirstDnsServer *secondDnsServer;
/**
 As in YANG: __third-dns-server__
 
 @see StructFirstDnsServer
 */
@property (atomic, retain) StructFirstDnsServer *thirdDnsServer;

/**
 Designated initializer for StructIpv6DnsServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv6DnsServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructFirstDnsServerIpv4DnsServer

/**
 StructFirstDnsServerIpv4DnsServer, as in YANG: __first-dns-server__.
 
 Detailed Description: The first DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv4-dns-server -> first-dns-server
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv4-dns-server -> second-dns-server
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv4-dns-server -> third-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructFirstDnsServerIpv4DnsServer example:
      StructFirstDnsServerIpv4DnsServer *firstDnsServer = [[StructFirstDnsServerIpv4DnsServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"firstDnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!firstDnsServer) {
        NSLog(@"firstDnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"firstDnsServer init successful! toJson: %@", [firstDnsServer toJson]);
      NSLog(@"firstDnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[firstDnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructFirstDnsServerIpv4DnsServer
      if ((error = [firstDnsServer setDnsServerIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[firstDnsServer setDnsServerIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructFirstDnsServerIpv4DnsServer
      [firstDnsServer getDnsServer];
      [firstDnsServer getDnsServerIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"firstDnsServer toJson: %@", [firstDnsServer toJson]);
```
 
 */
@interface StructFirstDnsServerIpv4DnsServer : NSObject


/**
 Designated initializer for StructFirstDnsServerIpv4DnsServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructFirstDnsServerIpv4DnsServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DnsServer.
 
 DNS server define type.
 
 @param aDnsServer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServer:(EnumDnsServer)aDnsServer;

/**
 Setter for DnsServerIp.
 
 The IPv4 address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aDnsServerIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServerIp:(NSString *)aDnsServerIp;


/**
 Getter for DnsServer.
 
 DNS server define type.
 
 @return EnumDnsServer The value of property.
 */
- (EnumDnsServer)getDnsServer;

/**
 Getter for DnsServerIp.
 
 The IPv4 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getDnsServerIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv4DnsServer

/**
 StructIpv4DnsServer, as in YANG: __ipv4-dns-server__.
 
 Detailed Description: IPv4 DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv4-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv4DnsServer example:
      StructIpv4DnsServer *ipv4DnsServer = [[StructIpv4DnsServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv4DnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv4DnsServer) {
        NSLog(@"ipv4DnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv4DnsServer init successful! toJson: %@", [ipv4DnsServer toJson]);
      NSLog(@"ipv4DnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv4DnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv4DnsServer
  
      // -----------------------------------------------
      // Getters of StructIpv4DnsServer
      [ipv4DnsServer getFirstDnsServer];
      [ipv4DnsServer getSecondDnsServer];
      [ipv4DnsServer getThirdDnsServer];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv4DnsServer toJson: %@", [ipv4DnsServer toJson]);
```
 
 */
@interface StructIpv4DnsServer : NSObject

/**
 As in YANG: __first-dns-server__
 
 @see StructFirstDnsServerIpv4DnsServer
 */
@property (atomic, retain) StructFirstDnsServerIpv4DnsServer *firstDnsServer;
/**
 As in YANG: __second-dns-server__
 
 @see StructFirstDnsServerIpv4DnsServer
 */
@property (atomic, retain) StructFirstDnsServerIpv4DnsServer *secondDnsServer;
/**
 As in YANG: __third-dns-server__
 
 @see StructFirstDnsServerIpv4DnsServer
 */
@property (atomic, retain) StructFirstDnsServerIpv4DnsServer *thirdDnsServer;

/**
 Designated initializer for StructIpv4DnsServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv4DnsServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPptpConfig

/**
 StructPptpConfig, as in YANG: __pptp-config__.
 
 Detailed Description: PPTP configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> pptp-config
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPptpConfig example:
      StructPptpConfig *pptpConfig = [[StructPptpConfig alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pptpConfig init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pptpConfig) {
        NSLog(@"pptpConfig is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pptpConfig init successful! toJson: %@", [pptpConfig toJson]);
      NSLog(@"pptpConfig validated result: %lu, 0 means it passes validation.", (unsigned long)[pptpConfig validate]);
      
      // -----------------------------------------------
      // Setters of StructPptpConfig
      if ((error = [pptpConfig setSubnet:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpConfig setSubnet:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpConfig setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpConfig setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpConfig setPptpServerIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpConfig setPptpServerIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpConfig setConfigIp:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpConfig setConfigIp:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpConfig setGateway:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpConfig setGateway:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructPptpConfig
      [pptpConfig getSubnet];
      [pptpConfig getIp];
      [pptpConfig getPptpServerIp];
      [pptpConfig getConfigIp];
      [pptpConfig getGateway];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pptpConfig toJson: %@", [pptpConfig toJson]);
```
 
 */
@interface StructPptpConfig : NSObject


/**
 Designated initializer for StructPptpConfig either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPptpConfig if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Subnet.
 
 The netmask.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aSubnet Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSubnet:(NSString *)aSubnet;

/**
 Setter for Ip.
 
 The IP address of the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for PptpServerIp.
 
 The PPTP server address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aPptpServerIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPptpServerIp:(NSString *)aPptpServerIp;

/**
 Setter for ConfigIp.
 
 True for ontaining IP by DHCP. Flase for static IP.
 
 @param aConfigIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setConfigIp:(BOOL)aConfigIp;

/**
 Setter for Gateway.
 
 The gateway address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aGateway Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setGateway:(NSString *)aGateway;


/**
 Getter for Subnet.
 
 The netmask.
 
 @return NSString * The value of property.
 */
- (NSString *)getSubnet;

/**
 Getter for Ip.
 
 The IP address of the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for PptpServerIp.
 
 The PPTP server address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getPptpServerIp;

/**
 Getter for ConfigIp.
 
 True for ontaining IP by DHCP. Flase for static IP.
 
 @return BOOL The value of property.
 */
- (BOOL)getConfigIp;

/**
 Getter for Gateway.
 
 The gateway address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getGateway;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWanMac

/**
 StructWanMac, as in YANG: __wan-mac__.
 
 Detailed Description: WAN mac address setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> wan-mac
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWanMac example:
      StructWanMac *wanMac = [[StructWanMac alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wanMac init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wanMac) {
        NSLog(@"wanMac is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wanMac init successful! toJson: %@", [wanMac toJson]);
      NSLog(@"wanMac validated result: %lu, 0 means it passes validation.", (unsigned long)[wanMac validate]);
      
      // -----------------------------------------------
      // Setters of StructWanMac
      if ((error = [wanMac setSetWanMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wanMac setSetWanMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wanMac setCloneComputerMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wanMac setCloneComputerMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWanMac
      [wanMac getSetWanMac];
      [wanMac getWanMacSetting];
      [wanMac getCloneComputerMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wanMac toJson: %@", [wanMac toJson]);
```
 
 */
@interface StructWanMac : NSObject


/**
 Designated initializer for StructWanMac either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWanMac if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for SetWanMac.
 
 Input a valid MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aSetWanMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSetWanMac:(NSString *)aSetWanMac;

/**
 Setter for WanMacSetting.
 
 The type for setting WAN mac address.
 
 @param aWanMacSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWanMacSetting:(EnumWanMacSetting)aWanMacSetting;

/**
 Setter for CloneComputerMac.
 
 Input the IP address of the computer on LAN whose MAC you are
cloning.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aCloneComputerMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCloneComputerMac:(NSString *)aCloneComputerMac;


/**
 Getter for SetWanMac.
 
 Input a valid MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getSetWanMac;

/**
 Getter for WanMacSetting.
 
 The type for setting WAN mac address.
 
 @return EnumWanMacSetting The value of property.
 */
- (EnumWanMacSetting)getWanMacSetting;

/**
 Getter for CloneComputerMac.
 
 Input the IP address of the computer on LAN whose MAC you are
cloning.
 
 @return NSString * The value of property.
 */
- (NSString *)getCloneComputerMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticIpv6Address

/**
 StructStaticIpv6Address, as in YANG: __static-ipv6-address__.
 
 Detailed Description: Static IPv6 address.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-address -> static-ipv6-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticIpv6Address example:
      StructStaticIpv6Address *staticIpv6Address = [[StructStaticIpv6Address alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticIpv6Address init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticIpv6Address) {
        NSLog(@"staticIpv6Address is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticIpv6Address init successful! toJson: %@", [staticIpv6Address toJson]);
      NSLog(@"staticIpv6Address validated result: %lu, 0 means it passes validation.", (unsigned long)[staticIpv6Address validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticIpv6Address
      if ((error = [staticIpv6Address setIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpv6Address setIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpv6Address setPrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpv6Address setPrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpv6Address setIpv6DefaultGateway:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpv6Address setIpv6DefaultGateway:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticIpv6Address
      [staticIpv6Address getIpv6Address];
      [staticIpv6Address getPrefixLength];
      [staticIpv6Address getIpv6DefaultGateway];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticIpv6Address toJson: %@", [staticIpv6Address toJson]);
```
 
 */
@interface StructStaticIpv6Address : NSObject


/**
 Designated initializer for StructStaticIpv6Address either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticIpv6Address if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ipv6Address.
 
 IPv6 address.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6Address:(NSString *)aIpv6Address;

/**
 Setter for PrefixLength.
 
 The address prefix length which specify how many most significant
bits in an IPv6 address compose a the network address.
 
 @param aPrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPrefixLength:(NSInteger)aPrefixLength;

/**
 Setter for Ipv6DefaultGateway.
 
 IPv6 default gateway.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpv6DefaultGateway Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6DefaultGateway:(NSString *)aIpv6DefaultGateway;


/**
 Getter for Ipv6Address.
 
 IPv6 address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6Address;

/**
 Getter for PrefixLength.
 
 The address prefix length which specify how many most significant
bits in an IPv6 address compose a the network address.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPrefixLength;

/**
 Getter for Ipv6DefaultGateway.
 
 IPv6 default gateway.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6DefaultGateway;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcp

/**
 StructDhcp, as in YANG: __dhcp__.
 
 Detailed Description: DHCP setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-address -> dhcp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcp example:
      StructDhcp *dhcp = [[StructDhcp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcp) {
        NSLog(@"dhcp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcp init successful! toJson: %@", [dhcp toJson]);
      NSLog(@"dhcp validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcp validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcp
  
      // -----------------------------------------------
      // Getters of StructDhcp
      [dhcp getOption];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcp toJson: %@", [dhcp toJson]);
```
 
 */
@interface StructDhcp : NSObject


/**
 Designated initializer for StructDhcp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Option.
 
 The optoin for obtaining an IPv6 address from DHCPv6 server.
 
 @param aOption Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOption:(EnumOption)aOption;


/**
 Getter for Option.
 
 The optoin for obtaining an IPv6 address from DHCPv6 server.
 
 @return EnumOption The value of property.
 */
- (EnumOption)getOption;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv6Address

/**
 StructIpv6Address, as in YANG: __ipv6-address__.
 
 Detailed Description: IPv6 address setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ipv6-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv6Address example:
      StructIpv6Address *ipv6Address = [[StructIpv6Address alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv6Address init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv6Address) {
        NSLog(@"ipv6Address is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv6Address init successful! toJson: %@", [ipv6Address toJson]);
      NSLog(@"ipv6Address validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv6Address validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv6Address
  
      // -----------------------------------------------
      // Getters of StructIpv6Address
      [ipv6Address getStaticIpv6Address];
      [ipv6Address getLinkLocalOnly];
      [ipv6Address getDhcp];
      [ipv6Address getIpAddressSetting];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv6Address toJson: %@", [ipv6Address toJson]);
```
 
 */
@interface StructIpv6Address : NSObject

/**
 As in YANG: __static-ipv6-address__
 
 @see StructStaticIpv6Address
 */
@property (atomic, retain) StructStaticIpv6Address *staticIpv6Address;
/**
 As in YANG: __dhcp__
 
 @see StructDhcp
 */
@property (atomic, retain) StructDhcp *dhcp;

/**
 Designated initializer for StructIpv6Address either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv6Address if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpAddressSetting.
 
 WAN IPv6 assignment address type.
 
 @param aIpAddressSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpAddressSetting:(EnumIpAddressSetting)aIpAddressSetting;


/**
 Getter for IpAddressSetting.
 
 WAN IPv6 assignment address type.
 
 @return EnumIpAddressSetting The value of property.
 */
- (EnumIpAddressSetting)getIpAddressSetting;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWanIpAssignment

/**
 StructWanIpAssignment, as in YANG: __wan-ip-assignment__.
 
 Detailed Description: WAN IP address assignment.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> wan-ip-assignment
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWanIpAssignment example:
      StructWanIpAssignment *wanIpAssignment = [[StructWanIpAssignment alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wanIpAssignment init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wanIpAssignment) {
        NSLog(@"wanIpAssignment is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wanIpAssignment init successful! toJson: %@", [wanIpAssignment toJson]);
      NSLog(@"wanIpAssignment validated result: %lu, 0 means it passes validation.", (unsigned long)[wanIpAssignment validate]);
      
      // -----------------------------------------------
      // Setters of StructWanIpAssignment
      if ((error = [wanIpAssignment setFixedIpAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wanIpAssignment setFixedIpAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWanIpAssignment
      [wanIpAssignment getWanIpSetting];
      [wanIpAssignment getFixedIpAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wanIpAssignment toJson: %@", [wanIpAssignment toJson]);
```
 
 */
@interface StructWanIpAssignment : NSObject


/**
 Designated initializer for StructWanIpAssignment either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWanIpAssignment if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for WanIpSetting.
 
 The type for setting WAN IP address.
 
 @param aWanIpSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWanIpSetting:(EnumWanIpSetting)aWanIpSetting;

/**
 Setter for FixedIpAddress.
 
 Enter an IP address if the ISP assigned a fixed IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aFixedIpAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFixedIpAddress:(NSString *)aFixedIpAddress;


/**
 Getter for WanIpSetting.
 
 The type for setting WAN IP address.
 
 @return EnumWanIpSetting The value of property.
 */
- (EnumWanIpSetting)getWanIpSetting;

/**
 Getter for FixedIpAddress.
 
 Enter an IP address if the ISP assigned a fixed IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getFixedIpAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticIp

/**
 StructStaticIp, as in YANG: __static-ip__.
 
 Detailed Description: Static IP.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ip-address -> static-ip
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticIp example:
      StructStaticIp *staticIp = [[StructStaticIp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticIp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticIp) {
        NSLog(@"staticIp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticIp init successful! toJson: %@", [staticIp toJson]);
      NSLog(@"staticIp validated result: %lu, 0 means it passes validation.", (unsigned long)[staticIp validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticIp
      if ((error = [staticIp setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIp setGateway:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setGateway:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIp setSubnet:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setSubnet:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticIp
      [staticIp getIp];
      [staticIp getGateway];
      [staticIp getSubnet];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticIp toJson: %@", [staticIp toJson]);
```
 
 */
@interface StructStaticIp : NSObject


/**
 Designated initializer for StructStaticIp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticIp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ip.
 
 Static IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for Gateway.
 
 The gateway address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aGateway Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setGateway:(NSString *)aGateway;

/**
 Setter for Subnet.
 
 Subnet mask.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aSubnet Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSubnet:(NSString *)aSubnet;


/**
 Getter for Ip.
 
 Static IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for Gateway.
 
 The gateway address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getGateway;

/**
 Getter for Subnet.
 
 Subnet mask.
 
 @return NSString * The value of property.
 */
- (NSString *)getSubnet;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddress

/**
 StructIpAddress, as in YANG: __ip-address__.
 
 Detailed Description: IP address.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ip-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddress example:
      StructIpAddress *ipAddress = [[StructIpAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddress init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddress) {
        NSLog(@"ipAddress is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddress init successful! toJson: %@", [ipAddress toJson]);
      NSLog(@"ipAddress validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddress validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddress
      if ((error = [ipAddress setMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddress setMtu:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAddress
      [ipAddress getIpAddressSetting];
      [ipAddress getMtu];
      [ipAddress getStaticIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddress toJson: %@", [ipAddress toJson]);
```
 
 */
@interface StructIpAddress : NSObject

/**
 As in YANG: __static-ip__
 
 @see StructStaticIp
 */
@property (atomic, retain) StructStaticIp *staticIp;

/**
 Designated initializer for StructIpAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpAddressSetting.
 
 IP address setting.
 
 @param aIpAddressSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpAddressSetting:(EnumIpAddressSettingIpAddress)aIpAddressSetting;

/**
 Setter for Mtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 Range:       68..max

 @param aMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMtu:(NSInteger)aMtu;


/**
 Getter for IpAddressSetting.
 
 IP address setting.
 
 @return EnumIpAddressSettingIpAddress The value of property.
 */
- (EnumIpAddressSettingIpAddress)getIpAddressSetting;

/**
 Getter for Mtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMtu;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPptpSetting

/**
 StructPptpSetting, as in YANG: __pptp-setting__.
 
 Detailed Description: PPTP setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> pptp-setting
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPptpSetting example:
      StructPptpSetting *pptpSetting = [[StructPptpSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pptpSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pptpSetting) {
        NSLog(@"pptpSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pptpSetting init successful! toJson: %@", [pptpSetting toJson]);
      NSLog(@"pptpSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[pptpSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructPptpSetting
      if ((error = [pptpSetting setUsername:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpSetting setUsername:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpSetting setAutoConnect:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpSetting setAutoConnect:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpSetting setMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpSetting setMtu:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpSetting setIdleTimeout:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpSetting setIdleTimeout:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pptpSetting setPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pptpSetting setPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructPptpSetting
      [pptpSetting getUsername];
      [pptpSetting getAutoConnect];
      [pptpSetting getEncryption];
      [pptpSetting getMtu];
      [pptpSetting getIdleTimeout];
      [pptpSetting getPassword];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pptpSetting toJson: %@", [pptpSetting toJson]);
```
 
 */
@interface StructPptpSetting : NSObject


/**
 Designated initializer for StructPptpSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPptpSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Username.
 
 Username to be used for authentication.
 
 @param aUsername Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUsername:(NSString *)aUsername;

/**
 Setter for AutoConnect.
 
 True for enable it. False for disable it.
 
 @param aAutoConnect Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAutoConnect:(BOOL)aAutoConnect;

/**
 Setter for Encryption.
 
 Encryption type.
 
 @param aEncryption Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEncryption:(EnumEncryption)aEncryption;

/**
 Setter for Mtu.
 
 Maximum Transmission Unit for this interface.
 
 Range:       1360..1492

 @param aMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMtu:(NSInteger)aMtu;

/**
 Setter for IdleTimeout.
 
 The time in seconds that if the connection remains idle, the
device automatically terminates the connection.
 
 @param aIdleTimeout Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIdleTimeout:(NSInteger)aIdleTimeout;

/**
 Setter for Password.
 
 Password to be used for authentication.
 
 @param aPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPassword:(NSString *)aPassword;


/**
 Getter for Username.
 
 Username to be used for authentication.
 
 @return NSString * The value of property.
 */
- (NSString *)getUsername;

/**
 Getter for AutoConnect.
 
 True for enable it. False for disable it.
 
 @return BOOL The value of property.
 */
- (BOOL)getAutoConnect;

/**
 Getter for Encryption.
 
 Encryption type.
 
 @return EnumEncryption The value of property.
 */
- (EnumEncryption)getEncryption;

/**
 Getter for Mtu.
 
 Maximum Transmission Unit for this interface.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMtu;

/**
 Getter for IdleTimeout.
 
 The time in seconds that if the connection remains idle, the
device automatically terminates the connection.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIdleTimeout;

/**
 Getter for Password.
 
 Password to be used for authentication.
 
 @return NSString * The value of property.
 */
- (NSString *)getPassword;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPppSetting

/**
 StructPppSetting, as in YANG: __ppp-setting__.
 
 Detailed Description: PPP setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element -> ppp-setting
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPppSetting example:
      StructPppSetting *pppSetting = [[StructPppSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pppSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pppSetting) {
        NSLog(@"pppSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pppSetting init successful! toJson: %@", [pppSetting toJson]);
      NSLog(@"pppSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[pppSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructPppSetting
      if ((error = [pppSetting setUsername:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setUsername:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pppSetting setAutoConnectEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setAutoConnectEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pppSetting setIdleDisconnectTime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setIdleDisconnectTime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pppSetting setMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setMtu:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pppSetting setPppoeServiceName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setPppoeServiceName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [pppSetting setPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[pppSetting setPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructPppSetting
      [pppSetting getUsername];
      [pppSetting getAutoConnectEnable];
      [pppSetting getIdleDisconnectTime];
      [pppSetting getMtu];
      [pppSetting getPppoeServiceName];
      [pppSetting getPassword];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pppSetting toJson: %@", [pppSetting toJson]);
```
 
 */
@interface StructPppSetting : NSObject


/**
 Designated initializer for StructPppSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPppSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Username.
 
 PPP connection username.
 
 @param aUsername Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUsername:(NSString *)aUsername;

/**
 Setter for AutoConnectEnable.
 
 Enable or disable auto connection.
 
 @param aAutoConnectEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAutoConnectEnable:(BOOL)aAutoConnectEnable;

/**
 Setter for IdleDisconnectTime.
 
 Idle disconnect time.
 
 @param aIdleDisconnectTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIdleDisconnectTime:(NSInteger)aIdleDisconnectTime;

/**
 Setter for Mtu.
 
 Maximum transmit unit.
 
 Range:       1360..1492

 @param aMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMtu:(NSInteger)aMtu;

/**
 Setter for PppoeServiceName.
 
 PPPoE service name.
 
 @param aPppoeServiceName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPppoeServiceName:(NSString *)aPppoeServiceName;

/**
 Setter for Password.
 
 PPP connection password.
 
 @param aPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPassword:(NSString *)aPassword;


/**
 Getter for Username.
 
 PPP connection username.
 
 @return NSString * The value of property.
 */
- (NSString *)getUsername;

/**
 Getter for AutoConnectEnable.
 
 Enable or disable auto connection.
 
 @return BOOL The value of property.
 */
- (BOOL)getAutoConnectEnable;

/**
 Getter for IdleDisconnectTime.
 
 Idle disconnect time.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIdleDisconnectTime;

/**
 Getter for Mtu.
 
 Maximum transmit unit.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMtu;

/**
 Getter for PppoeServiceName.
 
 PPPoE service name.
 
 @return NSString * The value of property.
 */
- (NSString *)getPppoeServiceName;

/**
 Getter for Password.
 
 PPP connection password.
 
 @return NSString * The value of property.
 */
- (NSString *)getPassword;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWanSettingsElement

/**
 StructWanSettingsElement, as in YANG: __wan-settings-element__.
 
 Detailed Description: WAN settings
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan -> wan-settings -> wan-settings-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWanSettingsElement example:
      StructWanSettingsElement *wanSettingsElement = [[StructWanSettingsElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wanSettingsElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wanSettingsElement) {
        NSLog(@"wanSettingsElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wanSettingsElement init successful! toJson: %@", [wanSettingsElement toJson]);
      NSLog(@"wanSettingsElement validated result: %lu, 0 means it passes validation.", (unsigned long)[wanSettingsElement validate]);
      
      // -----------------------------------------------
      // Setters of StructWanSettingsElement
      if ((error = [wanSettingsElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wanSettingsElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wanSettingsElement setBaseInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wanSettingsElement setBaseInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wanSettingsElement setAutoIpChangeEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[wanSettingsElement setAutoIpChangeEnable:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWanSettingsElement
      [wanSettingsElement getIpv6Tunneling];
      [wanSettingsElement getIpv6DnsServer];
      [wanSettingsElement getName];
      [wanSettingsElement getIpv4DnsServer];
      [wanSettingsElement getBaseInterface];
      [wanSettingsElement getPptpConfig];
      [wanSettingsElement getWanMac];
      [wanSettingsElement getMulticastSetup];
      [wanSettingsElement getIpv6Address];
      [wanSettingsElement getWanIpAssignment];
      [wanSettingsElement getWanEncapsulation];
      [wanSettingsElement getIpAddress];
      [wanSettingsElement getPptpSetting];
      [wanSettingsElement getIpv4Ipv6];
      [wanSettingsElement getPppSetting];
      [wanSettingsElement getAutoIpChangeEnable];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wanSettingsElement toJson: %@", [wanSettingsElement toJson]);
```
 
 */
@interface StructWanSettingsElement : NSObject

/**
 As in YANG: __ipv6-tunneling__
 
 @see StructIpv6Tunneling
 */
@property (atomic, retain) StructIpv6Tunneling *ipv6Tunneling;
/**
 As in YANG: __ipv6-dns-server__
 
 @see StructIpv6DnsServer
 */
@property (atomic, retain) StructIpv6DnsServer *ipv6DnsServer;
/**
 Array which contains NSNumber, as in YANG: __support-encapsulation__
 
 Detailed Description: The support wan encapsulation list of this device.
 
 @see NSNumber
 */
@property (atomic, retain) NSMutableArray <NSNumber *> *supportEncapsulation;
/**
 As in YANG: __ipv4-dns-server__
 
 @see StructIpv4DnsServer
 */
@property (atomic, retain) StructIpv4DnsServer *ipv4DnsServer;
/**
 As in YANG: __pptp-config__
 
 @see StructPptpConfig
 */
@property (atomic, retain) StructPptpConfig *pptpConfig;
/**
 As in YANG: __wan-mac__
 
 @see StructWanMac
 */
@property (atomic, retain) StructWanMac *wanMac;
/**
 As in YANG: __ipv6-address__
 
 @see StructIpv6Address
 */
@property (atomic, retain) StructIpv6Address *ipv6Address;
/**
 As in YANG: __wan-ip-assignment__
 
 @see StructWanIpAssignment
 */
@property (atomic, retain) StructWanIpAssignment *wanIpAssignment;
/**
 As in YANG: __ip-address__
 
 @see StructIpAddress
 */
@property (atomic, retain) StructIpAddress *ipAddress;
/**
 As in YANG: __pptp-setting__
 
 @see StructPptpSetting
 */
@property (atomic, retain) StructPptpSetting *pptpSetting;
/**
 As in YANG: __ppp-setting__
 
 @see StructPppSetting
 */
@property (atomic, retain) StructPppSetting *pppSetting;

/**
 Designated initializer for StructWanSettingsElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWanSettingsElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 WAN name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for BaseInterface.
 
 Based interface.
 
 @param aBaseInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBaseInterface:(NSString *)aBaseInterface;

/**
 Setter for MulticastSetup.
 
 Multicast setup.
 
 @param aMulticastSetup Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMulticastSetup:(EnumMulticastSetup)aMulticastSetup;

/**
 Setter for WanEncapsulation.
 
 WAN encapsulation type.
 
 @param aWanEncapsulation Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWanEncapsulation:(EnumSupportEncapsulationElement)aWanEncapsulation;

/**
 Setter for Ipv4Ipv6.
 
 IPv4/IPv6
 
 @param aIpv4Ipv6 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv4Ipv6:(EnumIpv4Ipv6)aIpv4Ipv6;

/**
 Setter for AutoIpChangeEnable.
 
 Enable auto IP change mode.
 
 @param aAutoIpChangeEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAutoIpChangeEnable:(BOOL)aAutoIpChangeEnable;


/**
 Getter for Name.
 
 WAN name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for BaseInterface.
 
 Based interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getBaseInterface;

/**
 Getter for MulticastSetup.
 
 Multicast setup.
 
 @return EnumMulticastSetup The value of property.
 */
- (EnumMulticastSetup)getMulticastSetup;

/**
 Getter for WanEncapsulation.
 
 WAN encapsulation type.
 
 @return EnumSupportEncapsulationElement The value of property.
 */
- (EnumSupportEncapsulationElement)getWanEncapsulation;

/**
 Getter for Ipv4Ipv6.
 
 IPv4/IPv6
 
 @return EnumIpv4Ipv6 The value of property.
 */
- (EnumIpv4Ipv6)getIpv4Ipv6;

/**
 Getter for AutoIpChangeEnable.
 
 Enable auto IP change mode.
 
 @return BOOL The value of property.
 */
- (BOOL)getAutoIpChangeEnable;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWan

/**
 StructWan, as in YANG: __wan__.
 
 Detailed Description: Wide area network.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wan-profile -> wan

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWan example:
      StructWan *wan = [[StructWan alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wan init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wan) {
        NSLog(@"wan is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wan init successful! toJson: %@", [wan toJson]);
      NSLog(@"wan validated result: %lu, 0 means it passes validation.", (unsigned long)[wan validate]);
      
      // -----------------------------------------------
      // Setters of StructWan
  
      // -----------------------------------------------
      // Getters of StructWan
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wan toJson: %@", [wan toJson]);
```
 
 */
@interface StructWan : NSObject

/**
 Array which contains StructWanSettingsElement, as in YANG: __wan-settings__
 
 Detailed Description: WAN settings
 
 @see StructWanSettingsElement
 */
@property (atomic, retain) NSMutableArray <StructWanSettingsElement *> *wanSettings;

/**
 Designated initializer for StructWan either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWan if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTop

/**
 StructTop, as in YANG: __top__.
 
 Detailed Description: Operation mode
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-opmode -> top

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTop example:
      StructTop *top = [[StructTop alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"top init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!top) {
        NSLog(@"top is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"top init successful! toJson: %@", [top toJson]);
      NSLog(@"top validated result: %lu, 0 means it passes validation.", (unsigned long)[top validate]);
      
      // -----------------------------------------------
      // Setters of StructTop
  
      // -----------------------------------------------
      // Getters of StructTop
      [top getOpmode];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"top toJson: %@", [top toJson]);
```
 
 */
@interface StructTop : NSObject


/**
 Designated initializer for StructTop either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTop if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Opmode.
 
 The operation mode.
 
 @param aOpmode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOpmode:(EnumOpmode)aOpmode;


/**
 Getter for Opmode.
 
 The operation mode.
 
 @return EnumOpmode The value of property.
 */
- (EnumOpmode)getOpmode;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGroupElement

/**
 StructGroupElement, as in YANG: __group-element__.
 
 Detailed Description: List of administrative groups that will be
assigned the associated access rights
defined by the 'rule' list.

The string '*' indicates that all groups apply to the
entry.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> group -> group-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGroupElement example:
      StructGroupElement *groupElement = [[StructGroupElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"groupElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!groupElement) {
        NSLog(@"groupElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"groupElement init successful! toJson: %@", [groupElement toJson]);
      NSLog(@"groupElement validated result: %lu, 0 means it passes validation.", (unsigned long)[groupElement validate]);
      
      // -----------------------------------------------
      // Setters of StructGroupElement
      if ((error = [groupElement setUnionOfMatchallStringType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[groupElement setUnionOfMatchallStringType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [groupElement setUnionOfGroupNameType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[groupElement setUnionOfGroupNameType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructGroupElement
      [groupElement getUnionOfMatchallStringType];
      [groupElement getUnionOfGroupNameType];
      [groupElement getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"groupElement toJson: %@", [groupElement toJson]);
```
 
 */
@interface StructGroupElement : NSObject


/**
 Designated initializer for StructGroupElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGroupElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfMatchallStringType.

 Pattern:     ^(\*)$

 @param aUnionOfMatchallStringType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfMatchallStringType:(NSString *)aUnionOfMatchallStringType;

/**
 Setter for UnionOfGroupNameType.

 Length:      1..max

 Pattern:     ^([^\*].*)$

 @param aUnionOfGroupNameType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfGroupNameType:(NSString *)aUnionOfGroupNameType;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: 0, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemGroupElement)aCurrentUnionItem;


/**
 Getter for UnionOfMatchallStringType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfMatchallStringType;

/**
 Getter for UnionOfGroupNameType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfGroupNameType;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: 0, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemGroupElement The value of property.
 */
- (EnumCurrentUnionItemGroupElement)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAccessOperations

/**
 StructAccessOperations, as in YANG: __access-operations__.
 
 Detailed Description: Access operations associated with this rule.

This leaf matches if it has the value '*' or if the
bit corresponding to the requested operation is set.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> access-operations
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAccessOperations example:
      StructAccessOperations *accessOperations = [[StructAccessOperations alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"accessOperations init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!accessOperations) {
        NSLog(@"accessOperations is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"accessOperations init successful! toJson: %@", [accessOperations toJson]);
      NSLog(@"accessOperations validated result: %lu, 0 means it passes validation.", (unsigned long)[accessOperations validate]);
      
      // -----------------------------------------------
      // Setters of StructAccessOperations
      if ((error = [accessOperations setUnionOfMatchallStringType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessOperations setUnionOfMatchallStringType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructAccessOperations
      [accessOperations getUnionOfMatchallStringType];
      [accessOperations getUnionOfAccessOperationsType];
      [accessOperations getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"accessOperations toJson: %@", [accessOperations toJson]);
```
 
 */
@interface StructAccessOperations : NSObject


/**
 Designated initializer for StructAccessOperations either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAccessOperations if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfMatchallStringType.

 Pattern:     ^(\*)$

 @param aUnionOfMatchallStringType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfMatchallStringType:(NSString *)aUnionOfMatchallStringType;

/**
 Setter for UnionOfAccessOperationsType.

 @param aUnionOfAccessOperationsType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfAccessOperationsType:(NSInteger)aUnionOfAccessOperationsType;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: access-operations, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemAccessOperations)aCurrentUnionItem;


/**
 Getter for UnionOfMatchallStringType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfMatchallStringType;

/**
 Getter for UnionOfAccessOperationsType.

 @return NSInteger The value of property.
 */
- (NSInteger)getUnionOfAccessOperationsType;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: access-operations, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemAccessOperations The value of property.
 */
- (EnumCurrentUnionItemAccessOperations)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNotificationName

/**
 StructNotificationName, as in YANG: __notification-name__.
 
 Detailed Description: This leaf matches if it has the value '*' or if its
value equals the requested notification name.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type -> case_notification -> notification-name
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNotificationName example:
      StructNotificationName *notificationName = [[StructNotificationName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"notificationName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!notificationName) {
        NSLog(@"notificationName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"notificationName init successful! toJson: %@", [notificationName toJson]);
      NSLog(@"notificationName validated result: %lu, 0 means it passes validation.", (unsigned long)[notificationName validate]);
      
      // -----------------------------------------------
      // Setters of StructNotificationName
      if ((error = [notificationName setUnionOfMatchallStringType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationName setUnionOfMatchallStringType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationName setUnionOfString:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationName setUnionOfString:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNotificationName
      [notificationName getUnionOfMatchallStringType];
      [notificationName getUnionOfString];
      [notificationName getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"notificationName toJson: %@", [notificationName toJson]);
```
 
 */
@interface StructNotificationName : NSObject


/**
 Designated initializer for StructNotificationName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNotificationName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfMatchallStringType.

 Pattern:     ^(\*)$

 @param aUnionOfMatchallStringType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfMatchallStringType:(NSString *)aUnionOfMatchallStringType;

/**
 Setter for UnionOfString.

 @param aUnionOfString Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfString:(NSString *)aUnionOfString;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: notification-name, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemNotificationName)aCurrentUnionItem;


/**
 Getter for UnionOfMatchallStringType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfMatchallStringType;

/**
 Getter for UnionOfString.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfString;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: notification-name, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemNotificationName The value of property.
 */
- (EnumCurrentUnionItemNotificationName)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseNotification

/**
 StructCaseNotification, as in YANG: __case_notification__.
 
 Detailed Description: <b>notification</b>(in YANG) is a case of choice: rule-type
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type -> case_notification
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseNotification example:
      StructCaseNotification *caseNotification = [[StructCaseNotification alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseNotification init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseNotification) {
        NSLog(@"caseNotification is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseNotification init successful! toJson: %@", [caseNotification toJson]);
      NSLog(@"caseNotification validated result: %lu, 0 means it passes validation.", (unsigned long)[caseNotification validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseNotification
  
      // -----------------------------------------------
      // Getters of StructCaseNotification
      [caseNotification getNotificationName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseNotification toJson: %@", [caseNotification toJson]);
```
 
 */
@interface StructCaseNotification : NSObject

/**
 As in YANG: __notification-name__
 
 @see StructNotificationName
 */
@property (atomic, retain) StructNotificationName *notificationName;

/**
 Designated initializer for StructCaseNotification either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseNotification if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRpcName

/**
 StructRpcName, as in YANG: __rpc-name__.
 
 Detailed Description: This leaf matches if it has the value '*' or if
its value equals the requested protocol operation
name.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type -> case_protocol-operation -> rpc-name
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRpcName example:
      StructRpcName *rpcName = [[StructRpcName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"rpcName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!rpcName) {
        NSLog(@"rpcName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"rpcName init successful! toJson: %@", [rpcName toJson]);
      NSLog(@"rpcName validated result: %lu, 0 means it passes validation.", (unsigned long)[rpcName validate]);
      
      // -----------------------------------------------
      // Setters of StructRpcName
      if ((error = [rpcName setUnionOfMatchallStringType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rpcName setUnionOfMatchallStringType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [rpcName setUnionOfString:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rpcName setUnionOfString:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRpcName
      [rpcName getUnionOfMatchallStringType];
      [rpcName getUnionOfString];
      [rpcName getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"rpcName toJson: %@", [rpcName toJson]);
```
 
 */
@interface StructRpcName : NSObject


/**
 Designated initializer for StructRpcName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRpcName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfMatchallStringType.

 Pattern:     ^(\*)$

 @param aUnionOfMatchallStringType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfMatchallStringType:(NSString *)aUnionOfMatchallStringType;

/**
 Setter for UnionOfString.

 @param aUnionOfString Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfString:(NSString *)aUnionOfString;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: rpc-name, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemRpcName)aCurrentUnionItem;


/**
 Getter for UnionOfMatchallStringType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfMatchallStringType;

/**
 Getter for UnionOfString.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfString;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: rpc-name, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemRpcName The value of property.
 */
- (EnumCurrentUnionItemRpcName)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseProtocolOperation

/**
 StructCaseProtocolOperation, as in YANG: __case_protocol-operation__.
 
 Detailed Description: <b>protocol-operation</b>(in YANG) is a case of choice: rule-type
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type -> case_protocol-operation
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseProtocolOperation example:
      StructCaseProtocolOperation *caseProtocolOperation = [[StructCaseProtocolOperation alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseProtocolOperation init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseProtocolOperation) {
        NSLog(@"caseProtocolOperation is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseProtocolOperation init successful! toJson: %@", [caseProtocolOperation toJson]);
      NSLog(@"caseProtocolOperation validated result: %lu, 0 means it passes validation.", (unsigned long)[caseProtocolOperation validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseProtocolOperation
  
      // -----------------------------------------------
      // Getters of StructCaseProtocolOperation
      [caseProtocolOperation getRpcName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseProtocolOperation toJson: %@", [caseProtocolOperation toJson]);
```
 
 */
@interface StructCaseProtocolOperation : NSObject

/**
 As in YANG: __rpc-name__
 
 @see StructRpcName
 */
@property (atomic, retain) StructRpcName *rpcName;

/**
 Designated initializer for StructCaseProtocolOperation either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseProtocolOperation if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseDataNode

/**
 StructCaseDataNode, as in YANG: __case_data-node__.
 
 Detailed Description: <b>data-node</b>(in YANG) is a case of choice: rule-type
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type -> case_data-node
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseDataNode example:
      StructCaseDataNode *caseDataNode = [[StructCaseDataNode alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseDataNode init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseDataNode) {
        NSLog(@"caseDataNode is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseDataNode init successful! toJson: %@", [caseDataNode toJson]);
      NSLog(@"caseDataNode validated result: %lu, 0 means it passes validation.", (unsigned long)[caseDataNode validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseDataNode
      if ((error = [caseDataNode setPath:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseDataNode setPath:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseDataNode
      [caseDataNode getPath];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseDataNode toJson: %@", [caseDataNode toJson]);
```
 
 */
@interface StructCaseDataNode : NSObject


/**
 Designated initializer for StructCaseDataNode either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseDataNode if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Path.
 
 Data Node Instance Identifier associated with the
data node controlled by this rule.

Configuration data or state data instance
identifiers start with a top-level data node.  A
complete instance identifier is required for this
type of path value.

The special value '/' refers to all possible
datastore contents.
 
 @param aPath Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPath:(NSString *)aPath;


/**
 Getter for Path.
 
 Data Node Instance Identifier associated with the
data node controlled by this rule.

Configuration data or state data instance
identifiers start with a top-level data node.  A
complete instance identifier is required for this
type of path value.

The special value '/' refers to all possible
datastore contents.
 
 @return NSString * The value of property.
 */
- (NSString *)getPath;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRuleType

/**
 StructRuleType, as in YANG: __rule-type__.
 
 Detailed Description: This choice matches if all leafs present in the rule
match the request.  If no leafs are present, the
choice matches all requests.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> rule-type
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRuleType example:
      StructRuleType *ruleType = [[StructRuleType alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ruleType init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ruleType) {
        NSLog(@"ruleType is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ruleType init successful! toJson: %@", [ruleType toJson]);
      NSLog(@"ruleType validated result: %lu, 0 means it passes validation.", (unsigned long)[ruleType validate]);
      
      // -----------------------------------------------
      // Setters of StructRuleType
  
      // -----------------------------------------------
      // Getters of StructRuleType
      [ruleType getCaseNotification];
      [ruleType getCaseProtocolOperation];
      [ruleType getCaseDataNode];
      [ruleType getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ruleType toJson: %@", [ruleType toJson]);
```
 
 */
@interface StructRuleType : NSObject

/**
 As in YANG: __case_notification__
 
 @see StructCaseNotification
 */
@property (atomic, retain) StructCaseNotification *caseNotification;
/**
 As in YANG: __case_protocol-operation__
 
 @see StructCaseProtocolOperation
 */
@property (atomic, retain) StructCaseProtocolOperation *caseProtocolOperation;
/**
 As in YANG: __case_data-node__
 
 @see StructCaseDataNode
 */
@property (atomic, retain) StructCaseDataNode *caseDataNode;

/**
 Designated initializer for StructRuleType either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRuleType if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: rule-type, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseRuleType)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: rule-type, was not in original defined YANG data model.
 
 @return EnumCurrentCaseRuleType The value of property.
 */
- (EnumCurrentCaseRuleType)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructModuleName

/**
 StructModuleName, as in YANG: __module-name__.
 
 Detailed Description: Name of the module associated with this rule.

This leaf matches if it has the value '*' or if the
object being accessed is defined in the module with the
specified module name.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element -> module-name
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructModuleName example:
      StructModuleName *moduleName = [[StructModuleName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"moduleName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!moduleName) {
        NSLog(@"moduleName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"moduleName init successful! toJson: %@", [moduleName toJson]);
      NSLog(@"moduleName validated result: %lu, 0 means it passes validation.", (unsigned long)[moduleName validate]);
      
      // -----------------------------------------------
      // Setters of StructModuleName
      if ((error = [moduleName setUnionOfMatchallStringType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[moduleName setUnionOfMatchallStringType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [moduleName setUnionOfString:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[moduleName setUnionOfString:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructModuleName
      [moduleName getUnionOfMatchallStringType];
      [moduleName getUnionOfString];
      [moduleName getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"moduleName toJson: %@", [moduleName toJson]);
```
 
 */
@interface StructModuleName : NSObject


/**
 Designated initializer for StructModuleName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructModuleName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfMatchallStringType.

 Pattern:     ^(\*)$

 @param aUnionOfMatchallStringType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfMatchallStringType:(NSString *)aUnionOfMatchallStringType;

/**
 Setter for UnionOfString.

 @param aUnionOfString Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfString:(NSString *)aUnionOfString;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: module-name, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemModuleName)aCurrentUnionItem;


/**
 Getter for UnionOfMatchallStringType.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfMatchallStringType;

/**
 Getter for UnionOfString.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfString;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: module-name, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemModuleName The value of property.
 */
- (EnumCurrentUnionItemModuleName)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRuleElement

/**
 StructRuleElement, as in YANG: __rule-element__.
 
 Detailed Description: One access control rule.

Rules are processed in user-defined order until a match is
found.  A rule matches if 'module-name', 'rule-type', and
'access-operations' match the request.  If a rule
matches, the 'action' leaf determines if access is granted
or not.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element -> rule -> rule-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRuleElement example:
      StructRuleElement *ruleElement = [[StructRuleElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ruleElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ruleElement) {
        NSLog(@"ruleElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ruleElement init successful! toJson: %@", [ruleElement toJson]);
      NSLog(@"ruleElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ruleElement validate]);
      
      // -----------------------------------------------
      // Setters of StructRuleElement
      if ((error = [ruleElement setComment:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ruleElement setComment:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ruleElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ruleElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRuleElement
      [ruleElement getComment];
      [ruleElement getName];
      [ruleElement getAccessOperations];
      [ruleElement getRuleType];
      [ruleElement getAction];
      [ruleElement getModuleName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ruleElement toJson: %@", [ruleElement toJson]);
```
 
 */
@interface StructRuleElement : NSObject

/**
 As in YANG: __access-operations__
 
 @see StructAccessOperations
 */
@property (atomic, retain) StructAccessOperations *accessOperations;
/**
 As in YANG: __rule-type__
 
 @see StructRuleType
 */
@property (atomic, retain) StructRuleType *ruleType;
/**
 As in YANG: __module-name__
 
 @see StructModuleName
 */
@property (atomic, retain) StructModuleName *moduleName;

/**
 Designated initializer for StructRuleElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRuleElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Comment.
 
 A textual description of the access rule.
 
 @param aComment Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setComment:(NSString *)aComment;

/**
 Setter for Name.
 
 Arbitrary name assigned to the rule.
 
 Length:      1..max

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Action.
 
 The access control action associated with the
rule.  If a rule is determined to match a
particular request, then this object is used
to determine whether to permit or deny the
request.
 
 @param aAction Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAction:(EnumActionType)aAction;


/**
 Getter for Comment.
 
 A textual description of the access rule.
 
 @return NSString * The value of property.
 */
- (NSString *)getComment;

/**
 Getter for Name.
 
 Arbitrary name assigned to the rule.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Action.
 
 The access control action associated with the
rule.  If a rule is determined to match a
particular request, then this object is used
to determine whether to permit or deny the
request.
 
 @return EnumActionType The value of property.
 */
- (EnumActionType)getAction;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRuleListElement

/**
 StructRuleListElement, as in YANG: __rule-list-element__.
 
 Detailed Description: An ordered collection of access control rules.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> rule-list -> rule-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRuleListElement example:
      StructRuleListElement *ruleListElement = [[StructRuleListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ruleListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ruleListElement) {
        NSLog(@"ruleListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ruleListElement init successful! toJson: %@", [ruleListElement toJson]);
      NSLog(@"ruleListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ruleListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructRuleListElement
      if ((error = [ruleListElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ruleListElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRuleListElement
      [ruleListElement getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ruleListElement toJson: %@", [ruleListElement toJson]);
```
 
 */
@interface StructRuleListElement : NSObject

/**
 Array which contains StructGroupElement, as in YANG: __group__
 
 Detailed Description: List of administrative groups that will be
assigned the associated access rights
defined by the 'rule' list.

The string '*' indicates that all groups apply to the
entry.
 
 @see StructGroupElement
 */
@property (atomic, retain) NSMutableArray <StructGroupElement *> *group;
/**
 Array which contains StructRuleElement, as in YANG: __rule__
 
 Detailed Description: One access control rule.

Rules are processed in user-defined order until a match is
found.  A rule matches if 'module-name', 'rule-type', and
'access-operations' match the request.  If a rule
matches, the 'action' leaf determines if access is granted
or not.
 
 @see StructRuleElement
 */
@property (atomic, retain) NSMutableArray <StructRuleElement *> *rule;

/**
 Designated initializer for StructRuleListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRuleListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 Arbitrary name assigned to the rule-list.
 
 Length:      1..max

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Name.
 
 Arbitrary name assigned to the rule-list.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGroupElementGroup

/**
 StructGroupElementGroup, as in YANG: __group-element__.
 
 Detailed Description: One NACM Group Entry.  This list will only contain
configured entries, not any entries learned from
any transport protocols.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> groups -> group -> group-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGroupElementGroup example:
      StructGroupElementGroup *groupElement = [[StructGroupElementGroup alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"groupElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!groupElement) {
        NSLog(@"groupElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"groupElement init successful! toJson: %@", [groupElement toJson]);
      NSLog(@"groupElement validated result: %lu, 0 means it passes validation.", (unsigned long)[groupElement validate]);
      
      // -----------------------------------------------
      // Setters of StructGroupElementGroup
      [groupElement.userName addObject:@"abc"];
      if ((error = [groupElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[groupElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructGroupElementGroup
      for (NSString *o in groupElement.userName) {
          NSLog(@"element in groupElement.userName: %@", o);
      }
      [groupElement getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"groupElement toJson: %@", [groupElement toJson]);
```
 
 */
@interface StructGroupElementGroup : NSObject

/**
 Array which contains NSString, as in YANG: __user-name__
 
 Detailed Description: Each entry identifies the username of
a member of the group associated with
this entry.
 
 @see NSString
 */
@property (atomic, retain) NSMutableArray <NSString *> *userName;

/**
 Designated initializer for StructGroupElementGroup either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGroupElementGroup if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 Group name associated with this entry.
 
 Length:      1..max

 Pattern:     ^([^\*].*)$

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Name.
 
 Group name associated with this entry.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGroups

/**
 StructGroups, as in YANG: __groups__.
 
 Detailed Description: NETCONF Access Control Groups.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm -> groups
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGroups example:
      StructGroups *groups = [[StructGroups alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"groups init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!groups) {
        NSLog(@"groups is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"groups init successful! toJson: %@", [groups toJson]);
      NSLog(@"groups validated result: %lu, 0 means it passes validation.", (unsigned long)[groups validate]);
      
      // -----------------------------------------------
      // Setters of StructGroups
  
      // -----------------------------------------------
      // Getters of StructGroups
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"groups toJson: %@", [groups toJson]);
```
 
 */
@interface StructGroups : NSObject

/**
 Array which contains StructGroupElementGroup, as in YANG: __group__
 
 Detailed Description: One NACM Group Entry.  This list will only contain
configured entries, not any entries learned from
any transport protocols.
 
 @see StructGroupElementGroup
 */
@property (atomic, retain) NSMutableArray <StructGroupElementGroup *> *group;

/**
 Designated initializer for StructGroups either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGroups if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNacm

/**
 StructNacm, as in YANG: __nacm__.
 
 Detailed Description: Parameters for NETCONF Access Control Model.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-netconf-acm -> nacm

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNacm example:
      StructNacm *nacm = [[StructNacm alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"nacm init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!nacm) {
        NSLog(@"nacm is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"nacm init successful! toJson: %@", [nacm toJson]);
      NSLog(@"nacm validated result: %lu, 0 means it passes validation.", (unsigned long)[nacm validate]);
      
      // -----------------------------------------------
      // Setters of StructNacm
      if ((error = [nacm setDeniedOperations:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[nacm setDeniedOperations:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [nacm setEnableExternalGroups:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[nacm setEnableExternalGroups:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [nacm setDeniedDataWrites:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[nacm setDeniedDataWrites:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [nacm setDeniedNotifications:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[nacm setDeniedNotifications:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [nacm setEnableNacm:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[nacm setEnableNacm:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNacm
      [nacm getReadDefault];
      [nacm getDeniedOperations];
      [nacm getEnableExternalGroups];
      [nacm getDeniedDataWrites];
      [nacm getWriteDefault];
      [nacm getDeniedNotifications];
      [nacm getGroups];
      [nacm getExecDefault];
      [nacm getEnableNacm];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"nacm toJson: %@", [nacm toJson]);
```
 
 */
@interface StructNacm : NSObject

/**
 Array which contains StructRuleListElement, as in YANG: __rule-list__
 
 Detailed Description: An ordered collection of access control rules.
 
 @see StructRuleListElement
 */
@property (atomic, retain) NSMutableArray <StructRuleListElement *> *ruleList;
/**
 As in YANG: __groups__
 
 @see StructGroups
 */
@property (atomic, retain) StructGroups *groups;

/**
 Designated initializer for StructNacm either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNacm if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for ReadDefault.
 
 Controls whether read access is granted if
no appropriate rule is found for a
particular read request.
 
 @param aReadDefault Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setReadDefault:(EnumActionType)aReadDefault;

/**
 Setter for DeniedOperations.
 
 Number of times since the server last restarted that a
protocol operation request was denied.
 
 @param aDeniedOperations Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeniedOperations:(NSInteger)aDeniedOperations;

/**
 Setter for EnableExternalGroups.
 
 Controls whether the server uses the groups reported by the
NETCONF transport layer when it assigns the user to a set of
NACM groups.  If this leaf has the value 'false', any group
names reported by the transport layer are ignored by the
server.
 
 @param aEnableExternalGroups Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnableExternalGroups:(BOOL)aEnableExternalGroups;

/**
 Setter for DeniedDataWrites.
 
 Number of times since the server last restarted that a
protocol operation request to alter
a configuration datastore was denied.
 
 @param aDeniedDataWrites Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeniedDataWrites:(NSInteger)aDeniedDataWrites;

/**
 Setter for WriteDefault.
 
 Controls whether create, update, or delete access
is granted if no appropriate rule is found for a
particular write request.
 
 @param aWriteDefault Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWriteDefault:(EnumActionType)aWriteDefault;

/**
 Setter for DeniedNotifications.
 
 Number of times since the server last restarted that
a notification was dropped for a subscription because
access to the event type was denied.
 
 @param aDeniedNotifications Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeniedNotifications:(NSInteger)aDeniedNotifications;

/**
 Setter for ExecDefault.
 
 Controls whether exec access is granted if no appropriate
rule is found for a particular protocol operation request.
 
 @param aExecDefault Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setExecDefault:(EnumActionType)aExecDefault;

/**
 Setter for EnableNacm.
 
 Enables or disables all NETCONF access control
enforcement.  If 'true', then enforcement
is enabled.  If 'false', then enforcement
is disabled.
 
 @param aEnableNacm Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnableNacm:(BOOL)aEnableNacm;


/**
 Getter for ReadDefault.
 
 Controls whether read access is granted if
no appropriate rule is found for a
particular read request.
 
 @return EnumActionType The value of property.
 */
- (EnumActionType)getReadDefault;

/**
 Getter for DeniedOperations.
 
 Number of times since the server last restarted that a
protocol operation request was denied.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDeniedOperations;

/**
 Getter for EnableExternalGroups.
 
 Controls whether the server uses the groups reported by the
NETCONF transport layer when it assigns the user to a set of
NACM groups.  If this leaf has the value 'false', any group
names reported by the transport layer are ignored by the
server.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnableExternalGroups;

/**
 Getter for DeniedDataWrites.
 
 Number of times since the server last restarted that a
protocol operation request to alter
a configuration datastore was denied.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDeniedDataWrites;

/**
 Getter for WriteDefault.
 
 Controls whether create, update, or delete access
is granted if no appropriate rule is found for a
particular write request.
 
 @return EnumActionType The value of property.
 */
- (EnumActionType)getWriteDefault;

/**
 Getter for DeniedNotifications.
 
 Number of times since the server last restarted that
a notification was dropped for a subscription because
access to the event type was denied.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDeniedNotifications;

/**
 Getter for ExecDefault.
 
 Controls whether exec access is granted if no appropriate
rule is found for a particular protocol operation request.
 
 @return EnumActionType The value of property.
 */
- (EnumActionType)getExecDefault;

/**
 Getter for EnableNacm.
 
 Enables or disables all NETCONF access control
enforcement.  If 'true', then enforcement
is enabled.  If 'false', then enforcement
is disabled.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnableNacm;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputGetChannelList

/**
 StructInputGetChannelList, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-radio -> get-channel-list -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputGetChannelList example:
      StructInputGetChannelList *input = [[StructInputGetChannelList alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputGetChannelList
  
      // -----------------------------------------------
      // Getters of StructInputGetChannelList
      [input getBand];
      [input getBandwidth];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputGetChannelList : NSObject


/**
 Designated initializer for StructInputGetChannelList either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputGetChannelList if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Band.
 
 The radio band.
 
 @param aBand Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBand:(EnumWifiTypesRadioBand)aBand;

/**
 Setter for Bandwidth.
 
 The selected bandwidth.
 
 @param aBandwidth Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBandwidth:(EnumWifiTypesChannelBandwidth)aBandwidth;


/**
 Getter for Band.
 
 The radio band.
 
 @return EnumWifiTypesRadioBand The value of property.
 */
- (EnumWifiTypesRadioBand)getBand;

/**
 Getter for Bandwidth.
 
 The selected bandwidth.
 
 @return EnumWifiTypesChannelBandwidth The value of property.
 */
- (EnumWifiTypesChannelBandwidth)getBandwidth;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetChannelList

/**
 StructOutputGetChannelList, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-radio -> get-channel-list -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetChannelList example:
      StructOutputGetChannelList *output = [[StructOutputGetChannelList alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetChannelList
      if ((error = [output setChannelList:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setChannelList:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputGetChannelList
      [output getChannelList];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetChannelList : NSObject


/**
 Designated initializer for StructOutputGetChannelList either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetChannelList if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for ChannelList.
 
 The supported channel list.
 
 @param aChannelList Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChannelList:(NSString *)aChannelList;


/**
 Getter for ChannelList.
 
 The supported channel list.
 
 @return NSString * The value of property.
 */
- (NSString *)getChannelList;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetChannelList

/**
 StructGetChannelList, as in YANG: __get-channel-list__.
 
 Detailed Description: Get supported channel list based on bandwidth.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-radio -> get-channel-list

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetChannelList example:
      StructGetChannelList *getChannelList = [[StructGetChannelList alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getChannelList init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getChannelList) {
        NSLog(@"getChannelList is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getChannelList init successful! toJson: %@", [getChannelList toJson]);
      NSLog(@"getChannelList validated result: %lu, 0 means it passes validation.", (unsigned long)[getChannelList validate]);
      
      // -----------------------------------------------
      // Setters of StructGetChannelList
  
      // -----------------------------------------------
      // Getters of StructGetChannelList
      [getChannelList getInput];
      [getChannelList getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getChannelList toJson: %@", [getChannelList toJson]);
```
 
 */
@interface StructGetChannelList : NSObject

/**
 As in YANG: __input__
 
 @see StructInputGetChannelList
 */
@property (atomic, retain) StructInputGetChannelList *input;
/**
 As in YANG: __output__
 
 @see StructOutputGetChannelList
 */
@property (atomic, retain) StructOutputGetChannelList *output;

/**
 Designated initializer for StructGetChannelList either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetChannelList if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWifiStatus

/**
 StructWifiStatus, as in YANG: __wifi-status__.
 
 Detailed Description: wifi device status
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> network-devices -> device -> device-element -> wifi-status
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWifiStatus example:
      StructWifiStatus *wifiStatus = [[StructWifiStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wifiStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wifiStatus) {
        NSLog(@"wifiStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wifiStatus init successful! toJson: %@", [wifiStatus toJson]);
      NSLog(@"wifiStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[wifiStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructWifiStatus
      if ((error = [wifiStatus setRadioIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiStatus setRadioIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wifiStatus setRssi:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiStatus setRssi:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wifiStatus setApBssid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiStatus setApBssid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWifiStatus
      [wifiStatus getRadioIndex];
      [wifiStatus getRadio];
      [wifiStatus getRssi];
      [wifiStatus getApBssid];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wifiStatus toJson: %@", [wifiStatus toJson]);
```
 
 */
@interface StructWifiStatus : NSObject


/**
 Designated initializer for StructWifiStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWifiStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for RadioIndex.
 
 Radio index. Identification or multiple radio in same band.
 
 @param aRadioIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRadioIndex:(NSString *)aRadioIndex;

/**
 Setter for Radio.
 
 the radio device is linked
 
 @param aRadio Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRadio:(EnumRadio)aRadio;

/**
 Setter for Rssi.
 
 wifi rssi
 
 @param aRssi Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRssi:(NSInteger)aRssi;

/**
 Setter for ApBssid.
 
 AP BSSID. The MAC address the STA is associted.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aApBssid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setApBssid:(NSString *)aApBssid;


/**
 Getter for RadioIndex.
 
 Radio index. Identification or multiple radio in same band.
 
 @return NSString * The value of property.
 */
- (NSString *)getRadioIndex;

/**
 Getter for Radio.
 
 the radio device is linked
 
 @return EnumRadio The value of property.
 */
- (EnumRadio)getRadio;

/**
 Getter for Rssi.
 
 wifi rssi
 
 @return NSInteger The value of property.
 */
- (NSInteger)getRssi;

/**
 Getter for ApBssid.
 
 AP BSSID. The MAC address the STA is associted.
 
 @return NSString * The value of property.
 */
- (NSString *)getApBssid;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceElement

/**
 StructDeviceElement, as in YANG: __device-element__.
 
 Detailed Description: network device
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> network-devices -> device -> device-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceElement example:
      StructDeviceElement *deviceElement = [[StructDeviceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceElement) {
        NSLog(@"deviceElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceElement init successful! toJson: %@", [deviceElement toJson]);
      NSLog(@"deviceElement validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceElement
      if ((error = [deviceElement setGuest:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setGuest:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setAliveStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setAliveStatus:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setOsType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setOsType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setDeviceName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setDeviceName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setTag:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setTag:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setHostName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setHostName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setIpv4Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setIpv4Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setJoinTime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setJoinTime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setHostType:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setHostType:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setManufacturer:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setManufacturer:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDeviceElement
      [deviceElement getDeviceType];
      [deviceElement getGuest];
      [deviceElement getAliveStatus];
      [deviceElement getOsType];
      [deviceElement getDeviceName];
      [deviceElement getTag];
      [deviceElement getWifiStatus];
      [deviceElement getConnectionType];
      [deviceElement getHostName];
      [deviceElement getIpv6Address];
      [deviceElement getIpv4Address];
      [deviceElement getJoinTime];
      [deviceElement getId];
      [deviceElement getHostType];
      [deviceElement getManufacturer];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceElement toJson: %@", [deviceElement toJson]);
```
 
 */
@interface StructDeviceElement : NSObject

/**
 As in YANG: __wifi-status__
 
 @see StructWifiStatus
 */
@property (atomic, retain) StructWifiStatus *wifiStatus;

/**
 Designated initializer for StructDeviceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DeviceType.
 
 network device type
 
 @param aDeviceType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeviceType:(EnumDeviceType)aDeviceType;

/**
 Setter for Guest.
 
 True for the device is associated to gues network. Flase for not.
 
 @param aGuest Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setGuest:(BOOL)aGuest;

/**
 Setter for AliveStatus.
 
 true for alive. false for not alive.
 
 @param aAliveStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAliveStatus:(BOOL)aAliveStatus;

/**
 Setter for OsType.
 
 os of device
 
 @param aOsType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOsType:(NSString *)aOsType;

/**
 Setter for DeviceName.
 
 a friendly device name
 
 @param aDeviceName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeviceName:(NSString *)aDeviceName;

/**
 Setter for Tag.
 
 device tag for any kind of classification
 
 @param aTag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTag:(NSString *)aTag;

/**
 Setter for ConnectionType.
 
 network device connection type
 
 @param aConnectionType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setConnectionType:(EnumConnectionType)aConnectionType;

/**
 Setter for HostName.
 
 system host name of device
 
 @param aHostName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHostName:(NSString *)aHostName;

/**
 Setter for Ipv6Address.
 
 ipv6 address of device
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$

 @param aIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv6Address:(NSString *)aIpv6Address;

/**
 Setter for Ipv4Address.
 
 ipv4 address of device
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aIpv4Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv4Address:(NSString *)aIpv4Address;

/**
 Setter for JoinTime.
 
 The time which the device join to the system. Based on system up
time
 
 @param aJoinTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setJoinTime:(NSInteger)aJoinTime;

/**
 Setter for Id.
 
 Identity for device. Different device type will have different id format.
For example, for ethernet device, it will use mac address to be a id. And
for z-wave device, it will use z-wave id.
 
 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;

/**
 Setter for HostType.
 
 Device customized type.
Type is shown as below
- 0 represent Unknow
- 1 represent PC
- 2 represent NB
- 3 represent AP
- 4 represent NAS
- 5 represent PLA
- 6 represent Repeater
- 7 represent Smart Phone
- 8 represent Others
- 9 represent Pad
- 10 represent Router
- 11 represent Watch
- 12 represent Game
- 13 represent WebCam
 
 @param aHostType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHostType:(NSInteger)aHostType;

/**
 Setter for Manufacturer.
 
 device manufacturer
 
 @param aManufacturer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setManufacturer:(NSString *)aManufacturer;


/**
 Getter for DeviceType.
 
 network device type
 
 @return EnumDeviceType The value of property.
 */
- (EnumDeviceType)getDeviceType;

/**
 Getter for Guest.
 
 True for the device is associated to gues network. Flase for not.
 
 @return BOOL The value of property.
 */
- (BOOL)getGuest;

/**
 Getter for AliveStatus.
 
 true for alive. false for not alive.
 
 @return BOOL The value of property.
 */
- (BOOL)getAliveStatus;

/**
 Getter for OsType.
 
 os of device
 
 @return NSString * The value of property.
 */
- (NSString *)getOsType;

/**
 Getter for DeviceName.
 
 a friendly device name
 
 @return NSString * The value of property.
 */
- (NSString *)getDeviceName;

/**
 Getter for Tag.
 
 device tag for any kind of classification
 
 @return NSString * The value of property.
 */
- (NSString *)getTag;

/**
 Getter for ConnectionType.
 
 network device connection type
 
 @return EnumConnectionType The value of property.
 */
- (EnumConnectionType)getConnectionType;

/**
 Getter for HostName.
 
 system host name of device
 
 @return NSString * The value of property.
 */
- (NSString *)getHostName;

/**
 Getter for Ipv6Address.
 
 ipv6 address of device
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv6Address;

/**
 Getter for Ipv4Address.
 
 ipv4 address of device
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv4Address;

/**
 Getter for JoinTime.
 
 The time which the device join to the system. Based on system up
time
 
 @return NSInteger The value of property.
 */
- (NSInteger)getJoinTime;

/**
 Getter for Id.
 
 Identity for device. Different device type will have different id format.
For example, for ethernet device, it will use mac address to be a id. And
for z-wave device, it will use z-wave id.
 
 @return NSString * The value of property.
 */
- (NSString *)getId;

/**
 Getter for HostType.
 
 Device customized type.
Type is shown as below
- 0 represent Unknow
- 1 represent PC
- 2 represent NB
- 3 represent AP
- 4 represent NAS
- 5 represent PLA
- 6 represent Repeater
- 7 represent Smart Phone
- 8 represent Others
- 9 represent Pad
- 10 represent Router
- 11 represent Watch
- 12 represent Game
- 13 represent WebCam
 
 @return NSInteger The value of property.
 */
- (NSInteger)getHostType;

/**
 Getter for Manufacturer.
 
 device manufacturer
 
 @return NSString * The value of property.
 */
- (NSString *)getManufacturer;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNetworkDevices

/**
 StructNetworkDevices, as in YANG: __network-devices__.
 
 Detailed Description: network devices
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> network-devices

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNetworkDevices example:
      StructNetworkDevices *networkDevices = [[StructNetworkDevices alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"networkDevices init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!networkDevices) {
        NSLog(@"networkDevices is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"networkDevices init successful! toJson: %@", [networkDevices toJson]);
      NSLog(@"networkDevices validated result: %lu, 0 means it passes validation.", (unsigned long)[networkDevices validate]);
      
      // -----------------------------------------------
      // Setters of StructNetworkDevices
  
      // -----------------------------------------------
      // Getters of StructNetworkDevices
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"networkDevices toJson: %@", [networkDevices toJson]);
```
 
 */
@interface StructNetworkDevices : NSObject

/**
 Array which contains StructDeviceElement, as in YANG: __device__
 
 Detailed Description: network device
 
 @see StructDeviceElement
 */
@property (atomic, retain) NSMutableArray <StructDeviceElement *> *device;

/**
 Designated initializer for StructNetworkDevices either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNetworkDevices if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputRemoveDeviceCustomizedData

/**
 StructInputRemoveDeviceCustomizedData, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> remove-device-customized-data -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputRemoveDeviceCustomizedData example:
      StructInputRemoveDeviceCustomizedData *input = [[StructInputRemoveDeviceCustomizedData alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputRemoveDeviceCustomizedData
      if ((error = [input setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputRemoveDeviceCustomizedData
      [input getId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputRemoveDeviceCustomizedData : NSObject


/**
 Designated initializer for StructInputRemoveDeviceCustomizedData either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputRemoveDeviceCustomizedData if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Id.
 
 Device id, like MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;


/**
 Getter for Id.
 
 Device id, like MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRemoveDeviceCustomizedData

/**
 StructRemoveDeviceCustomizedData, as in YANG: __remove-device-customized-data__.
 
 Detailed Description: Remove customized setting of a device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> remove-device-customized-data

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRemoveDeviceCustomizedData example:
      StructRemoveDeviceCustomizedData *removeDeviceCustomizedData = [[StructRemoveDeviceCustomizedData alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"removeDeviceCustomizedData init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!removeDeviceCustomizedData) {
        NSLog(@"removeDeviceCustomizedData is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"removeDeviceCustomizedData init successful! toJson: %@", [removeDeviceCustomizedData toJson]);
      NSLog(@"removeDeviceCustomizedData validated result: %lu, 0 means it passes validation.", (unsigned long)[removeDeviceCustomizedData validate]);
      
      // -----------------------------------------------
      // Setters of StructRemoveDeviceCustomizedData
  
      // -----------------------------------------------
      // Getters of StructRemoveDeviceCustomizedData
      [removeDeviceCustomizedData getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"removeDeviceCustomizedData toJson: %@", [removeDeviceCustomizedData toJson]);
```
 
 */
@interface StructRemoveDeviceCustomizedData : NSObject

/**
 As in YANG: __input__
 
 @see StructInputRemoveDeviceCustomizedData
 */
@property (atomic, retain) StructInputRemoveDeviceCustomizedData *input;

/**
 Designated initializer for StructRemoveDeviceCustomizedData either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRemoveDeviceCustomizedData if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSetHostType

/**
 StructInputSetHostType, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-host-type -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSetHostType example:
      StructInputSetHostType *input = [[StructInputSetHostType alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSetHostType
      if ((error = [input setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setHostType:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[input setHostType:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSetHostType
      [input getId];
      [input getHostType];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSetHostType : NSObject


/**
 Designated initializer for StructInputSetHostType either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSetHostType if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Id.
 
 Device id, like MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;

/**
 Setter for HostType.
 
 Device type.
 
 @param aHostType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHostType:(NSInteger)aHostType;


/**
 Getter for Id.
 
 Device id, like MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getId;

/**
 Getter for HostType.
 
 Device type.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getHostType;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetHostType

/**
 StructSetHostType, as in YANG: __set-host-type__.
 
 Detailed Description: Setting device type.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-host-type

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetHostType example:
      StructSetHostType *setHostType = [[StructSetHostType alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setHostType init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setHostType) {
        NSLog(@"setHostType is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setHostType init successful! toJson: %@", [setHostType toJson]);
      NSLog(@"setHostType validated result: %lu, 0 means it passes validation.", (unsigned long)[setHostType validate]);
      
      // -----------------------------------------------
      // Setters of StructSetHostType
  
      // -----------------------------------------------
      // Getters of StructSetHostType
      [setHostType getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setHostType toJson: %@", [setHostType toJson]);
```
 
 */
@interface StructSetHostType : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSetHostType
 */
@property (atomic, retain) StructInputSetHostType *input;

/**
 Designated initializer for StructSetHostType either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetHostType if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSetHostName

/**
 StructInputSetHostName, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-host-name -> input
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-device-name -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSetHostName example:
      StructInputSetHostName *input = [[StructInputSetHostName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSetHostName
      if ((error = [input setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSetHostName
      [input getId];
      [input getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSetHostName : NSObject


/**
 Designated initializer for StructInputSetHostName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSetHostName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Id.
 
 Device id, like MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;

/**
 Setter for Name.
 
 Device name.
 
 Length:      2..24

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Id.
 
 Device id, like MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getId;

/**
 Getter for Name.
 
 Device name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetHostName

/**
 StructSetHostName, as in YANG: __set-host-name__.
 
 Detailed Description: Set device host name.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-host-name

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetHostName example:
      StructSetHostName *setHostName = [[StructSetHostName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setHostName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setHostName) {
        NSLog(@"setHostName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setHostName init successful! toJson: %@", [setHostName toJson]);
      NSLog(@"setHostName validated result: %lu, 0 means it passes validation.", (unsigned long)[setHostName validate]);
      
      // -----------------------------------------------
      // Setters of StructSetHostName
  
      // -----------------------------------------------
      // Getters of StructSetHostName
      [setHostName getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setHostName toJson: %@", [setHostName toJson]);
```
 
 */
@interface StructSetHostName : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSetHostName
 */
@property (atomic, retain) StructInputSetHostName *input;

/**
 Designated initializer for StructSetHostName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetHostName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructL2DeviceFunction

/**
 StructL2DeviceFunction, as in YANG: __l2-device-function__.
 
 Detailed Description: function support by IEEE 1905.1 L2 device
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-information -> device-information -> device-information-element -> device-function -> case_l2-device -> l2-device-function
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructL2DeviceFunction example:
      StructL2DeviceFunction *l2DeviceFunction = [[StructL2DeviceFunction alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"l2DeviceFunction init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!l2DeviceFunction) {
        NSLog(@"l2DeviceFunction is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"l2DeviceFunction init successful! toJson: %@", [l2DeviceFunction toJson]);
      NSLog(@"l2DeviceFunction validated result: %lu, 0 means it passes validation.", (unsigned long)[l2DeviceFunction validate]);
      
      // -----------------------------------------------
      // Setters of StructL2DeviceFunction
      if ((error = [l2DeviceFunction setWifiOnOff:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[l2DeviceFunction setWifiOnOff:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [l2DeviceFunction setReboot:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[l2DeviceFunction setReboot:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructL2DeviceFunction
      [l2DeviceFunction getWifiOnOff];
      [l2DeviceFunction getReboot];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"l2DeviceFunction toJson: %@", [l2DeviceFunction toJson]);
```
 
 */
@interface StructL2DeviceFunction : NSObject


/**
 Designated initializer for StructL2DeviceFunction either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructL2DeviceFunction if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for WifiOnOff.
 
 wifi on-off function
 
 @param aWifiOnOff Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWifiOnOff:(BOOL)aWifiOnOff;

/**
 Setter for Reboot.
 
 reboot function
 
 @param aReboot Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setReboot:(BOOL)aReboot;


/**
 Getter for WifiOnOff.
 
 wifi on-off function
 
 @return BOOL The value of property.
 */
- (BOOL)getWifiOnOff;

/**
 Getter for Reboot.
 
 reboot function
 
 @return BOOL The value of property.
 */
- (BOOL)getReboot;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseL2Device

/**
 StructCaseL2Device, as in YANG: __case_l2-device__.
 
 Detailed Description: <b>l2-device</b>(in YANG) is a case of choice: device-function
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-information -> device-information -> device-information-element -> device-function -> case_l2-device
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseL2Device example:
      StructCaseL2Device *caseL2Device = [[StructCaseL2Device alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseL2Device init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseL2Device) {
        NSLog(@"caseL2Device is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseL2Device init successful! toJson: %@", [caseL2Device toJson]);
      NSLog(@"caseL2Device validated result: %lu, 0 means it passes validation.", (unsigned long)[caseL2Device validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseL2Device
  
      // -----------------------------------------------
      // Getters of StructCaseL2Device
      [caseL2Device getL2DeviceFunction];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseL2Device toJson: %@", [caseL2Device toJson]);
```
 
 */
@interface StructCaseL2Device : NSObject

/**
 As in YANG: __l2-device-function__
 
 @see StructL2DeviceFunction
 */
@property (atomic, retain) StructL2DeviceFunction *l2DeviceFunction;

/**
 Designated initializer for StructCaseL2Device either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseL2Device if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceFunction

/**
 StructDeviceFunction, as in YANG: __device-function__.
 
 Detailed Description: function support by device
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-information -> device-information -> device-information-element -> device-function
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceFunction example:
      StructDeviceFunction *deviceFunction = [[StructDeviceFunction alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceFunction init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceFunction) {
        NSLog(@"deviceFunction is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceFunction init successful! toJson: %@", [deviceFunction toJson]);
      NSLog(@"deviceFunction validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceFunction validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceFunction
  
      // -----------------------------------------------
      // Getters of StructDeviceFunction
      [deviceFunction getCaseL2Device];
      [deviceFunction getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceFunction toJson: %@", [deviceFunction toJson]);
```
 
 */
@interface StructDeviceFunction : NSObject

/**
 As in YANG: __case_l2-device__
 
 @see StructCaseL2Device
 */
@property (atomic, retain) StructCaseL2Device *caseL2Device;

/**
 Designated initializer for StructDeviceFunction either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceFunction if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: device-function, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseDeviceFunction)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: device-function, was not in original defined YANG data model.
 
 @return EnumCurrentCaseDeviceFunction The value of property.
 */
- (EnumCurrentCaseDeviceFunction)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceInformationElement

/**
 StructDeviceInformationElement, as in YANG: __device-information-element__.
 
 Detailed Description: network device information
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-information -> device-information -> device-information-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceInformationElement example:
      StructDeviceInformationElement *deviceInformationElement = [[StructDeviceInformationElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceInformationElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceInformationElement) {
        NSLog(@"deviceInformationElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceInformationElement init successful! toJson: %@", [deviceInformationElement toJson]);
      NSLog(@"deviceInformationElement validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceInformationElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceInformationElement
      if ((error = [deviceInformationElement setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceInformationElement setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDeviceInformationElement
      [deviceInformationElement getDeviceFunction];
      [deviceInformationElement getId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceInformationElement toJson: %@", [deviceInformationElement toJson]);
```
 
 */
@interface StructDeviceInformationElement : NSObject

/**
 As in YANG: __device-function__
 
 @see StructDeviceFunction
 */
@property (atomic, retain) StructDeviceFunction *deviceFunction;

/**
 Designated initializer for StructDeviceInformationElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceInformationElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Id.
 
 ID
 
 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;


/**
 Getter for Id.
 
 ID
 
 @return NSString * The value of property.
 */
- (NSString *)getId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceInformation

/**
 StructDeviceInformation, as in YANG: __device-information__.
 
 Detailed Description: network device information
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-information

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceInformation example:
      StructDeviceInformation *deviceInformation = [[StructDeviceInformation alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceInformation init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceInformation) {
        NSLog(@"deviceInformation is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceInformation init successful! toJson: %@", [deviceInformation toJson]);
      NSLog(@"deviceInformation validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceInformation validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceInformation
  
      // -----------------------------------------------
      // Getters of StructDeviceInformation
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceInformation toJson: %@", [deviceInformation toJson]);
```
 
 */
@interface StructDeviceInformation : NSObject

/**
 Array which contains StructDeviceInformationElement, as in YANG: __device-information__
 
 Detailed Description: network device information
 
 @see StructDeviceInformationElement
 */
@property (atomic, retain) NSMutableArray <StructDeviceInformationElement *> *deviceInformation;

/**
 Designated initializer for StructDeviceInformation either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceInformation if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructZwave

/**
 StructZwave, as in YANG: __zwave__.
 
 Detailed Description: connecting type is zwave
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element -> connecting-type -> case_zwave -> zwave
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructZwave example:
      StructZwave *zwave = [[StructZwave alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"zwave init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!zwave) {
        NSLog(@"zwave is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"zwave init successful! toJson: %@", [zwave toJson]);
      NSLog(@"zwave validated result: %lu, 0 means it passes validation.", (unsigned long)[zwave validate]);
      
      // -----------------------------------------------
      // Setters of StructZwave
      if ((error = [zwave setRssi:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[zwave setRssi:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructZwave
      [zwave getRssi];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"zwave toJson: %@", [zwave toJson]);
```
 
 */
@interface StructZwave : NSObject


/**
 Designated initializer for StructZwave either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructZwave if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Rssi.
 
 zwave rssi
 
 @param aRssi Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRssi:(NSInteger)aRssi;


/**
 Getter for Rssi.
 
 zwave rssi
 
 @return NSInteger The value of property.
 */
- (NSInteger)getRssi;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseZwave

/**
 StructCaseZwave, as in YANG: __case_zwave__.
 
 Detailed Description: <b>zwave</b>(in YANG) is a case of choice: connecting-type
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element -> connecting-type -> case_zwave
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseZwave example:
      StructCaseZwave *caseZwave = [[StructCaseZwave alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseZwave init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseZwave) {
        NSLog(@"caseZwave is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseZwave init successful! toJson: %@", [caseZwave toJson]);
      NSLog(@"caseZwave validated result: %lu, 0 means it passes validation.", (unsigned long)[caseZwave validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseZwave
  
      // -----------------------------------------------
      // Getters of StructCaseZwave
      [caseZwave getZwave];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseZwave toJson: %@", [caseZwave toJson]);
```
 
 */
@interface StructCaseZwave : NSObject

/**
 As in YANG: __zwave__
 
 @see StructZwave
 */
@property (atomic, retain) StructZwave *zwave;

/**
 Designated initializer for StructCaseZwave either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseZwave if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWifiType

/**
 StructWifiType, as in YANG: __wifi-type__.
 
 Detailed Description: connecting type is wifi
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element -> connecting-type -> case_wifi -> wifi-type
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWifiType example:
      StructWifiType *wifiType = [[StructWifiType alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wifiType init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wifiType) {
        NSLog(@"wifiType is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wifiType init successful! toJson: %@", [wifiType toJson]);
      NSLog(@"wifiType validated result: %lu, 0 means it passes validation.", (unsigned long)[wifiType validate]);
      
      // -----------------------------------------------
      // Setters of StructWifiType
      if ((error = [wifiType setLinkRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiType setLinkRate:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWifiType
      [wifiType getLinkRate];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wifiType toJson: %@", [wifiType toJson]);
```
 
 */
@interface StructWifiType : NSObject


/**
 Designated initializer for StructWifiType either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWifiType if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for LinkRate.
 
 wifi link rate
 
 @param aLinkRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLinkRate:(NSInteger)aLinkRate;


/**
 Getter for LinkRate.
 
 wifi link rate
 
 @return NSInteger The value of property.
 */
- (NSInteger)getLinkRate;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseWifi

/**
 StructCaseWifi, as in YANG: __case_wifi__.
 
 Detailed Description: <b>wifi</b>(in YANG) is a case of choice: connecting-type
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element -> connecting-type -> case_wifi
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseWifi example:
      StructCaseWifi *caseWifi = [[StructCaseWifi alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseWifi init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseWifi) {
        NSLog(@"caseWifi is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseWifi init successful! toJson: %@", [caseWifi toJson]);
      NSLog(@"caseWifi validated result: %lu, 0 means it passes validation.", (unsigned long)[caseWifi validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseWifi
  
      // -----------------------------------------------
      // Getters of StructCaseWifi
      [caseWifi getWifiType];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseWifi toJson: %@", [caseWifi toJson]);
```
 
 */
@interface StructCaseWifi : NSObject

/**
 As in YANG: __wifi-type__
 
 @see StructWifiType
 */
@property (atomic, retain) StructWifiType *wifiType;

/**
 Designated initializer for StructCaseWifi either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseWifi if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructConnectingType

/**
 StructConnectingType, as in YANG: __connecting-type__.
 
 Detailed Description: network device connection type
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element -> connecting-type
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructConnectingType example:
      StructConnectingType *connectingType = [[StructConnectingType alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"connectingType init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!connectingType) {
        NSLog(@"connectingType is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"connectingType init successful! toJson: %@", [connectingType toJson]);
      NSLog(@"connectingType validated result: %lu, 0 means it passes validation.", (unsigned long)[connectingType validate]);
      
      // -----------------------------------------------
      // Setters of StructConnectingType
  
      // -----------------------------------------------
      // Getters of StructConnectingType
      [connectingType getCaseZwave];
      [connectingType getCaseWifi];
      [connectingType getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"connectingType toJson: %@", [connectingType toJson]);
```
 
 */
@interface StructConnectingType : NSObject

/**
 As in YANG: __case_zwave__
 
 @see StructCaseZwave
 */
@property (atomic, retain) StructCaseZwave *caseZwave;
/**
 As in YANG: __case_wifi__
 
 @see StructCaseWifi
 */
@property (atomic, retain) StructCaseWifi *caseWifi;

/**
 Designated initializer for StructConnectingType either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructConnectingType if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: connecting-type, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseConnectingType)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: connecting-type, was not in original defined YANG data model.
 
 @return EnumCurrentCaseConnectingType The value of property.
 */
- (EnumCurrentCaseConnectingType)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceStatusElement

/**
 StructDeviceStatusElement, as in YANG: __device-status-element__.
 
 Detailed Description: Device status.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status -> device-status -> device-status-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceStatusElement example:
      StructDeviceStatusElement *deviceStatusElement = [[StructDeviceStatusElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceStatusElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceStatusElement) {
        NSLog(@"deviceStatusElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceStatusElement init successful! toJson: %@", [deviceStatusElement toJson]);
      NSLog(@"deviceStatusElement validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceStatusElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceStatusElement
      if ((error = [deviceStatusElement setId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceStatusElement setId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDeviceStatusElement
      [deviceStatusElement getConnectingType];
      [deviceStatusElement getId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceStatusElement toJson: %@", [deviceStatusElement toJson]);
```
 
 */
@interface StructDeviceStatusElement : NSObject

/**
 As in YANG: __connecting-type__
 
 @see StructConnectingType
 */
@property (atomic, retain) StructConnectingType *connectingType;

/**
 Designated initializer for StructDeviceStatusElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceStatusElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Id.
 
 ID
 
 @param aId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setId:(NSString *)aId;


/**
 Getter for Id.
 
 ID
 
 @return NSString * The value of property.
 */
- (NSString *)getId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceStatus

/**
 StructDeviceStatus, as in YANG: __device-status__.
 
 Detailed Description: network device status
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> device-status

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceStatus example:
      StructDeviceStatus *deviceStatus = [[StructDeviceStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceStatus) {
        NSLog(@"deviceStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceStatus init successful! toJson: %@", [deviceStatus toJson]);
      NSLog(@"deviceStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceStatus
  
      // -----------------------------------------------
      // Getters of StructDeviceStatus
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceStatus toJson: %@", [deviceStatus toJson]);
```
 
 */
@interface StructDeviceStatus : NSObject

/**
 Array which contains StructDeviceStatusElement, as in YANG: __device-status__
 
 Detailed Description: Device status.
 
 @see StructDeviceStatusElement
 */
@property (atomic, retain) NSMutableArray <StructDeviceStatusElement *> *deviceStatus;

/**
 Designated initializer for StructDeviceStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetDeviceName

/**
 StructSetDeviceName, as in YANG: __set-device-name__.
 
 Detailed Description: Set device name.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-network-device -> set-device-name

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetDeviceName example:
      StructSetDeviceName *setDeviceName = [[StructSetDeviceName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setDeviceName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setDeviceName) {
        NSLog(@"setDeviceName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setDeviceName init successful! toJson: %@", [setDeviceName toJson]);
      NSLog(@"setDeviceName validated result: %lu, 0 means it passes validation.", (unsigned long)[setDeviceName validate]);
      
      // -----------------------------------------------
      // Setters of StructSetDeviceName
  
      // -----------------------------------------------
      // Getters of StructSetDeviceName
      [setDeviceName getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setDeviceName toJson: %@", [setDeviceName toJson]);
```
 
 */
@interface StructSetDeviceName : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSetHostName
 */
@property (atomic, retain) StructInputSetHostName *input;

/**
 Designated initializer for StructSetDeviceName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetDeviceName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAccessEasy123

/**
 StructAccessEasy123, as in YANG: __access-easy123__.
 
 Detailed Description: Make a record for accessing easy123.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> access-easy123

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAccessEasy123 example:
      StructAccessEasy123 *accessEasy123 = [[StructAccessEasy123 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"accessEasy123 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!accessEasy123) {
        NSLog(@"accessEasy123 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"accessEasy123 init successful! toJson: %@", [accessEasy123 toJson]);
      NSLog(@"accessEasy123 validated result: %lu, 0 means it passes validation.", (unsigned long)[accessEasy123 validate]);
      
      // -----------------------------------------------
      // Setters of StructAccessEasy123
  
      // -----------------------------------------------
      // Getters of StructAccessEasy123
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"accessEasy123 toJson: %@", [accessEasy123 toJson]);
```
 
 */
@interface StructAccessEasy123 : NSObject


/**
 Designated initializer for StructAccessEasy123 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAccessEasy123 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseKeyPassphrase

/**
 StructCaseKeyPassphrase, as in YANG: __case_key-passphrase__.
 
 Detailed Description: <b>key-passphrase</b>(in YANG) is a case of choice: psk
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> set-wifi -> input -> psk -> case_key-passphrase
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration -> output -> psk -> case_key-passphrase
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseKeyPassphrase example:
      StructCaseKeyPassphrase *caseKeyPassphrase = [[StructCaseKeyPassphrase alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseKeyPassphrase init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseKeyPassphrase) {
        NSLog(@"caseKeyPassphrase is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseKeyPassphrase init successful! toJson: %@", [caseKeyPassphrase toJson]);
      NSLog(@"caseKeyPassphrase validated result: %lu, 0 means it passes validation.", (unsigned long)[caseKeyPassphrase validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseKeyPassphrase
      if ((error = [caseKeyPassphrase setKeyPassphrase:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseKeyPassphrase setKeyPassphrase:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseKeyPassphrase
      [caseKeyPassphrase getKeyPassphrase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseKeyPassphrase toJson: %@", [caseKeyPassphrase toJson]);
```
 
 */
@interface StructCaseKeyPassphrase : NSObject


/**
 Designated initializer for StructCaseKeyPassphrase either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseKeyPassphrase if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for KeyPassphrase.
 
 A passphrase from which the PreSharedKey is to be generated.
 
 Length:      8..63

 Pattern:     ^([a-zA-Z0-9 `~!@#$%\^&*()_\-+={}\|\\;:'<,>\./?"\[\]]*)$

 @param aKeyPassphrase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setKeyPassphrase:(NSString *)aKeyPassphrase;


/**
 Getter for KeyPassphrase.
 
 A passphrase from which the PreSharedKey is to be generated.
 
 @return NSString * The value of property.
 */
- (NSString *)getKeyPassphrase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCasePresharedkey

/**
 StructCasePresharedkey, as in YANG: __case_presharedkey__.
 
 Detailed Description: <b>presharedkey</b>(in YANG) is a case of choice: psk
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> set-wifi -> input -> psk -> case_presharedkey
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration -> output -> psk -> case_presharedkey
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCasePresharedkey example:
      StructCasePresharedkey *casePresharedkey = [[StructCasePresharedkey alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"casePresharedkey init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!casePresharedkey) {
        NSLog(@"casePresharedkey is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"casePresharedkey init successful! toJson: %@", [casePresharedkey toJson]);
      NSLog(@"casePresharedkey validated result: %lu, 0 means it passes validation.", (unsigned long)[casePresharedkey validate]);
      
      // -----------------------------------------------
      // Setters of StructCasePresharedkey
      if ((error = [casePresharedkey setPresharedkey:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[casePresharedkey setPresharedkey:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCasePresharedkey
      [casePresharedkey getPresharedkey];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"casePresharedkey toJson: %@", [casePresharedkey toJson]);
```
 
 */
@interface StructCasePresharedkey : NSObject


/**
 Designated initializer for StructCasePresharedkey either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCasePresharedkey if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Presharedkey.
 
 A literal PreSharedKey (PSK) expressed as a hexadecimal string.
 
 Length:      64

 Pattern:     ^([0-9a-fA-F]{64})$

 @param aPresharedkey Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPresharedkey:(NSString *)aPresharedkey;


/**
 Getter for Presharedkey.
 
 A literal PreSharedKey (PSK) expressed as a hexadecimal string.
 
 @return NSString * The value of property.
 */
- (NSString *)getPresharedkey;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPsk

/**
 StructPsk, as in YANG: __psk__.
 
 Detailed Description: Pre-shared key.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> set-wifi -> input -> psk
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration -> output -> psk
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPsk example:
      StructPsk *psk = [[StructPsk alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"psk init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!psk) {
        NSLog(@"psk is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"psk init successful! toJson: %@", [psk toJson]);
      NSLog(@"psk validated result: %lu, 0 means it passes validation.", (unsigned long)[psk validate]);
      
      // -----------------------------------------------
      // Setters of StructPsk
  
      // -----------------------------------------------
      // Getters of StructPsk
      [psk getCaseKeyPassphrase];
      [psk getCasePresharedkey];
      [psk getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"psk toJson: %@", [psk toJson]);
```
 
 */
@interface StructPsk : NSObject

/**
 As in YANG: __case_key-passphrase__
 
 @see StructCaseKeyPassphrase
 */
@property (atomic, retain) StructCaseKeyPassphrase *caseKeyPassphrase;
/**
 As in YANG: __case_presharedkey__
 
 @see StructCasePresharedkey
 */
@property (atomic, retain) StructCasePresharedkey *casePresharedkey;

/**
 Designated initializer for StructPsk either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPsk if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: psk, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCasePsk)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: psk, was not in original defined YANG data model.
 
 @return EnumCurrentCasePsk The value of property.
 */
- (EnumCurrentCasePsk)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSetWifi

/**
 StructInputSetWifi, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> set-wifi -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSetWifi example:
      StructInputSetWifi *input = [[StructInputSetWifi alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSetWifi
      if ((error = [input setSsid5g:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setSsid5g:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[input setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setSsid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setSsid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSetWifi
      [input getPsk];
      [input getSsid5g];
      [input getEnabled];
      [input getNetwork];
      [input getSsid];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSetWifi : NSObject

/**
 As in YANG: __psk__
 
 @see StructPsk
 */
@property (atomic, retain) StructPsk *psk;

/**
 Designated initializer for StructInputSetWifi either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSetWifi if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ssid5g.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 Length:      1..32

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aSsid5g Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSsid5g:(NSString *)aSsid5g;

/**
 Setter for Enabled.
 
 True for network is enabled. False for not.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Network.
 
 The setting is applied to main or guest network.
 
 @param aNetwork Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNetwork:(EnumNetworkType)aNetwork;

/**
 Setter for Ssid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 Length:      1..32

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aSsid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSsid:(NSString *)aSsid;


/**
 Getter for Ssid5g.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getSsid5g;

/**
 Getter for Enabled.
 
 True for network is enabled. False for not.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Network.
 
 The setting is applied to main or guest network.
 
 @return EnumNetworkType The value of property.
 */
- (EnumNetworkType)getNetwork;

/**
 Getter for Ssid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getSsid;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetWifi

/**
 StructSetWifi, as in YANG: __set-wifi__.
 
 Detailed Description: Set WiFi system wireless configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> set-wifi

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetWifi example:
      StructSetWifi *setWifi = [[StructSetWifi alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setWifi init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setWifi) {
        NSLog(@"setWifi is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setWifi init successful! toJson: %@", [setWifi toJson]);
      NSLog(@"setWifi validated result: %lu, 0 means it passes validation.", (unsigned long)[setWifi validate]);
      
      // -----------------------------------------------
      // Setters of StructSetWifi
  
      // -----------------------------------------------
      // Getters of StructSetWifi
      [setWifi getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setWifi toJson: %@", [setWifi toJson]);
```
 
 */
@interface StructSetWifi : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSetWifi
 */
@property (atomic, retain) StructInputSetWifi *input;

/**
 Designated initializer for StructSetWifi either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetWifi if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputIsDefaultPassword

/**
 StructOutputIsDefaultPassword, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-default-password -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputIsDefaultPassword example:
      StructOutputIsDefaultPassword *output = [[StructOutputIsDefaultPassword alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputIsDefaultPassword
      if ((error = [output setStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setStatus:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputIsDefaultPassword
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputIsDefaultPassword : NSObject


/**
 Designated initializer for StructOutputIsDefaultPassword either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputIsDefaultPassword if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 True means default password is changed. False is not.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(BOOL)aStatus;


/**
 Getter for Status.
 
 True means default password is changed. False is not.
 
 @return BOOL The value of property.
 */
- (BOOL)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIsDefaultPassword

/**
 StructIsDefaultPassword, as in YANG: __is-default-password__.
 
 Detailed Description: Check if the default password is changed.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-default-password

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIsDefaultPassword example:
      StructIsDefaultPassword *isDefaultPassword = [[StructIsDefaultPassword alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"isDefaultPassword init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!isDefaultPassword) {
        NSLog(@"isDefaultPassword is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"isDefaultPassword init successful! toJson: %@", [isDefaultPassword toJson]);
      NSLog(@"isDefaultPassword validated result: %lu, 0 means it passes validation.", (unsigned long)[isDefaultPassword validate]);
      
      // -----------------------------------------------
      // Setters of StructIsDefaultPassword
  
      // -----------------------------------------------
      // Getters of StructIsDefaultPassword
      [isDefaultPassword getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"isDefaultPassword toJson: %@", [isDefaultPassword toJson]);
```
 
 */
@interface StructIsDefaultPassword : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputIsDefaultPassword
 */
@property (atomic, retain) StructOutputIsDefaultPassword *output;

/**
 Designated initializer for StructIsDefaultPassword either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIsDefaultPassword if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputAccessInternetStatus

/**
 StructOutputAccessInternetStatus, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> access-internet-status -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputAccessInternetStatus example:
      StructOutputAccessInternetStatus *output = [[StructOutputAccessInternetStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputAccessInternetStatus
      if ((error = [output setStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setStatus:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputAccessInternetStatus
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputAccessInternetStatus : NSObject


/**
 Designated initializer for StructOutputAccessInternetStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputAccessInternetStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 True means it is able to access internet. False is not.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(BOOL)aStatus;


/**
 Getter for Status.
 
 True means it is able to access internet. False is not.
 
 @return BOOL The value of property.
 */
- (BOOL)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAccessInternetStatus

/**
 StructAccessInternetStatus, as in YANG: __access-internet-status__.
 
 Detailed Description: Detect the status for WAN connection.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> access-internet-status

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAccessInternetStatus example:
      StructAccessInternetStatus *accessInternetStatus = [[StructAccessInternetStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"accessInternetStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!accessInternetStatus) {
        NSLog(@"accessInternetStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"accessInternetStatus init successful! toJson: %@", [accessInternetStatus toJson]);
      NSLog(@"accessInternetStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[accessInternetStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructAccessInternetStatus
  
      // -----------------------------------------------
      // Getters of StructAccessInternetStatus
      [accessInternetStatus getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"accessInternetStatus toJson: %@", [accessInternetStatus toJson]);
```
 
 */
@interface StructAccessInternetStatus : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputAccessInternetStatus
 */
@property (atomic, retain) StructOutputAccessInternetStatus *output;

/**
 Designated initializer for StructAccessInternetStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAccessInternetStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputIsWanPortConnected

/**
 StructOutputIsWanPortConnected, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-wan-port-connected -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputIsWanPortConnected example:
      StructOutputIsWanPortConnected *output = [[StructOutputIsWanPortConnected alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputIsWanPortConnected
      if ((error = [output setStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setStatus:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputIsWanPortConnected
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputIsWanPortConnected : NSObject


/**
 Designated initializer for StructOutputIsWanPortConnected either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputIsWanPortConnected if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 True means wan port is connected. False is not.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(BOOL)aStatus;


/**
 Getter for Status.
 
 True means wan port is connected. False is not.
 
 @return BOOL The value of property.
 */
- (BOOL)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIsWanPortConnected

/**
 StructIsWanPortConnected, as in YANG: __is-wan-port-connected__.
 
 Detailed Description: Check if the wan port is connected.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-wan-port-connected

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIsWanPortConnected example:
      StructIsWanPortConnected *isWanPortConnected = [[StructIsWanPortConnected alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"isWanPortConnected init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!isWanPortConnected) {
        NSLog(@"isWanPortConnected is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"isWanPortConnected init successful! toJson: %@", [isWanPortConnected toJson]);
      NSLog(@"isWanPortConnected validated result: %lu, 0 means it passes validation.", (unsigned long)[isWanPortConnected validate]);
      
      // -----------------------------------------------
      // Setters of StructIsWanPortConnected
  
      // -----------------------------------------------
      // Getters of StructIsWanPortConnected
      [isWanPortConnected getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"isWanPortConnected toJson: %@", [isWanPortConnected toJson]);
```
 
 */
@interface StructIsWanPortConnected : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputIsWanPortConnected
 */
@property (atomic, retain) StructOutputIsWanPortConnected *output;

/**
 Designated initializer for StructIsWanPortConnected either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIsWanPortConnected if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputGetWifiConfiguration

/**
 StructInputGetWifiConfiguration, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputGetWifiConfiguration example:
      StructInputGetWifiConfiguration *input = [[StructInputGetWifiConfiguration alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputGetWifiConfiguration
  
      // -----------------------------------------------
      // Getters of StructInputGetWifiConfiguration
      [input getNetwork];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputGetWifiConfiguration : NSObject


/**
 Designated initializer for StructInputGetWifiConfiguration either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputGetWifiConfiguration if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Network.
 
 Get the configuration from main or guest network.
 
 @param aNetwork Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNetwork:(EnumNetworkType)aNetwork;


/**
 Getter for Network.
 
 Get the configuration from main or guest network.
 
 @return EnumNetworkType The value of property.
 */
- (EnumNetworkType)getNetwork;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetWifiConfiguration

/**
 StructOutputGetWifiConfiguration, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetWifiConfiguration example:
      StructOutputGetWifiConfiguration *output = [[StructOutputGetWifiConfiguration alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetWifiConfiguration
      if ((error = [output setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setSsid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setSsid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setSsid5g:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setSsid5g:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputGetWifiConfiguration
      [output getPsk];
      [output getEnabled];
      [output getSsid];
      [output getSsid5g];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetWifiConfiguration : NSObject

/**
 As in YANG: __psk__
 
 @see StructPsk
 */
@property (atomic, retain) StructPsk *psk;

/**
 Designated initializer for StructOutputGetWifiConfiguration either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetWifiConfiguration if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 True for network is enabled. False for not.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Ssid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 Length:      1..32

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aSsid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSsid:(NSString *)aSsid;

/**
 Setter for Ssid5g.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 Length:      1..32

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aSsid5g Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSsid5g:(NSString *)aSsid5g;


/**
 Getter for Enabled.
 
 True for network is enabled. False for not.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Ssid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getSsid;

/**
 Getter for Ssid5g.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless
LAN that functions as an ID for joining a particular radio network
(BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getSsid5g;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetWifiConfiguration

/**
 StructGetWifiConfiguration, as in YANG: __get-wifi-configuration__.
 
 Detailed Description: Get WiFi system wireless configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> get-wifi-configuration

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetWifiConfiguration example:
      StructGetWifiConfiguration *getWifiConfiguration = [[StructGetWifiConfiguration alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getWifiConfiguration init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getWifiConfiguration) {
        NSLog(@"getWifiConfiguration is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getWifiConfiguration init successful! toJson: %@", [getWifiConfiguration toJson]);
      NSLog(@"getWifiConfiguration validated result: %lu, 0 means it passes validation.", (unsigned long)[getWifiConfiguration validate]);
      
      // -----------------------------------------------
      // Setters of StructGetWifiConfiguration
  
      // -----------------------------------------------
      // Getters of StructGetWifiConfiguration
      [getWifiConfiguration getInput];
      [getWifiConfiguration getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getWifiConfiguration toJson: %@", [getWifiConfiguration toJson]);
```
 
 */
@interface StructGetWifiConfiguration : NSObject

/**
 As in YANG: __input__
 
 @see StructInputGetWifiConfiguration
 */
@property (atomic, retain) StructInputGetWifiConfiguration *input;
/**
 As in YANG: __output__
 
 @see StructOutputGetWifiConfiguration
 */
@property (atomic, retain) StructOutputGetWifiConfiguration *output;

/**
 Designated initializer for StructGetWifiConfiguration either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetWifiConfiguration if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputIsWifiButtonOn

/**
 StructOutputIsWifiButtonOn, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-wifi-button-on -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputIsWifiButtonOn example:
      StructOutputIsWifiButtonOn *output = [[StructOutputIsWifiButtonOn alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputIsWifiButtonOn
      if ((error = [output setStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setStatus:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputIsWifiButtonOn
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputIsWifiButtonOn : NSObject


/**
 Designated initializer for StructOutputIsWifiButtonOn either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputIsWifiButtonOn if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 True means button is on. False is off.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(BOOL)aStatus;


/**
 Getter for Status.
 
 True means button is on. False is off.
 
 @return BOOL The value of property.
 */
- (BOOL)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIsWifiButtonOn

/**
 StructIsWifiButtonOn, as in YANG: __is-wifi-button-on__.
 
 Detailed Description: Check if the wifi hardware button is on.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> is-wifi-button-on

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIsWifiButtonOn example:
      StructIsWifiButtonOn *isWifiButtonOn = [[StructIsWifiButtonOn alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"isWifiButtonOn init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!isWifiButtonOn) {
        NSLog(@"isWifiButtonOn is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"isWifiButtonOn init successful! toJson: %@", [isWifiButtonOn toJson]);
      NSLog(@"isWifiButtonOn validated result: %lu, 0 means it passes validation.", (unsigned long)[isWifiButtonOn validate]);
      
      // -----------------------------------------------
      // Setters of StructIsWifiButtonOn
  
      // -----------------------------------------------
      // Getters of StructIsWifiButtonOn
      [isWifiButtonOn getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"isWifiButtonOn toJson: %@", [isWifiButtonOn toJson]);
```
 
 */
@interface StructIsWifiButtonOn : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputIsWifiButtonOn
 */
@property (atomic, retain) StructOutputIsWifiButtonOn *output;

/**
 Designated initializer for StructIsWifiButtonOn either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIsWifiButtonOn if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputDetectWanProto

/**
 StructOutputDetectWanProto, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> detect-wan-proto -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputDetectWanProto example:
      StructOutputDetectWanProto *output = [[StructOutputDetectWanProto alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputDetectWanProto
  
      // -----------------------------------------------
      // Getters of StructOutputDetectWanProto
      [output getProto];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputDetectWanProto : NSObject


/**
 Designated initializer for StructOutputDetectWanProto either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputDetectWanProto if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Proto.
 
 The protocol.
 
 @param aProto Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProto:(EnumProto)aProto;


/**
 Getter for Proto.
 
 The protocol.
 
 @return EnumProto The value of property.
 */
- (EnumProto)getProto;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDetectWanProto

/**
 StructDetectWanProto, as in YANG: __detect-wan-proto__.
 
 Detailed Description: Detect currnet available wan protocol .
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> detect-wan-proto

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDetectWanProto example:
      StructDetectWanProto *detectWanProto = [[StructDetectWanProto alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"detectWanProto init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!detectWanProto) {
        NSLog(@"detectWanProto is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"detectWanProto init successful! toJson: %@", [detectWanProto toJson]);
      NSLog(@"detectWanProto validated result: %lu, 0 means it passes validation.", (unsigned long)[detectWanProto validate]);
      
      // -----------------------------------------------
      // Setters of StructDetectWanProto
  
      // -----------------------------------------------
      // Getters of StructDetectWanProto
      [detectWanProto getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"detectWanProto toJson: %@", [detectWanProto toJson]);
```
 
 */
@interface StructDetectWanProto : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputDetectWanProto
 */
@property (atomic, retain) StructOutputDetectWanProto *output;

/**
 Designated initializer for StructDetectWanProto either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDetectWanProto if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputEverEasy123

/**
 StructOutputEverEasy123, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> ever-easy123 -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputEverEasy123 example:
      StructOutputEverEasy123 *output = [[StructOutputEverEasy123 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputEverEasy123
      if ((error = [output setStatus:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[output setStatus:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputEverEasy123
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputEverEasy123 : NSObject


/**
 Designated initializer for StructOutputEverEasy123 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputEverEasy123 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 True means ever access easy123. False is never.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(BOOL)aStatus;


/**
 Getter for Status.
 
 True means ever access easy123. False is never.
 
 @return BOOL The value of property.
 */
- (BOOL)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructEverEasy123

/**
 StructEverEasy123, as in YANG: __ever-easy123__.
 
 Detailed Description: Check if user ever access easy123.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-easy123 -> ever-easy123

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructEverEasy123 example:
      StructEverEasy123 *everEasy123 = [[StructEverEasy123 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"everEasy123 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!everEasy123) {
        NSLog(@"everEasy123 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"everEasy123 init successful! toJson: %@", [everEasy123 toJson]);
      NSLog(@"everEasy123 validated result: %lu, 0 means it passes validation.", (unsigned long)[everEasy123 validate]);
      
      // -----------------------------------------------
      // Setters of StructEverEasy123
  
      // -----------------------------------------------
      // Getters of StructEverEasy123
      [everEasy123 getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"everEasy123 toJson: %@", [everEasy123 toJson]);
```
 
 */
@interface StructEverEasy123 : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputEverEasy123
 */
@property (atomic, retain) StructOutputEverEasy123 *output;

/**
 Designated initializer for StructEverEasy123 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructEverEasy123 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputServerControl

/**
 StructInputServerControl, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-server-control -> server-control -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputServerControl example:
      StructInputServerControl *input = [[StructInputServerControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputServerControl
  
      // -----------------------------------------------
      // Getters of StructInputServerControl
      [input getAction];
      [input getService];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputServerControl : NSObject


/**
 Designated initializer for StructInputServerControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputServerControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Action.
 
 Action to the server service.
 
 @param aAction Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAction:(EnumActionMode)aAction;

/**
 Setter for Service.
 
 The server service name.
 
 @param aService Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setService:(EnumServiceType)aService;


/**
 Getter for Action.
 
 Action to the server service.
 
 @return EnumActionMode The value of property.
 */
- (EnumActionMode)getAction;

/**
 Getter for Service.
 
 The server service name.
 
 @return EnumServiceType The value of property.
 */
- (EnumServiceType)getService;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructServerControl

/**
 StructServerControl, as in YANG: __server-control__.
 
 Detailed Description: Server control
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-server-control -> server-control

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructServerControl example:
      StructServerControl *serverControl = [[StructServerControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"serverControl init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!serverControl) {
        NSLog(@"serverControl is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"serverControl init successful! toJson: %@", [serverControl toJson]);
      NSLog(@"serverControl validated result: %lu, 0 means it passes validation.", (unsigned long)[serverControl validate]);
      
      // -----------------------------------------------
      // Setters of StructServerControl
  
      // -----------------------------------------------
      // Getters of StructServerControl
      [serverControl getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"serverControl toJson: %@", [serverControl toJson]);
```
 
 */
@interface StructServerControl : NSObject

/**
 As in YANG: __input__
 
 @see StructInputServerControl
 */
@property (atomic, retain) StructInputServerControl *input;

/**
 Designated initializer for StructServerControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructServerControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputGetHistory

/**
 StructInputGetHistory, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> get-history -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputGetHistory example:
      StructInputGetHistory *input = [[StructInputGetHistory alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputGetHistory
      if ((error = [input setDeviceMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setDeviceMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setNumber:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[input setNumber:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputGetHistory
      [input getDeviceMac];
      [input getNumber];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputGetHistory : NSObject


/**
 Designated initializer for StructInputGetHistory either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputGetHistory if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DeviceMac.
 
 The device MAC address which executed the test. If there is
no value, get all test
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aDeviceMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeviceMac:(NSString *)aDeviceMac;

/**
 Setter for Number.
 
 The latest number of test result based on test-id.
 
 @param aNumber Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNumber:(NSInteger)aNumber;


/**
 Getter for DeviceMac.
 
 The device MAC address which executed the test. If there is
no value, get all test
 
 @return NSString * The value of property.
 */
- (NSString *)getDeviceMac;

/**
 Getter for Number.
 
 The latest number of test result based on test-id.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getNumber;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructHistoryElement

/**
 StructHistoryElement, as in YANG: __history-element__.
 
 Detailed Description: The history list of test result.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> get-history -> output -> history -> history-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructHistoryElement example:
      StructHistoryElement *historyElement = [[StructHistoryElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"historyElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!historyElement) {
        NSLog(@"historyElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"historyElement init successful! toJson: %@", [historyElement toJson]);
      NSLog(@"historyElement validated result: %lu, 0 means it passes validation.", (unsigned long)[historyElement validate]);
      
      // -----------------------------------------------
      // Setters of StructHistoryElement
      if ((error = [historyElement setTimestamp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[historyElement setTimestamp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [historyElement setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[historyElement setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [historyElement setTestId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[historyElement setTestId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructHistoryElement
      [historyElement getTarget];
      [historyElement getTimestamp];
      [historyElement getUpload];
      [historyElement getMac];
      [historyElement getDownload];
      [historyElement getTestId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"historyElement toJson: %@", [historyElement toJson]);
```
 
 */
@interface StructHistoryElement : NSObject


/**
 Designated initializer for StructHistoryElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructHistoryElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Target.
 
 The target of the test.
 
 @param aTarget Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTarget:(EnumTarget)aTarget;

/**
 Setter for Timestamp.
 
 The time stamp when the test is done.
 
 @param aTimestamp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimestamp:(NSString *)aTimestamp;

/**
 Setter for Upload.
 
 Upload rate(Mbps).
 
 Range:       0..max

 @param aUpload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUpload:(NSInteger)aUpload;

/**
 Setter for Mac.
 
 The device MAC address which execute the test.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for Download.
 
 Download rate(Mbps).
 
 Range:       0..max

 @param aDownload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDownload:(NSInteger)aDownload;

/**
 Setter for TestId.
 
 The unique ID for whole combination of a test.
 
 @param aTestId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTestId:(NSString *)aTestId;


/**
 Getter for Target.
 
 The target of the test.
 
 @return EnumTarget The value of property.
 */
- (EnumTarget)getTarget;

/**
 Getter for Timestamp.
 
 The time stamp when the test is done.
 
 @return NSString * The value of property.
 */
- (NSString *)getTimestamp;

/**
 Getter for Upload.
 
 Upload rate(Mbps).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getUpload;

/**
 Getter for Mac.
 
 The device MAC address which execute the test.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for Download.
 
 Download rate(Mbps).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDownload;

/**
 Getter for TestId.
 
 The unique ID for whole combination of a test.
 
 @return NSString * The value of property.
 */
- (NSString *)getTestId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetHistory

/**
 StructOutputGetHistory, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> get-history -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetHistory example:
      StructOutputGetHistory *output = [[StructOutputGetHistory alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetHistory
  
      // -----------------------------------------------
      // Getters of StructOutputGetHistory
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetHistory : NSObject

/**
 Array which contains StructHistoryElement, as in YANG: __history__
 
 Detailed Description: The history list of test result.
 
 @see StructHistoryElement
 */
@property (atomic, retain) NSMutableArray <StructHistoryElement *> *history;

/**
 Designated initializer for StructOutputGetHistory either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetHistory if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 The current status of the test.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatusOutputGetHistory)aStatus;


/**
 Getter for Status.
 
 The current status of the test.
 
 @return EnumStatusOutputGetHistory The value of property.
 */
- (EnumStatusOutputGetHistory)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetHistory

/**
 StructGetHistory, as in YANG: __get-history__.
 
 Detailed Description: Retrive the history test result.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> get-history

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetHistory example:
      StructGetHistory *getHistory = [[StructGetHistory alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getHistory init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getHistory) {
        NSLog(@"getHistory is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getHistory init successful! toJson: %@", [getHistory toJson]);
      NSLog(@"getHistory validated result: %lu, 0 means it passes validation.", (unsigned long)[getHistory validate]);
      
      // -----------------------------------------------
      // Setters of StructGetHistory
  
      // -----------------------------------------------
      // Getters of StructGetHistory
      [getHistory getInput];
      [getHistory getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getHistory toJson: %@", [getHistory toJson]);
```
 
 */
@interface StructGetHistory : NSObject

/**
 As in YANG: __input__
 
 @see StructInputGetHistory
 */
@property (atomic, retain) StructInputGetHistory *input;
/**
 As in YANG: __output__
 
 @see StructOutputGetHistory
 */
@property (atomic, retain) StructOutputGetHistory *output;

/**
 Designated initializer for StructGetHistory either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetHistory if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSpeedTest

/**
 StructInputSpeedTest, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> speed-test -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSpeedTest example:
      StructInputSpeedTest *input = [[StructInputSpeedTest alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSpeedTest
      if ((error = [input setDeviceMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setDeviceMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setTestId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setTestId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSpeedTest
      [input getDeviceMac];
      [input getTestId];
      [input getTarget];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSpeedTest : NSObject


/**
 Designated initializer for StructInputSpeedTest either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSpeedTest if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DeviceMac.
 
 The device MAC address which will executing the test.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aDeviceMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeviceMac:(NSString *)aDeviceMac;

/**
 Setter for TestId.
 
 The unique ID for whole combination of a test.
 
 @param aTestId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTestId:(NSString *)aTestId;

/**
 Setter for Target.
 
 The target of the test.
 
 @param aTarget Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTarget:(EnumTarget)aTarget;


/**
 Getter for DeviceMac.
 
 The device MAC address which will executing the test.
 
 @return NSString * The value of property.
 */
- (NSString *)getDeviceMac;

/**
 Getter for TestId.
 
 The unique ID for whole combination of a test.
 
 @return NSString * The value of property.
 */
- (NSString *)getTestId;

/**
 Getter for Target.
 
 The target of the test.
 
 @return EnumTarget The value of property.
 */
- (EnumTarget)getTarget;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputSpeedTest

/**
 StructOutputSpeedTest, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> speed-test -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputSpeedTest example:
      StructOutputSpeedTest *output = [[StructOutputSpeedTest alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputSpeedTest
  
      // -----------------------------------------------
      // Getters of StructOutputSpeedTest
      [output getResponse];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputSpeedTest : NSObject


/**
 Designated initializer for StructOutputSpeedTest either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputSpeedTest if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Response.
 
 The response of the test request.
 
 @param aResponse Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setResponse:(EnumResponse)aResponse;


/**
 Getter for Response.
 
 The response of the test request.
 
 @return EnumResponse The value of property.
 */
- (EnumResponse)getResponse;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSpeedTest

/**
 StructSpeedTest, as in YANG: __speed-test__.
 
 Detailed Description: Executing speed test on a device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> speed-test

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSpeedTest example:
      StructSpeedTest *speedTest = [[StructSpeedTest alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"speedTest init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!speedTest) {
        NSLog(@"speedTest is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"speedTest init successful! toJson: %@", [speedTest toJson]);
      NSLog(@"speedTest validated result: %lu, 0 means it passes validation.", (unsigned long)[speedTest validate]);
      
      // -----------------------------------------------
      // Setters of StructSpeedTest
  
      // -----------------------------------------------
      // Getters of StructSpeedTest
      [speedTest getInput];
      [speedTest getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"speedTest toJson: %@", [speedTest toJson]);
```
 
 */
@interface StructSpeedTest : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSpeedTest
 */
@property (atomic, retain) StructInputSpeedTest *input;
/**
 As in YANG: __output__
 
 @see StructOutputSpeedTest
 */
@property (atomic, retain) StructOutputSpeedTest *output;

/**
 Designated initializer for StructSpeedTest either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSpeedTest if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputTestResult

/**
 StructOutputTestResult, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> test-result -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputTestResult example:
      StructOutputTestResult *output = [[StructOutputTestResult alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputTestResult
      if ((error = [output setTestId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setTestId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputTestResult
      [output getDownload];
      [output getStatus];
      [output getTestId];
      [output getUpload];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputTestResult : NSObject


/**
 Designated initializer for StructOutputTestResult either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputTestResult if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Download.
 
 Download rate(Mbps).
 
 Range:       0..max

 @param aDownload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDownload:(NSInteger)aDownload;

/**
 Setter for Status.
 
 The current status of the test.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatusOutputTestResult)aStatus;

/**
 Setter for TestId.
 
 The unique ID for whole combination of a test.
 
 @param aTestId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTestId:(NSString *)aTestId;

/**
 Setter for Upload.
 
 Upload rate(Mbps).
 
 Range:       0..max

 @param aUpload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUpload:(NSInteger)aUpload;


/**
 Getter for Download.
 
 Download rate(Mbps).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDownload;

/**
 Getter for Status.
 
 The current status of the test.
 
 @return EnumStatusOutputTestResult The value of property.
 */
- (EnumStatusOutputTestResult)getStatus;

/**
 Getter for TestId.
 
 The unique ID for whole combination of a test.
 
 @return NSString * The value of property.
 */
- (NSString *)getTestId;

/**
 Getter for Upload.
 
 Upload rate(Mbps).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getUpload;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTestResult

/**
 StructTestResult, as in YANG: __test-result__.
 
 Detailed Description: Retrive the current test result.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> test-result

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTestResult example:
      StructTestResult *testResult = [[StructTestResult alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"testResult init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!testResult) {
        NSLog(@"testResult is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"testResult init successful! toJson: %@", [testResult toJson]);
      NSLog(@"testResult validated result: %lu, 0 means it passes validation.", (unsigned long)[testResult validate]);
      
      // -----------------------------------------------
      // Setters of StructTestResult
  
      // -----------------------------------------------
      // Getters of StructTestResult
      [testResult getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"testResult toJson: %@", [testResult toJson]);
```
 
 */
@interface StructTestResult : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputTestResult
 */
@property (atomic, retain) StructOutputTestResult *output;

/**
 Designated initializer for StructTestResult either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTestResult if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputCleanHistory

/**
 StructInputCleanHistory, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> clean-history -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputCleanHistory example:
      StructInputCleanHistory *input = [[StructInputCleanHistory alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputCleanHistory
      if ((error = [input setTestId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setTestId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputCleanHistory
      [input getTestId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputCleanHistory : NSObject


/**
 Designated initializer for StructInputCleanHistory either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputCleanHistory if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for TestId.
 
 The unique ID for whole combination of a test.
 
 @param aTestId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTestId:(NSString *)aTestId;


/**
 Getter for TestId.
 
 The unique ID for whole combination of a test.
 
 @return NSString * The value of property.
 */
- (NSString *)getTestId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCleanHistory

/**
 StructCleanHistory, as in YANG: __clean-history__.
 
 Detailed Description: Clean the history test result.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-speed-test -> clean-history

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCleanHistory example:
      StructCleanHistory *cleanHistory = [[StructCleanHistory alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"cleanHistory init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!cleanHistory) {
        NSLog(@"cleanHistory is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"cleanHistory init successful! toJson: %@", [cleanHistory toJson]);
      NSLog(@"cleanHistory validated result: %lu, 0 means it passes validation.", (unsigned long)[cleanHistory validate]);
      
      // -----------------------------------------------
      // Setters of StructCleanHistory
  
      // -----------------------------------------------
      // Getters of StructCleanHistory
      [cleanHistory getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"cleanHistory toJson: %@", [cleanHistory toJson]);
```
 
 */
@interface StructCleanHistory : NSObject

/**
 As in YANG: __input__
 
 @see StructInputCleanHistory
 */
@property (atomic, retain) StructInputCleanHistory *input;

/**
 Designated initializer for StructCleanHistory either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCleanHistory if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLeaseTimeRemaining

/**
 StructLeaseTimeRemaining, as in YANG: __lease-time-remaining__.
 
 Detailed Description: The time at which the DHCP lease will expire or 0001-01-01T00:00:00Z
if not known. For an infinite lease, the parameter value MUST be
9999-12-31T23:59:59Z.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-client -> dhcp-server-client-element -> dhcp-server-client-ipv4-address -> dhcp-server-client-ipv4-address-element -> lease-time-remaining
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLeaseTimeRemaining example:
      StructLeaseTimeRemaining *leaseTimeRemaining = [[StructLeaseTimeRemaining alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"leaseTimeRemaining init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!leaseTimeRemaining) {
        NSLog(@"leaseTimeRemaining is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"leaseTimeRemaining init successful! toJson: %@", [leaseTimeRemaining toJson]);
      NSLog(@"leaseTimeRemaining validated result: %lu, 0 means it passes validation.", (unsigned long)[leaseTimeRemaining validate]);
      
      // -----------------------------------------------
      // Setters of StructLeaseTimeRemaining
      if ((error = [leaseTimeRemaining setUnionOfYangDateAndTime:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[leaseTimeRemaining setUnionOfYangDateAndTime:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [leaseTimeRemaining setUnionOfInt32:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[leaseTimeRemaining setUnionOfInt32:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructLeaseTimeRemaining
      [leaseTimeRemaining getUnionOfYangDateAndTime];
      [leaseTimeRemaining getUnionOfInt32];
      [leaseTimeRemaining getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"leaseTimeRemaining toJson: %@", [leaseTimeRemaining toJson]);
```
 
 */
@interface StructLeaseTimeRemaining : NSObject


/**
 Designated initializer for StructLeaseTimeRemaining either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLeaseTimeRemaining if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfYangDateAndTime.

 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aUnionOfYangDateAndTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfYangDateAndTime:(NSString *)aUnionOfYangDateAndTime;

/**
 Setter for UnionOfInt32.

 @param aUnionOfInt32 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInt32:(NSInteger)aUnionOfInt32;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: lease-time-remaining, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemLeaseTimeRemaining)aCurrentUnionItem;


/**
 Getter for UnionOfYangDateAndTime.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfYangDateAndTime;

/**
 Getter for UnionOfInt32.

 @return NSInteger The value of property.
 */
- (NSInteger)getUnionOfInt32;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: lease-time-remaining, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemLeaseTimeRemaining The value of property.
 */
- (EnumCurrentUnionItemLeaseTimeRemaining)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerClientIpv4AddressElement

/**
 StructDhcpServerClientIpv4AddressElement, as in YANG: __dhcp-server-client-ipv4-address-element__.
 
 Detailed Description: DHCP server client IPv4 address
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-client -> dhcp-server-client-element -> dhcp-server-client-ipv4-address -> dhcp-server-client-ipv4-address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerClientIpv4AddressElement example:
      StructDhcpServerClientIpv4AddressElement *dhcpServerClientIpv4AddressElement = [[StructDhcpServerClientIpv4AddressElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerClientIpv4AddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerClientIpv4AddressElement) {
        NSLog(@"dhcpServerClientIpv4AddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerClientIpv4AddressElement init successful! toJson: %@", [dhcpServerClientIpv4AddressElement toJson]);
      NSLog(@"dhcpServerClientIpv4AddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerClientIpv4AddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerClientIpv4AddressElement
      if ((error = [dhcpServerClientIpv4AddressElement setIpAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientIpv4AddressElement setIpAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerClientIpv4AddressElement
      [dhcpServerClientIpv4AddressElement getIpAddress];
      [dhcpServerClientIpv4AddressElement getLeaseTimeRemaining];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerClientIpv4AddressElement toJson: %@", [dhcpServerClientIpv4AddressElement toJson]);
```
 
 */
@interface StructDhcpServerClientIpv4AddressElement : NSObject

/**
 As in YANG: __lease-time-remaining__
 
 @see StructLeaseTimeRemaining
 */
@property (atomic, retain) StructLeaseTimeRemaining *leaseTimeRemaining;

/**
 Designated initializer for StructDhcpServerClientIpv4AddressElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerClientIpv4AddressElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpAddress.
 
 	[IPv4Address] IPv4 address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpAddress:(NSString *)aIpAddress;


/**
 Getter for IpAddress.
 
 	[IPv4Address] IPv4 address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerClientOptionElement

/**
 StructDhcpServerClientOptionElement, as in YANG: __dhcp-server-client-option-element__.
 
 Detailed Description: DHCP server client option
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-client -> dhcp-server-client-element -> dhcp-server-client-option -> dhcp-server-client-option-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerClientOptionElement example:
      StructDhcpServerClientOptionElement *dhcpServerClientOptionElement = [[StructDhcpServerClientOptionElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerClientOptionElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerClientOptionElement) {
        NSLog(@"dhcpServerClientOptionElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerClientOptionElement init successful! toJson: %@", [dhcpServerClientOptionElement toJson]);
      NSLog(@"dhcpServerClientOptionElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerClientOptionElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerClientOptionElement
      if ((error = [dhcpServerClientOptionElement setValue:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientOptionElement setValue:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerClientOptionElement setTag:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientOptionElement setTag:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerClientOptionElement setOption:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientOptionElement setOption:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerClientOptionElement
      [dhcpServerClientOptionElement getValue];
      [dhcpServerClientOptionElement getTag];
      [dhcpServerClientOptionElement getOption];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerClientOptionElement toJson: %@", [dhcpServerClientOptionElement toJson]);
```
 
 */
@interface StructDhcpServerClientOptionElement : NSObject


/**
 Designated initializer for StructDhcpServerClientOptionElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerClientOptionElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Value.
 
 A hexbinary encoded option value.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aValue Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setValue:(NSString *)aValue;

/**
 Setter for Tag.
 
 Option tag as defined in [RFC2132].[1:254]
 
 @param aTag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTag:(NSInteger)aTag;

/**
 Setter for Option.
 
 Option
 
 @param aOption Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOption:(NSString *)aOption;


/**
 Getter for Value.
 
 A hexbinary encoded option value.
 
 @return NSString * The value of property.
 */
- (NSString *)getValue;

/**
 Getter for Tag.
 
 Option tag as defined in [RFC2132].[1:254]
 
 @return NSInteger The value of property.
 */
- (NSInteger)getTag;

/**
 Getter for Option.
 
 Option
 
 @return NSString * The value of property.
 */
- (NSString *)getOption;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerClientElement

/**
 StructDhcpServerClientElement, as in YANG: __dhcp-server-client-element__.
 
 Detailed Description: DHCP server client
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-client -> dhcp-server-client-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerClientElement example:
      StructDhcpServerClientElement *dhcpServerClientElement = [[StructDhcpServerClientElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerClientElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerClientElement) {
        NSLog(@"dhcpServerClientElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerClientElement init successful! toJson: %@", [dhcpServerClientElement toJson]);
      NSLog(@"dhcpServerClientElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerClientElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerClientElement
      if ((error = [dhcpServerClientElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerClientElement setChaddr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientElement setChaddr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerClientElement setActive:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerClientElement setActive:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerClientElement
      [dhcpServerClientElement getAlias];
      [dhcpServerClientElement getChaddr];
      [dhcpServerClientElement getActive];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerClientElement toJson: %@", [dhcpServerClientElement toJson]);
```
 
 */
@interface StructDhcpServerClientElement : NSObject

/**
 Array which contains StructDhcpServerClientIpv4AddressElement, as in YANG: __dhcp-server-client-ipv4-address__
 
 Detailed Description: DHCP server client IPv4 address
 
 @see StructDhcpServerClientIpv4AddressElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerClientIpv4AddressElement *> *dhcpServerClientIpv4Address;
/**
 Array which contains StructDhcpServerClientOptionElement, as in YANG: __dhcp-server-client-option__
 
 Detailed Description: DHCP server client option
 
 @see StructDhcpServerClientOptionElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerClientOptionElement *> *dhcpServerClientOption;

/**
 Designated initializer for StructDhcpServerClientElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerClientElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.Client.{i}.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for Chaddr.
 
 	[MACAddress] MAC address of the DHCPv4 client.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aChaddr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChaddr:(NSString *)aChaddr;

/**
 Setter for Active.
 
 	Whether or not the DHCPv4 client is currently present on the LAN. The method of presence detection is a local matter to
the CPE.The ability to list inactive DHCPv4 clients is OPTIONAL. If the CPE includes inactive DHCPv4 clients in this table,
Active MUST be set to false for each inactive DHCPv4 client. The length of time an inactive DHCPv4 client remains listed
in this table is a local matter to the CPE.
 
 @param aActive Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setActive:(BOOL)aActive;


/**
 Getter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.Client.{i}.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for Chaddr.
 
 	[MACAddress] MAC address of the DHCPv4 client.
 
 @return NSString * The value of property.
 */
- (NSString *)getChaddr;

/**
 Getter for Active.
 
 	Whether or not the DHCPv4 client is currently present on the LAN. The method of presence detection is a local matter to
the CPE.The ability to list inactive DHCPv4 clients is OPTIONAL. If the CPE includes inactive DHCPv4 clients in this table,
Active MUST be set to false for each inactive DHCPv4 client. The length of time an inactive DHCPv4 client remains listed
in this table is a local matter to the CPE.
 
 @return BOOL The value of property.
 */
- (BOOL)getActive;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerOptionElement

/**
 StructDhcpServerOptionElement, as in YANG: __dhcp-server-option-element__.
 
 Detailed Description: DHCP server option
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-option -> dhcp-server-option-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerOptionElement example:
      StructDhcpServerOptionElement *dhcpServerOptionElement = [[StructDhcpServerOptionElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerOptionElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerOptionElement) {
        NSLog(@"dhcpServerOptionElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerOptionElement init successful! toJson: %@", [dhcpServerOptionElement toJson]);
      NSLog(@"dhcpServerOptionElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerOptionElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerOptionElement
      if ((error = [dhcpServerOptionElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerOptionElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerOptionElement setOption:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerOptionElement setOption:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerOptionElement setValue:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerOptionElement setValue:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerOptionElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerOptionElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerOptionElement setTag:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerOptionElement setTag:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerOptionElement
      [dhcpServerOptionElement getEnable];
      [dhcpServerOptionElement getOption];
      [dhcpServerOptionElement getValue];
      [dhcpServerOptionElement getAlias];
      [dhcpServerOptionElement getTag];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerOptionElement toJson: %@", [dhcpServerOptionElement toJson]);
```
 
 */
@interface StructDhcpServerOptionElement : NSObject


/**
 Designated initializer for StructDhcpServerOptionElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerOptionElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enable.
 
 	Enables or disables this Option table entry.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for Option.
 
 Option
 
 @param aOption Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOption:(NSString *)aOption;

/**
 Setter for Value.
 
 A hexbinary encoded option value.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aValue Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setValue:(NSString *)aValue;

/**
 Setter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.Option.{i}.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for Tag.
 
 Option tag as defined in [RFC2132].[1:254]
 
 @param aTag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTag:(NSInteger)aTag;


/**
 Getter for Enable.
 
 	Enables or disables this Option table entry.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for Option.
 
 Option
 
 @return NSString * The value of property.
 */
- (NSString *)getOption;

/**
 Getter for Value.
 
 A hexbinary encoded option value.
 
 @return NSString * The value of property.
 */
- (NSString *)getValue;

/**
 Getter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.Option.{i}.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for Tag.
 
 Option tag as defined in [RFC2132].[1:254]
 
 @return NSInteger The value of property.
 */
- (NSInteger)getTag;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerStaticAddressElement

/**
 StructDhcpServerStaticAddressElement, as in YANG: __dhcp-server-static-address-element__.
 
 Detailed Description: DHCP server static address
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element -> dhcp-server-static-address -> dhcp-server-static-address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerStaticAddressElement example:
      StructDhcpServerStaticAddressElement *dhcpServerStaticAddressElement = [[StructDhcpServerStaticAddressElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerStaticAddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerStaticAddressElement) {
        NSLog(@"dhcpServerStaticAddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerStaticAddressElement init successful! toJson: %@", [dhcpServerStaticAddressElement toJson]);
      NSLog(@"dhcpServerStaticAddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerStaticAddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerStaticAddressElement
      if ((error = [dhcpServerStaticAddressElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerStaticAddressElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerStaticAddressElement setYiaddr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerStaticAddressElement setYiaddr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerStaticAddressElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerStaticAddressElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerStaticAddressElement setChaddr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerStaticAddressElement setChaddr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerStaticAddressElement
      [dhcpServerStaticAddressElement getEnable];
      [dhcpServerStaticAddressElement getYiaddr];
      [dhcpServerStaticAddressElement getAlias];
      [dhcpServerStaticAddressElement getChaddr];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerStaticAddressElement toJson: %@", [dhcpServerStaticAddressElement toJson]);
```
 
 */
@interface StructDhcpServerStaticAddressElement : NSObject


/**
 Designated initializer for StructDhcpServerStaticAddressElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerStaticAddressElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enable.
 
 Enables or disables the StaticAddress table entry.
Disabling an entry does not return the IP address to the pool.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for Yiaddr.
 
 [IPv4Address] IPv4 address to be assigned by the DHCP server to the DHCP client with the specified hardware
address (MAC address).
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aYiaddr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setYiaddr:(NSString *)aYiaddr;

/**
 Setter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.StaticAddress.{i}.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for Chaddr.
 
 [MACAddress] Hardware address (MAC address) of the physical interface of the DHCP client.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aChaddr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChaddr:(NSString *)aChaddr;


/**
 Getter for Enable.
 
 Enables or disables the StaticAddress table entry.
Disabling an entry does not return the IP address to the pool.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for Yiaddr.
 
 [IPv4Address] IPv4 address to be assigned by the DHCP server to the DHCP client with the specified hardware
address (MAC address).
 
 @return NSString * The value of property.
 */
- (NSString *)getYiaddr;

/**
 Getter for Alias.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.StaticAddress.{i}.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for Chaddr.
 
 [MACAddress] Hardware address (MAC address) of the physical interface of the DHCP client.
 
 @return NSString * The value of property.
 */
- (NSString *)getChaddr;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServerPoolElement

/**
 StructDhcpServerPoolElement, as in YANG: __dhcp-server-pool-element__.
 
 Detailed Description: DHCP server pool
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top -> dhcp-server-pool -> dhcp-server-pool-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServerPoolElement example:
      StructDhcpServerPoolElement *dhcpServerPoolElement = [[StructDhcpServerPoolElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServerPoolElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServerPoolElement) {
        NSLog(@"dhcpServerPoolElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServerPoolElement init successful! toJson: %@", [dhcpServerPoolElement toJson]);
      NSLog(@"dhcpServerPoolElement validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServerPoolElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServerPoolElement
      if ((error = [dhcpServerPoolElement setLeaseTime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setLeaseTime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setDomainName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setDomainName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setChaddrMask:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setChaddrMask:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setClientIdExclude:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setClientIdExclude:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setDnsServers:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setDnsServers:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setVendorClassId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setVendorClassId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setMaxAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setMaxAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setIpRouters:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setIpRouters:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setMinAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setMinAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setChaddr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setChaddr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setVendorClassIdExclude:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setVendorClassIdExclude:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setUserClassIdExclude:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setUserClassIdExclude:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setClientId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setClientId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setChaddrExclude:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setChaddrExclude:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setSubnetMask:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setSubnetMask:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setUserClassId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setUserClassId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setAlias:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setAlias:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setReservedAddresses:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setReservedAddresses:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServerPoolElement setOrder:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServerPoolElement setOrder:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServerPoolElement
      [dhcpServerPoolElement getLeaseTime];
      [dhcpServerPoolElement getDomainName];
      [dhcpServerPoolElement getChaddrMask];
      [dhcpServerPoolElement getClientIdExclude];
      [dhcpServerPoolElement getDnsServers];
      [dhcpServerPoolElement getVendorClassId];
      [dhcpServerPoolElement getStatus];
      [dhcpServerPoolElement getEnable];
      [dhcpServerPoolElement getMaxAddress];
      [dhcpServerPoolElement getIpRouters];
      [dhcpServerPoolElement getVendorClassIdMode];
      [dhcpServerPoolElement getMinAddress];
      [dhcpServerPoolElement getChaddr];
      [dhcpServerPoolElement getVendorClassIdExclude];
      [dhcpServerPoolElement getInterface];
      [dhcpServerPoolElement getUserClassIdExclude];
      [dhcpServerPoolElement getClientId];
      [dhcpServerPoolElement getChaddrExclude];
      [dhcpServerPoolElement getSubnetMask];
      [dhcpServerPoolElement getUserClassId];
      [dhcpServerPoolElement getAlias];
      [dhcpServerPoolElement getReservedAddresses];
      [dhcpServerPoolElement getOrder];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServerPoolElement toJson: %@", [dhcpServerPoolElement toJson]);
```
 
 */
@interface StructDhcpServerPoolElement : NSObject

/**
 Array which contains StructDhcpServerClientElement, as in YANG: __dhcp-server-client__
 
 Detailed Description: DHCP server client
 
 @see StructDhcpServerClientElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerClientElement *> *dhcpServerClient;
/**
 Array which contains StructDhcpServerOptionElement, as in YANG: __dhcp-server-option__
 
 Detailed Description: DHCP server option
 
 @see StructDhcpServerOptionElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerOptionElement *> *dhcpServerOption;
/**
 Array which contains StructDhcpServerStaticAddressElement, as in YANG: __dhcp-server-static-address__
 
 Detailed Description: DHCP server static address
 
 @see StructDhcpServerStaticAddressElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerStaticAddressElement *> *dhcpServerStaticAddress;

/**
 Designated initializer for StructDhcpServerPoolElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServerPoolElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for LeaseTime.
 
 Specifies the lease time in seconds of client assigned addresses. A value of -1 indicates an infinite lease.
 
 @param aLeaseTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLeaseTime:(NSInteger)aLeaseTime;

/**
 Setter for DomainName.
 
 Sets the domain name to provide to clients on the LAN interface.
 
 @param aDomainName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDomainName:(NSString *)aDomainName;

/**
 Setter for ChaddrMask.
 
 [MACAddress] Bit-mask for the MAC address, where matching of a packet's MAC address with the Chaddr is only to be done
for bit positions set to one in the mask. A mask of FF:FF:FF:FF:FF:FF or an empty string indicates all bits of the Chaddr
are to be used for conditional serving classification.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aChaddrMask Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChaddrMask:(NSString *)aChaddrMask;

/**
 Setter for ClientIdExclude.
 
 If false, matching packets are those that match the ClientID entry, if specified.
If true, matching packets are those that do not match the ClientID entry, if specified.
 
 @param aClientIdExclude Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setClientIdExclude:(BOOL)aClientIdExclude;

/**
 Setter for DnsServers.
 
 	[IPv4Address] Comma-separated list (up to 4 items) of IPv4Addresses. List items represent DNS servers offered to DHCP clients.
Support for more than three DNS Servers is OPTIONAL.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.
PassthroughEnable or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aDnsServers Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServers:(NSString *)aDnsServers;

/**
 Setter for VendorClassId.
 
 Pool association criterion.reference TR181 Device.DHCPv4.Server.Pool.{i}.
 
 @param aVendorClassId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setVendorClassId:(NSString *)aVendorClassId;

/**
 Setter for Status.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatus)aStatus;

/**
 Setter for Enable.
 
 Enables or disables the Pool entry.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for MaxAddress.
 
 [IPv4Address] Specifies last IPv4 address in the pool to be assigned by the DHCP server on the LAN interface.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aMaxAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMaxAddress:(NSString *)aMaxAddress;

/**
 Setter for IpRouters.
 
 [IPv4Address] Comma-separated list (up to 4 items) of IPv4Addresses. List items represent addresses of routers on this subnet.
Also known as default gateway. Support for more than one Router address is OPTIONAL.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpRouters Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpRouters:(NSString *)aIpRouters;

/**
 Setter for VendorClassIdMode.
 
 VendorClassID pattern match criterion. Enumeration of:
Exact
Prefix
Suffix
Substring
For example, if VendorClassID is Example then an Option 60 value of Example-device will match with VendorClassIDMode
values of Prefix or Substring, but not with Exact or Suffix.
 
 @param aVendorClassIdMode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setVendorClassIdMode:(EnumVendorClassIdMode)aVendorClassIdMode;

/**
 Setter for MinAddress.
 
 [IPv4Address] Specifies first IPv4 address in the pool to be assigned by the DHCP server on the LAN interface.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aMinAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMinAddress:(NSString *)aMinAddress;

/**
 Setter for Chaddr.
 
 [MACAddress] Pool association criterion.
Hardware address (MAC address) of the physical interface of the DHCP client.
An empty string indicates this criterion is not used for conditional serving.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aChaddr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChaddr:(NSString *)aChaddr;

/**
 Setter for VendorClassIdExclude.
 
 If false, matching packets are those that match the VendorClassID entry, if specified.
If true, matching packets are those that do not match the VendorClassID entry, if specified.
 
 @param aVendorClassIdExclude Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setVendorClassIdExclude:(BOOL)aVendorClassIdExclude;

/**
 Setter for Interface.
 
 The value MUST be the path name of a row in the IP.Interface table. If the referenced object is deleted, the parameter value
MUST be set to an empty string. The IP Interface associated with the Pool entry.
 
 @param aInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterface:(NSString *)aInterface;

/**
 Setter for UserClassIdExclude.
 
 If false, matching packets are those that match the UserClassID entry, if specified.
If true, matching packets are those that do not match the UserClassID entry, if specified.
 
 @param aUserClassIdExclude Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUserClassIdExclude:(BOOL)aUserClassIdExclude;

/**
 Setter for ClientId.
 
 Pool association criterion.
A hexbinary string used to identify one or more LAN devices, value of the DHCP Client Identifier (Option 61) as
defined in [RFC2132]. The option value is binary, so an exact match is REQUIRED.
An empty string indicates this criterion is not used for conditional serving.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aClientId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setClientId:(NSString *)aClientId;

/**
 Setter for ChaddrExclude.
 
 If false, matching packets are those that match the (masked) Chaddr entry, if specified.
If true, matching packets are those that do not match the (masked) Chaddr entry, if specified..
 
 @param aChaddrExclude Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChaddrExclude:(BOOL)aChaddrExclude;

/**
 Setter for SubnetMask.
 
 [IPv4Address] Specifies the client's network subnet mask.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aSubnetMask Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSubnetMask:(NSString *)aSubnetMask;

/**
 Setter for UserClassId.
 
 	Pool association criterion.
A hexbinary string used to identify one or more LAN devices, value of the DHCP User Class Identifier (Option 77)
as defined in [RFC3004].
An empty string indicates this criterion is not used for conditional serving.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aUserClassId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUserClassId:(NSString *)aUserClassId;

/**
 Setter for Alias.
 
 reference TR181 Device.DHCPv4.Client.{i}.
 
 @param aAlias Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlias:(NSString *)aAlias;

/**
 Setter for ReservedAddresses.
 
 [IPv4Address] Comma-separated list (up to 32 items) of IPv4Addresses. List items represent addresses marked reserved from
the address allocation pool.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aReservedAddresses Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setReservedAddresses:(NSString *)aReservedAddresses;

/**
 Setter for Order.
 
 Position of the Pool entry in the order of precedence. A value of 1 indicates the first entry considered (highest precedence).
For each DHCP request, the highest ordered entry that matches the association criteria is applied. All lower order entries are
ignored.When this value is modified, if the value matches that of an existing entry, the Order value for the existing entry
and all lower Order entries is incremented (lowered in precedence) to ensure uniqueness of this value. A deletion causes Order
values to be compacted. When a value is changed, incrementing occurs before compaction.The value of Order on creation of a Pool
table entry MUST be one greater than the largest current value (initially assigned the lowest precedence).
 
 @param aOrder Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOrder:(NSInteger)aOrder;


/**
 Getter for LeaseTime.
 
 Specifies the lease time in seconds of client assigned addresses. A value of -1 indicates an infinite lease.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getLeaseTime;

/**
 Getter for DomainName.
 
 Sets the domain name to provide to clients on the LAN interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getDomainName;

/**
 Getter for ChaddrMask.
 
 [MACAddress] Bit-mask for the MAC address, where matching of a packet's MAC address with the Chaddr is only to be done
for bit positions set to one in the mask. A mask of FF:FF:FF:FF:FF:FF or an empty string indicates all bits of the Chaddr
are to be used for conditional serving classification.
 
 @return NSString * The value of property.
 */
- (NSString *)getChaddrMask;

/**
 Getter for ClientIdExclude.
 
 If false, matching packets are those that match the ClientID entry, if specified.
If true, matching packets are those that do not match the ClientID entry, if specified.
 
 @return BOOL The value of property.
 */
- (BOOL)getClientIdExclude;

/**
 Getter for DnsServers.
 
 	[IPv4Address] Comma-separated list (up to 4 items) of IPv4Addresses. List items represent DNS servers offered to DHCP clients.
Support for more than three DNS Servers is OPTIONAL.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.
PassthroughEnable or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 @return NSString * The value of property.
 */
- (NSString *)getDnsServers;

/**
 Getter for VendorClassId.
 
 Pool association criterion.reference TR181 Device.DHCPv4.Server.Pool.{i}.
 
 @return NSString * The value of property.
 */
- (NSString *)getVendorClassId;

/**
 Getter for Status.
 
 reference TR181 Device.DHCPv4.Server.Pool.{i}.
 
 @return EnumStatus The value of property.
 */
- (EnumStatus)getStatus;

/**
 Getter for Enable.
 
 Enables or disables the Pool entry.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for MaxAddress.
 
 [IPv4Address] Specifies last IPv4 address in the pool to be assigned by the DHCP server on the LAN interface.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 @return NSString * The value of property.
 */
- (NSString *)getMaxAddress;

/**
 Getter for IpRouters.
 
 [IPv4Address] Comma-separated list (up to 4 items) of IPv4Addresses. List items represent addresses of routers on this subnet.
Also known as default gateway. Support for more than one Router address is OPTIONAL.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpRouters;

/**
 Getter for VendorClassIdMode.
 
 VendorClassID pattern match criterion. Enumeration of:
Exact
Prefix
Suffix
Substring
For example, if VendorClassID is Example then an Option 60 value of Example-device will match with VendorClassIDMode
values of Prefix or Substring, but not with Exact or Suffix.
 
 @return EnumVendorClassIdMode The value of property.
 */
- (EnumVendorClassIdMode)getVendorClassIdMode;

/**
 Getter for MinAddress.
 
 [IPv4Address] Specifies first IPv4 address in the pool to be assigned by the DHCP server on the LAN interface.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 @return NSString * The value of property.
 */
- (NSString *)getMinAddress;

/**
 Getter for Chaddr.
 
 [MACAddress] Pool association criterion.
Hardware address (MAC address) of the physical interface of the DHCP client.
An empty string indicates this criterion is not used for conditional serving.
 
 @return NSString * The value of property.
 */
- (NSString *)getChaddr;

/**
 Getter for VendorClassIdExclude.
 
 If false, matching packets are those that match the VendorClassID entry, if specified.
If true, matching packets are those that do not match the VendorClassID entry, if specified.
 
 @return BOOL The value of property.
 */
- (BOOL)getVendorClassIdExclude;

/**
 Getter for Interface.
 
 The value MUST be the path name of a row in the IP.Interface table. If the referenced object is deleted, the parameter value
MUST be set to an empty string. The IP Interface associated with the Pool entry.
 
 @return NSString * The value of property.
 */
- (NSString *)getInterface;

/**
 Getter for UserClassIdExclude.
 
 If false, matching packets are those that match the UserClassID entry, if specified.
If true, matching packets are those that do not match the UserClassID entry, if specified.
 
 @return BOOL The value of property.
 */
- (BOOL)getUserClassIdExclude;

/**
 Getter for ClientId.
 
 Pool association criterion.
A hexbinary string used to identify one or more LAN devices, value of the DHCP Client Identifier (Option 61) as
defined in [RFC2132]. The option value is binary, so an exact match is REQUIRED.
An empty string indicates this criterion is not used for conditional serving.
 
 @return NSString * The value of property.
 */
- (NSString *)getClientId;

/**
 Getter for ChaddrExclude.
 
 If false, matching packets are those that match the (masked) Chaddr entry, if specified.
If true, matching packets are those that do not match the (masked) Chaddr entry, if specified..
 
 @return BOOL The value of property.
 */
- (BOOL)getChaddrExclude;

/**
 Getter for SubnetMask.
 
 [IPv4Address] Specifies the client's network subnet mask.
The parameter value can be overwritten by dynamic values retrieved via a DHCP client with Client.{i}.PassthroughEnable
or a PPP interface with PPP.Interface.{i}.IPCP.PassthroughEnable equal to true.
 
 @return NSString * The value of property.
 */
- (NSString *)getSubnetMask;

/**
 Getter for UserClassId.
 
 	Pool association criterion.
A hexbinary string used to identify one or more LAN devices, value of the DHCP User Class Identifier (Option 77)
as defined in [RFC3004].
An empty string indicates this criterion is not used for conditional serving.
 
 @return NSString * The value of property.
 */
- (NSString *)getUserClassId;

/**
 Getter for Alias.
 
 reference TR181 Device.DHCPv4.Client.{i}.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlias;

/**
 Getter for ReservedAddresses.
 
 [IPv4Address] Comma-separated list (up to 32 items) of IPv4Addresses. List items represent addresses marked reserved from
the address allocation pool.
 
 @return NSString * The value of property.
 */
- (NSString *)getReservedAddresses;

/**
 Getter for Order.
 
 Position of the Pool entry in the order of precedence. A value of 1 indicates the first entry considered (highest precedence).
For each DHCP request, the highest ordered entry that matches the association criteria is applied. All lower order entries are
ignored.When this value is modified, if the value matches that of an existing entry, the Order value for the existing entry
and all lower Order entries is incremented (lowered in precedence) to ensure uniqueness of this value. A deletion causes Order
values to be compacted. When a value is changed, incrementing occurs before compaction.The value of Order on creation of a Pool
table entry MUST be one greater than the largest current value (initially assigned the lowest precedence).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOrder;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer

/**
 StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer, as in YANG: __top__.
 
 Detailed Description: DHCP server configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> top

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer example:
      StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer *top = [[StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"top init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!top) {
        NSLog(@"top is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"top init successful! toJson: %@", [top toJson]);
      NSLog(@"top validated result: %lu, 0 means it passes validation.", (unsigned long)[top validate]);
      
      // -----------------------------------------------
      // Setters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer
  
      // -----------------------------------------------
      // Getters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"top toJson: %@", [top toJson]);
```
 
 */
@interface StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer : NSObject

/**
 Array which contains StructDhcpServerPoolElement, as in YANG: __dhcp-server-pool__
 
 Detailed Description: DHCP server pool
 
 @see StructDhcpServerPoolElement
 */
@property (atomic, retain) NSMutableArray <StructDhcpServerPoolElement *> *dhcpServerPool;

/**
 Designated initializer for StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTopUrnZyxelCpeApplicationsZyxelApplicationsDhcpServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticIpListElement

/**
 StructStaticIpListElement, as in YANG: __static-ip-list-element__.
 
 Detailed Description: Static IP list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> add-static-ip -> input -> static-ip-list -> static-ip-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticIpListElement example:
      StructStaticIpListElement *staticIpListElement = [[StructStaticIpListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticIpListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticIpListElement) {
        NSLog(@"staticIpListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticIpListElement init successful! toJson: %@", [staticIpListElement toJson]);
      NSLog(@"staticIpListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[staticIpListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticIpListElement
      if ((error = [staticIpListElement setIpv4Addr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpListElement setIpv4Addr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpListElement setMacAddr:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpListElement setMacAddr:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpListElement setIsStaticIp:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpListElement setIsStaticIp:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticIpListElement
      [staticIpListElement getIpv4Addr];
      [staticIpListElement getMacAddr];
      [staticIpListElement getIsStaticIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticIpListElement toJson: %@", [staticIpListElement toJson]);
```
 
 */
@interface StructStaticIpListElement : NSObject


/**
 Designated initializer for StructStaticIpListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticIpListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ipv4Addr.
 
 [IPv4Address] IPv4 address to be assigned by the DHCP server to the
DHCP client with the specified hardware address (MAC address).
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpv4Addr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpv4Addr:(NSString *)aIpv4Addr;

/**
 Setter for MacAddr.
 
 [MACAddress] Hardware address (MAC address) of the physical
interface of the DHCP client.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMacAddr Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddr:(NSString *)aMacAddr;

/**
 Setter for IsStaticIp.
 
 True for assign static IP (ipv4-addr) to the mac-addr. Flase is not.
 
 @param aIsStaticIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIsStaticIp:(BOOL)aIsStaticIp;


/**
 Getter for Ipv4Addr.
 
 [IPv4Address] IPv4 address to be assigned by the DHCP server to the
DHCP client with the specified hardware address (MAC address).
 
 @return NSString * The value of property.
 */
- (NSString *)getIpv4Addr;

/**
 Getter for MacAddr.
 
 [MACAddress] Hardware address (MAC address) of the physical
interface of the DHCP client.
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddr;

/**
 Getter for IsStaticIp.
 
 True for assign static IP (ipv4-addr) to the mac-addr. Flase is not.
 
 @return BOOL The value of property.
 */
- (BOOL)getIsStaticIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputAddStaticIp

/**
 StructInputAddStaticIp, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> add-static-ip -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputAddStaticIp example:
      StructInputAddStaticIp *input = [[StructInputAddStaticIp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputAddStaticIp
  
      // -----------------------------------------------
      // Getters of StructInputAddStaticIp
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputAddStaticIp : NSObject

/**
 Array which contains StructStaticIpListElement, as in YANG: __static-ip-list__
 
 Detailed Description: Static IP list.
 
 @see StructStaticIpListElement
 */
@property (atomic, retain) NSMutableArray <StructStaticIpListElement *> *staticIpList;

/**
 Designated initializer for StructInputAddStaticIp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputAddStaticIp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAddStaticIp

/**
 StructAddStaticIp, as in YANG: __add-static-ip__.
 
 Detailed Description: Reserve an IP for a client.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-dhcp-server -> add-static-ip

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAddStaticIp example:
      StructAddStaticIp *addStaticIp = [[StructAddStaticIp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"addStaticIp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!addStaticIp) {
        NSLog(@"addStaticIp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"addStaticIp init successful! toJson: %@", [addStaticIp toJson]);
      NSLog(@"addStaticIp validated result: %lu, 0 means it passes validation.", (unsigned long)[addStaticIp validate]);
      
      // -----------------------------------------------
      // Setters of StructAddStaticIp
  
      // -----------------------------------------------
      // Getters of StructAddStaticIp
      [addStaticIp getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"addStaticIp toJson: %@", [addStaticIp toJson]);
```
 
 */
@interface StructAddStaticIp : NSObject

/**
 As in YANG: __input__
 
 @see StructInputAddStaticIp
 */
@property (atomic, retain) StructInputAddStaticIp *input;

/**
 Designated initializer for StructAddStaticIp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAddStaticIp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOnLineCancel

/**
 StructOnLineCancel, as in YANG: __on-line-cancel__.
 
 Detailed Description: Cancel on-line upgrade firmware.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-cancel

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOnLineCancel example:
      StructOnLineCancel *onLineCancel = [[StructOnLineCancel alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"onLineCancel init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!onLineCancel) {
        NSLog(@"onLineCancel is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"onLineCancel init successful! toJson: %@", [onLineCancel toJson]);
      NSLog(@"onLineCancel validated result: %lu, 0 means it passes validation.", (unsigned long)[onLineCancel validate]);
      
      // -----------------------------------------------
      // Setters of StructOnLineCancel
  
      // -----------------------------------------------
      // Getters of StructOnLineCancel
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"onLineCancel toJson: %@", [onLineCancel toJson]);
```
 
 */
@interface StructOnLineCancel : NSObject


/**
 Designated initializer for StructOnLineCancel either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOnLineCancel if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputOnLineCheck

/**
 StructOutputOnLineCheck, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-check -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputOnLineCheck example:
      StructOutputOnLineCheck *output = [[StructOutputOnLineCheck alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputOnLineCheck
      if ((error = [output setReleaseDate:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setReleaseDate:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setFirmwareName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setFirmwareName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setReleaseNote:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setReleaseNote:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setNote:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setNote:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setResult:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setResult:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setFirmwareSize:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setFirmwareSize:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputOnLineCheck
      [output getReleaseDate];
      [output getFirmwareName];
      [output getReleaseNote];
      [output getNote];
      [output getVersion];
      [output getResult];
      [output getFirmwareSize];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputOnLineCheck : NSObject


/**
 Designated initializer for StructOutputOnLineCheck either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputOnLineCheck if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for ReleaseDate.
 
 The latest firmware release date.
 
 @param aReleaseDate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setReleaseDate:(NSString *)aReleaseDate;

/**
 Setter for FirmwareName.
 
 The latest firmware file name.
 
 @param aFirmwareName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFirmwareName:(NSString *)aFirmwareName;

/**
 Setter for ReleaseNote.
 
 The latest firmware release note.
 
 @param aReleaseNote Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setReleaseNote:(NSString *)aReleaseNote;

/**
 Setter for Note.
 
 The note for latest firmware.
 
 @param aNote Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNote:(NSString *)aNote;

/**
 Setter for Version.
 
 The latest firmware version.
 
 @param aVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setVersion:(NSString *)aVersion;

/**
 Setter for Result.
 
 The feedback of on-line checking.
 
 @param aResult Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setResult:(NSString *)aResult;

/**
 Setter for FirmwareSize.
 
 The latest firmware size.
 
 @param aFirmwareSize Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFirmwareSize:(NSString *)aFirmwareSize;


/**
 Getter for ReleaseDate.
 
 The latest firmware release date.
 
 @return NSString * The value of property.
 */
- (NSString *)getReleaseDate;

/**
 Getter for FirmwareName.
 
 The latest firmware file name.
 
 @return NSString * The value of property.
 */
- (NSString *)getFirmwareName;

/**
 Getter for ReleaseNote.
 
 The latest firmware release note.
 
 @return NSString * The value of property.
 */
- (NSString *)getReleaseNote;

/**
 Getter for Note.
 
 The note for latest firmware.
 
 @return NSString * The value of property.
 */
- (NSString *)getNote;

/**
 Getter for Version.
 
 The latest firmware version.
 
 @return NSString * The value of property.
 */
- (NSString *)getVersion;

/**
 Getter for Result.
 
 The feedback of on-line checking.
 
 @return NSString * The value of property.
 */
- (NSString *)getResult;

/**
 Getter for FirmwareSize.
 
 The latest firmware size.
 
 @return NSString * The value of property.
 */
- (NSString *)getFirmwareSize;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOnLineCheck

/**
 StructOnLineCheck, as in YANG: __on-line-check__.
 
 Detailed Description: Check on-line Firmware.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-check

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOnLineCheck example:
      StructOnLineCheck *onLineCheck = [[StructOnLineCheck alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"onLineCheck init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!onLineCheck) {
        NSLog(@"onLineCheck is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"onLineCheck init successful! toJson: %@", [onLineCheck toJson]);
      NSLog(@"onLineCheck validated result: %lu, 0 means it passes validation.", (unsigned long)[onLineCheck validate]);
      
      // -----------------------------------------------
      // Setters of StructOnLineCheck
  
      // -----------------------------------------------
      // Getters of StructOnLineCheck
      [onLineCheck getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"onLineCheck toJson: %@", [onLineCheck toJson]);
```
 
 */
@interface StructOnLineCheck : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputOnLineCheck
 */
@property (atomic, retain) StructOutputOnLineCheck *output;

/**
 Designated initializer for StructOnLineCheck either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOnLineCheck if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUpgradeAfterUpload

/**
 StructUpgradeAfterUpload, as in YANG: __upgrade-after-upload__.
 
 Detailed Description: Upgrade device after the firmware is uploaded.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> upgrade-after-upload

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUpgradeAfterUpload example:
      StructUpgradeAfterUpload *upgradeAfterUpload = [[StructUpgradeAfterUpload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"upgradeAfterUpload init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!upgradeAfterUpload) {
        NSLog(@"upgradeAfterUpload is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"upgradeAfterUpload init successful! toJson: %@", [upgradeAfterUpload toJson]);
      NSLog(@"upgradeAfterUpload validated result: %lu, 0 means it passes validation.", (unsigned long)[upgradeAfterUpload validate]);
      
      // -----------------------------------------------
      // Setters of StructUpgradeAfterUpload
  
      // -----------------------------------------------
      // Getters of StructUpgradeAfterUpload
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"upgradeAfterUpload toJson: %@", [upgradeAfterUpload toJson]);
```
 
 */
@interface StructUpgradeAfterUpload : NSObject


/**
 Designated initializer for StructUpgradeAfterUpload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUpgradeAfterUpload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOnLineDownload

/**
 StructOnLineDownload, as in YANG: __on-line-download__.
 
 Detailed Description: On-line download firmware.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-download

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOnLineDownload example:
      StructOnLineDownload *onLineDownload = [[StructOnLineDownload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"onLineDownload init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!onLineDownload) {
        NSLog(@"onLineDownload is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"onLineDownload init successful! toJson: %@", [onLineDownload toJson]);
      NSLog(@"onLineDownload validated result: %lu, 0 means it passes validation.", (unsigned long)[onLineDownload validate]);
      
      // -----------------------------------------------
      // Setters of StructOnLineDownload
  
      // -----------------------------------------------
      // Getters of StructOnLineDownload
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"onLineDownload toJson: %@", [onLineDownload toJson]);
```
 
 */
@interface StructOnLineDownload : NSObject


/**
 Designated initializer for StructOnLineDownload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOnLineDownload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputUpload

/**
 StructInputUpload, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> upload -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputUpload example:
      StructInputUpload *input = [[StructInputUpload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputUpload
  
      // -----------------------------------------------
      // Getters of StructInputUpload
      [input getFirmware];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputUpload : NSObject


/**
 Designated initializer for StructInputUpload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputUpload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Firmware.
 
 Base64 encoded file of firmware.
 
 @param aFirmware Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFirmware:(NSString *)aFirmware;


/**
 Getter for Firmware.
 
 Base64 encoded file of firmware.
 
 @return NSString * The value of property.
 */
- (NSString *)getFirmware;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUpload

/**
 StructUpload, as in YANG: __upload__.
 
 Detailed Description: Upload the firmware.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> upload

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUpload example:
      StructUpload *upload = [[StructUpload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"upload init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!upload) {
        NSLog(@"upload is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"upload init successful! toJson: %@", [upload toJson]);
      NSLog(@"upload validated result: %lu, 0 means it passes validation.", (unsigned long)[upload validate]);
      
      // -----------------------------------------------
      // Setters of StructUpload
  
      // -----------------------------------------------
      // Getters of StructUpload
      [upload getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"upload toJson: %@", [upload toJson]);
```
 
 */
@interface StructUpload : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUpload
 */
@property (atomic, retain) StructInputUpload *input;

/**
 Designated initializer for StructUpload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUpload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOnLineUpgrade

/**
 StructOnLineUpgrade, as in YANG: __on-line-upgrade__.
 
 Detailed Description: On-line upgrade firmware after the file is downloaded.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-upgrade

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOnLineUpgrade example:
      StructOnLineUpgrade *onLineUpgrade = [[StructOnLineUpgrade alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"onLineUpgrade init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!onLineUpgrade) {
        NSLog(@"onLineUpgrade is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"onLineUpgrade init successful! toJson: %@", [onLineUpgrade toJson]);
      NSLog(@"onLineUpgrade validated result: %lu, 0 means it passes validation.", (unsigned long)[onLineUpgrade validate]);
      
      // -----------------------------------------------
      // Setters of StructOnLineUpgrade
  
      // -----------------------------------------------
      // Getters of StructOnLineUpgrade
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"onLineUpgrade toJson: %@", [onLineUpgrade toJson]);
```
 
 */
@interface StructOnLineUpgrade : NSObject


/**
 Designated initializer for StructOnLineUpgrade either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOnLineUpgrade if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputOnLineDownloadStatus

/**
 StructOutputOnLineDownloadStatus, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-download-status -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputOnLineDownloadStatus example:
      StructOutputOnLineDownloadStatus *output = [[StructOutputOnLineDownloadStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputOnLineDownloadStatus
      if ((error = [output setDownloadPercent:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[output setDownloadPercent:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputOnLineDownloadStatus
      [output getDownloadPercent];
      [output getResult];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputOnLineDownloadStatus : NSObject


/**
 Designated initializer for StructOutputOnLineDownloadStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputOnLineDownloadStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DownloadPercent.
 
 The portion of downloaded file size in percentage.
 
 Range:       0..100

 @param aDownloadPercent Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDownloadPercent:(NSInteger)aDownloadPercent;

/**
 Setter for Result.
 
 The status of firmeare download.
 
 @param aResult Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setResult:(EnumResult)aResult;


/**
 Getter for DownloadPercent.
 
 The portion of downloaded file size in percentage.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDownloadPercent;

/**
 Getter for Result.
 
 The status of firmeare download.
 
 @return EnumResult The value of property.
 */
- (EnumResult)getResult;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOnLineDownloadStatus

/**
 StructOnLineDownloadStatus, as in YANG: __on-line-download-status__.
 
 Detailed Description: On-line download firmware.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> on-line-download-status

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOnLineDownloadStatus example:
      StructOnLineDownloadStatus *onLineDownloadStatus = [[StructOnLineDownloadStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"onLineDownloadStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!onLineDownloadStatus) {
        NSLog(@"onLineDownloadStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"onLineDownloadStatus init successful! toJson: %@", [onLineDownloadStatus toJson]);
      NSLog(@"onLineDownloadStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[onLineDownloadStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructOnLineDownloadStatus
  
      // -----------------------------------------------
      // Getters of StructOnLineDownloadStatus
      [onLineDownloadStatus getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"onLineDownloadStatus toJson: %@", [onLineDownloadStatus toJson]);
```
 
 */
@interface StructOnLineDownloadStatus : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputOnLineDownloadStatus
 */
@property (atomic, retain) StructOutputOnLineDownloadStatus *output;

/**
 Designated initializer for StructOnLineDownloadStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOnLineDownloadStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputUpgradeStatus

/**
 StructOutputUpgradeStatus, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> upgrade-status -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputUpgradeStatus example:
      StructOutputUpgradeStatus *output = [[StructOutputUpgradeStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputUpgradeStatus
  
      // -----------------------------------------------
      // Getters of StructOutputUpgradeStatus
      [output getStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputUpgradeStatus : NSObject


/**
 Designated initializer for StructOutputUpgradeStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputUpgradeStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 The status of firmware upgrade.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatusOutput)aStatus;


/**
 Getter for Status.
 
 The status of firmware upgrade.
 
 @return EnumStatusOutput The value of property.
 */
- (EnumStatusOutput)getStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUpgradeStatus

/**
 StructUpgradeStatus, as in YANG: __upgrade-status__.
 
 Detailed Description: Current firmware upgrade status.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-firmware-upgrade -> upgrade-status

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUpgradeStatus example:
      StructUpgradeStatus *upgradeStatus = [[StructUpgradeStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"upgradeStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!upgradeStatus) {
        NSLog(@"upgradeStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"upgradeStatus init successful! toJson: %@", [upgradeStatus toJson]);
      NSLog(@"upgradeStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[upgradeStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructUpgradeStatus
  
      // -----------------------------------------------
      // Getters of StructUpgradeStatus
      [upgradeStatus getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"upgradeStatus toJson: %@", [upgradeStatus toJson]);
```
 
 */
@interface StructUpgradeStatus : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputUpgradeStatus
 */
@property (atomic, retain) StructOutputUpgradeStatus *output;

/**
 Designated initializer for StructUpgradeStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUpgradeStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGrid

/**
 StructGrid, as in YANG: __grid__.
 
 Detailed Description: Grid of current game.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-tic-tac-toe -> tic-tac-toe -> grid
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGrid example:
      StructGrid *grid = [[StructGrid alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"grid init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!grid) {
        NSLog(@"grid is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"grid init successful! toJson: %@", [grid toJson]);
      NSLog(@"grid validated result: %lu, 0 means it passes validation.", (unsigned long)[grid validate]);
      
      // -----------------------------------------------
      // Setters of StructGrid
  
      // -----------------------------------------------
      // Getters of StructGrid
      [grid getRow3Col1];
      [grid getRow3Col3];
      [grid getRow3Col2];
      [grid getRow1Col3];
      [grid getRow1Col2];
      [grid getRow1Col1];
      [grid getRow2Col1];
      [grid getRow2Col2];
      [grid getRow2Col3];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"grid toJson: %@", [grid toJson]);
```
 
 */
@interface StructGrid : NSObject


/**
 Designated initializer for StructGrid either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGrid if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Row3Col1.
 
 Square of Row 1, Col 1 in grid.
 
 @param aRow3Col1 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow3Col1:(EnumSquareStatus)aRow3Col1;

/**
 Setter for Row3Col3.
 
 Square of Row 1, Col 3 in grid.
 
 @param aRow3Col3 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow3Col3:(EnumSquareStatus)aRow3Col3;

/**
 Setter for Row3Col2.
 
 Square of Row 1, Col 2 in grid.
 
 @param aRow3Col2 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow3Col2:(EnumSquareStatus)aRow3Col2;

/**
 Setter for Row1Col3.
 
 Square of Row 1, Col 3 in grid.
 
 @param aRow1Col3 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow1Col3:(EnumSquareStatus)aRow1Col3;

/**
 Setter for Row1Col2.
 
 Square of Row 1, Col 2 in grid.
 
 @param aRow1Col2 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow1Col2:(EnumSquareStatus)aRow1Col2;

/**
 Setter for Row1Col1.
 
 Square of Row 1, Col 1 in grid.
 
 @param aRow1Col1 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow1Col1:(EnumSquareStatus)aRow1Col1;

/**
 Setter for Row2Col1.
 
 Square of Row 2, Col 1 in grid.
 
 @param aRow2Col1 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow2Col1:(EnumSquareStatus)aRow2Col1;

/**
 Setter for Row2Col2.
 
 Square of Row 2, Col 2 in grid.
 
 @param aRow2Col2 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow2Col2:(EnumSquareStatus)aRow2Col2;

/**
 Setter for Row2Col3.
 
 Square of Row 2, Col 3 in grid.
 
 @param aRow2Col3 Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRow2Col3:(EnumSquareStatus)aRow2Col3;


/**
 Getter for Row3Col1.
 
 Square of Row 1, Col 1 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow3Col1;

/**
 Getter for Row3Col3.
 
 Square of Row 1, Col 3 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow3Col3;

/**
 Getter for Row3Col2.
 
 Square of Row 1, Col 2 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow3Col2;

/**
 Getter for Row1Col3.
 
 Square of Row 1, Col 3 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow1Col3;

/**
 Getter for Row1Col2.
 
 Square of Row 1, Col 2 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow1Col2;

/**
 Getter for Row1Col1.
 
 Square of Row 1, Col 1 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow1Col1;

/**
 Getter for Row2Col1.
 
 Square of Row 2, Col 1 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow2Col1;

/**
 Getter for Row2Col2.
 
 Square of Row 2, Col 2 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow2Col2;

/**
 Getter for Row2Col3.
 
 Square of Row 2, Col 3 in grid.
 
 @return EnumSquareStatus The value of property.
 */
- (EnumSquareStatus)getRow2Col3;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructScoreBoard

/**
 StructScoreBoard, as in YANG: __score-board__.
 
 Detailed Description: Score board to keep record of game statistics.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-tic-tac-toe -> tic-tac-toe -> score-board
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructScoreBoard example:
      StructScoreBoard *scoreBoard = [[StructScoreBoard alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"scoreBoard init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!scoreBoard) {
        NSLog(@"scoreBoard is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"scoreBoard init successful! toJson: %@", [scoreBoard toJson]);
      NSLog(@"scoreBoard validated result: %lu, 0 means it passes validation.", (unsigned long)[scoreBoard validate]);
      
      // -----------------------------------------------
      // Setters of StructScoreBoard
      if ((error = [scoreBoard setNumberOfPlayerWins:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[scoreBoard setNumberOfPlayerWins:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [scoreBoard setNumberOfBossWins:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[scoreBoard setNumberOfBossWins:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructScoreBoard
      [scoreBoard getNumberOfPlayerWins];
      [scoreBoard getNumberOfBossWins];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"scoreBoard toJson: %@", [scoreBoard toJson]);
```
 
 */
@interface StructScoreBoard : NSObject


/**
 Designated initializer for StructScoreBoard either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructScoreBoard if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for NumberOfPlayerWins.
 
 Keeping record to the number of games won by player.
 
 @param aNumberOfPlayerWins Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNumberOfPlayerWins:(NSInteger)aNumberOfPlayerWins;

/**
 Setter for NumberOfBossWins.
 
 Keeping record to the number of games won by boss.
 
 @param aNumberOfBossWins Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNumberOfBossWins:(NSInteger)aNumberOfBossWins;


/**
 Getter for NumberOfPlayerWins.
 
 Keeping record to the number of games won by player.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getNumberOfPlayerWins;

/**
 Getter for NumberOfBossWins.
 
 Keeping record to the number of games won by boss.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getNumberOfBossWins;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTicTacToe

/**
 StructTicTacToe, as in YANG: __tic-tac-toe__.
 
 Detailed Description: Zyxel tic-tac-toe application configuration for demo purpose.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-tic-tac-toe -> tic-tac-toe

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTicTacToe example:
      StructTicTacToe *ticTacToe = [[StructTicTacToe alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ticTacToe init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ticTacToe) {
        NSLog(@"ticTacToe is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ticTacToe init successful! toJson: %@", [ticTacToe toJson]);
      NSLog(@"ticTacToe validated result: %lu, 0 means it passes validation.", (unsigned long)[ticTacToe validate]);
      
      // -----------------------------------------------
      // Setters of StructTicTacToe
      if ((error = [ticTacToe setPlayerName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ticTacToe setPlayerName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ticTacToe setBossName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ticTacToe setBossName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructTicTacToe
      [ticTacToe getPlayerName];
      [ticTacToe getGameStatus];
      [ticTacToe getGrid];
      [ticTacToe getScoreBoard];
      [ticTacToe getBossName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ticTacToe toJson: %@", [ticTacToe toJson]);
```
 
 */
@interface StructTicTacToe : NSObject

/**
 As in YANG: __grid__
 
 @see StructGrid
 */
@property (atomic, retain) StructGrid *grid;
/**
 As in YANG: __score-board__
 
 @see StructScoreBoard
 */
@property (atomic, retain) StructScoreBoard *scoreBoard;

/**
 Designated initializer for StructTicTacToe either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTicTacToe if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PlayerName.
 
 Name of current player who is playing this game.
 
 Length:      3..20

 @param aPlayerName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPlayerName:(NSString *)aPlayerName;

/**
 Setter for GameStatus.
 
 Status of current game.
 
 @param aGameStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setGameStatus:(EnumGameStatus)aGameStatus;

/**
 Setter for BossName.
 
 Name of the boss who is hosting the game.
 
 @param aBossName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBossName:(NSString *)aBossName;


/**
 Getter for PlayerName.
 
 Name of current player who is playing this game.
 
 @return NSString * The value of property.
 */
- (NSString *)getPlayerName;

/**
 Getter for GameStatus.
 
 Status of current game.
 
 @return EnumGameStatus The value of property.
 */
- (EnumGameStatus)getGameStatus;

/**
 Getter for BossName.
 
 Name of the boss who is hosting the game.
 
 @return NSString * The value of property.
 */
- (NSString *)getBossName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputApplyWifiInterfaceSetting

/**
 StructInputApplyWifiInterfaceSetting, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-apply -> apply-wifi-interface-setting -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputApplyWifiInterfaceSetting example:
      StructInputApplyWifiInterfaceSetting *input = [[StructInputApplyWifiInterfaceSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputApplyWifiInterfaceSetting
      if ((error = [input setConfig:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setConfig:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputApplyWifiInterfaceSetting
      [input getConfig];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputApplyWifiInterfaceSetting : NSObject


/**
 Designated initializer for StructInputApplyWifiInterfaceSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputApplyWifiInterfaceSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Config.
 
 The config name for applying.
 
 @param aConfig Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setConfig:(NSString *)aConfig;


/**
 Getter for Config.
 
 The config name for applying.
 
 @return NSString * The value of property.
 */
- (NSString *)getConfig;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructApplyWifiInterfaceSetting

/**
 StructApplyWifiInterfaceSetting, as in YANG: __apply-wifi-interface-setting__.
 
 Detailed Description: Activate wifi setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-apply -> apply-wifi-interface-setting

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructApplyWifiInterfaceSetting example:
      StructApplyWifiInterfaceSetting *applyWifiInterfaceSetting = [[StructApplyWifiInterfaceSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"applyWifiInterfaceSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!applyWifiInterfaceSetting) {
        NSLog(@"applyWifiInterfaceSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"applyWifiInterfaceSetting init successful! toJson: %@", [applyWifiInterfaceSetting toJson]);
      NSLog(@"applyWifiInterfaceSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[applyWifiInterfaceSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructApplyWifiInterfaceSetting
  
      // -----------------------------------------------
      // Getters of StructApplyWifiInterfaceSetting
      [applyWifiInterfaceSetting getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"applyWifiInterfaceSetting toJson: %@", [applyWifiInterfaceSetting toJson]);
```
 
 */
@interface StructApplyWifiInterfaceSetting : NSObject

/**
 As in YANG: __input__
 
 @see StructInputApplyWifiInterfaceSetting
 */
@property (atomic, retain) StructInputApplyWifiInterfaceSetting *input;

/**
 Designated initializer for StructApplyWifiInterfaceSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructApplyWifiInterfaceSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputTransferCertificate

/**
 StructOutputTransferCertificate, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system-certificate -> transfer-certificate -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputTransferCertificate example:
      StructOutputTransferCertificate *output = [[StructOutputTransferCertificate alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputTransferCertificate
      if ((error = [output setTag:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setTag:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputTransferCertificate
      [output getTag];
      [output getCertificate];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputTransferCertificate : NSObject


/**
 Designated initializer for StructOutputTransferCertificate either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputTransferCertificate if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Tag.
 
 A random number. This tag is bound to the transfer action.
 
 @param aTag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTag:(NSString *)aTag;

/**
 Setter for Certificate.
 
 Base64 encoded file.
 
 @param aCertificate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCertificate:(NSString *)aCertificate;


/**
 Getter for Tag.
 
 A random number. This tag is bound to the transfer action.
 
 @return NSString * The value of property.
 */
- (NSString *)getTag;

/**
 Getter for Certificate.
 
 Base64 encoded file.
 
 @return NSString * The value of property.
 */
- (NSString *)getCertificate;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTransferCertificate

/**
 StructTransferCertificate, as in YANG: __transfer-certificate__.
 
 Detailed Description: Transfer certificate.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system-certificate -> transfer-certificate

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTransferCertificate example:
      StructTransferCertificate *transferCertificate = [[StructTransferCertificate alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"transferCertificate init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!transferCertificate) {
        NSLog(@"transferCertificate is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"transferCertificate init successful! toJson: %@", [transferCertificate toJson]);
      NSLog(@"transferCertificate validated result: %lu, 0 means it passes validation.", (unsigned long)[transferCertificate validate]);
      
      // -----------------------------------------------
      // Setters of StructTransferCertificate
  
      // -----------------------------------------------
      // Getters of StructTransferCertificate
      [transferCertificate getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"transferCertificate toJson: %@", [transferCertificate toJson]);
```
 
 */
@interface StructTransferCertificate : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputTransferCertificate
 */
@property (atomic, retain) StructOutputTransferCertificate *output;

/**
 Designated initializer for StructTransferCertificate either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTransferCertificate if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetPrivateKeyPath

/**
 StructOutputGetPrivateKeyPath, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system-certificate -> get-private-key-path -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetPrivateKeyPath example:
      StructOutputGetPrivateKeyPath *output = [[StructOutputGetPrivateKeyPath alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetPrivateKeyPath
      if ((error = [output setPrivateKeyPath:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setPrivateKeyPath:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputGetPrivateKeyPath
      [output getPrivateKeyPath];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetPrivateKeyPath : NSObject


/**
 Designated initializer for StructOutputGetPrivateKeyPath either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetPrivateKeyPath if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PrivateKeyPath.
 
 The private key storage path.
 
 @param aPrivateKeyPath Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPrivateKeyPath:(NSString *)aPrivateKeyPath;


/**
 Getter for PrivateKeyPath.
 
 The private key storage path.
 
 @return NSString * The value of property.
 */
- (NSString *)getPrivateKeyPath;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetPrivateKeyPath

/**
 StructGetPrivateKeyPath, as in YANG: __get-private-key-path__.
 
 Detailed Description: Transfer private key path.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system-certificate -> get-private-key-path

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetPrivateKeyPath example:
      StructGetPrivateKeyPath *getPrivateKeyPath = [[StructGetPrivateKeyPath alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getPrivateKeyPath init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getPrivateKeyPath) {
        NSLog(@"getPrivateKeyPath is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getPrivateKeyPath init successful! toJson: %@", [getPrivateKeyPath toJson]);
      NSLog(@"getPrivateKeyPath validated result: %lu, 0 means it passes validation.", (unsigned long)[getPrivateKeyPath validate]);
      
      // -----------------------------------------------
      // Setters of StructGetPrivateKeyPath
  
      // -----------------------------------------------
      // Getters of StructGetPrivateKeyPath
      [getPrivateKeyPath getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getPrivateKeyPath toJson: %@", [getPrivateKeyPath toJson]);
```
 
 */
@interface StructGetPrivateKeyPath : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputGetPrivateKeyPath
 */
@property (atomic, retain) StructOutputGetPrivateKeyPath *output;

/**
 Designated initializer for StructGetPrivateKeyPath either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetPrivateKeyPath if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfEthernetEthernet

/**
 StructIfEthernetEthernet, as in YANG: __if-ethernet:ethernet__.
 
 Detailed Description: For ethernet interface state.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> if-ethernet:ethernet
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfEthernetEthernet example:
      StructIfEthernetEthernet *ifEthernetEthernet = [[StructIfEthernetEthernet alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifEthernetEthernet init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifEthernetEthernet) {
        NSLog(@"ifEthernetEthernet is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifEthernetEthernet init successful! toJson: %@", [ifEthernetEthernet toJson]);
      NSLog(@"ifEthernetEthernet validated result: %lu, 0 means it passes validation.", (unsigned long)[ifEthernetEthernet validate]);
      
      // -----------------------------------------------
      // Setters of StructIfEthernetEthernet
  
      // -----------------------------------------------
      // Getters of StructIfEthernetEthernet
      [ifEthernetEthernet getIfEthernetDuplex];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifEthernetEthernet toJson: %@", [ifEthernetEthernet toJson]);
```
 
 */
@interface StructIfEthernetEthernet : NSObject


/**
 Designated initializer for StructIfEthernetEthernet either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfEthernetEthernet if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfEthernetDuplex.
 
 The duplex mode available to this connection.
 
 @param aIfEthernetDuplex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfEthernetDuplex:(EnumIfEthernetDuplex)aIfEthernetDuplex;


/**
 Getter for IfEthernetDuplex.
 
 The duplex mode available to this connection.
 
 @return EnumIfEthernetDuplex The value of property.
 */
- (EnumIfEthernetDuplex)getIfEthernetDuplex;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidEndPointStats

/**
 StructIfSsidEndPointStats, as in YANG: __if-ssid:end-point-stats__.
 
 Detailed Description: Throughput statistics for this end point.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> if-ssid:end-point-stats
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidEndPointStats example:
      StructIfSsidEndPointStats *ifSsidEndPointStats = [[StructIfSsidEndPointStats alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidEndPointStats init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidEndPointStats) {
        NSLog(@"ifSsidEndPointStats is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidEndPointStats init successful! toJson: %@", [ifSsidEndPointStats toJson]);
      NSLog(@"ifSsidEndPointStats validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidEndPointStats validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidEndPointStats
      if ((error = [ifSsidEndPointStats setIfSsidRetransmissions:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEndPointStats setIfSsidRetransmissions:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidEndPointStats setIfSsidSignalStrength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEndPointStats setIfSsidSignalStrength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidEndPointStats setIfSsidLastDataUplinkRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEndPointStats setIfSsidLastDataUplinkRate:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidEndPointStats setIfSsidLastDataDownlinkRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEndPointStats setIfSsidLastDataDownlinkRate:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidEndPointStats
      [ifSsidEndPointStats getIfSsidRetransmissions];
      [ifSsidEndPointStats getIfSsidSignalStrength];
      [ifSsidEndPointStats getIfSsidLastDataUplinkRate];
      [ifSsidEndPointStats getIfSsidLastDataDownlinkRate];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidEndPointStats toJson: %@", [ifSsidEndPointStats toJson]);
```
 
 */
@interface StructIfSsidEndPointStats : NSObject


/**
 Designated initializer for StructIfSsidEndPointStats either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidEndPointStats if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidRetransmissions.
 
 The number of packets that had to be re-transmitted, from the last
100 packets sent to the access point. Multiple re-transmissions of the
same packet count as one.
 
 @param aIfSsidRetransmissions Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidRetransmissions:(NSInteger)aIfSsidRetransmissions;

/**
 Setter for IfSsidSignalStrength.
 
 An indicator of radio signal strength of the downlink from the access
point to the end point, measured in dBm, as an average of the last
100 packets received from the device.
 
 @param aIfSsidSignalStrength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSignalStrength:(NSInteger)aIfSsidSignalStrength;

/**
 Setter for IfSsidLastDataUplinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the end point to the access point device.
 
 @param aIfSsidLastDataUplinkRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidLastDataUplinkRate:(NSInteger)aIfSsidLastDataUplinkRate;

/**
 Setter for IfSsidLastDataDownlinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the access point to the end point device.
 
 @param aIfSsidLastDataDownlinkRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidLastDataDownlinkRate:(NSInteger)aIfSsidLastDataDownlinkRate;


/**
 Getter for IfSsidRetransmissions.
 
 The number of packets that had to be re-transmitted, from the last
100 packets sent to the access point. Multiple re-transmissions of the
same packet count as one.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidRetransmissions;

/**
 Getter for IfSsidSignalStrength.
 
 An indicator of radio signal strength of the downlink from the access
point to the end point, measured in dBm, as an average of the last
100 packets received from the device.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidSignalStrength;

/**
 Getter for IfSsidLastDataUplinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the end point to the access point device.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidLastDataUplinkRate;

/**
 Getter for IfSsidLastDataDownlinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the access point to the end point device.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidLastDataDownlinkRate;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidClientListElement

/**
 StructIfSsidClientListElement, as in YANG: __if-ssid:client-list-element__.
 
 Detailed Description: Wireless client list.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> if-ssid:client-list -> if-ssid:client-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidClientListElement example:
      StructIfSsidClientListElement *ifSsidClientListElement = [[StructIfSsidClientListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidClientListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidClientListElement) {
        NSLog(@"ifSsidClientListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidClientListElement init successful! toJson: %@", [ifSsidClientListElement toJson]);
      NSLog(@"ifSsidClientListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidClientListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidClientListElement
      if ((error = [ifSsidClientListElement setIfSsidSignalStrength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidSignalStrength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidAuthenticationState:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidAuthenticationState:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidRetransmissions:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidRetransmissions:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidLastDataUplinkRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidLastDataUplinkRate:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidLastDataDownlinkRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidLastDataDownlinkRate:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidMacaddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidMacaddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidClientListElement setIfSsidActive:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidClientListElement setIfSsidActive:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidClientListElement
      [ifSsidClientListElement getIfSsidSignalStrength];
      [ifSsidClientListElement getIfSsidAuthenticationState];
      [ifSsidClientListElement getIfSsidRetransmissions];
      [ifSsidClientListElement getIfSsidLastDataUplinkRate];
      [ifSsidClientListElement getIfSsidLastDataDownlinkRate];
      [ifSsidClientListElement getIfSsidMacaddress];
      [ifSsidClientListElement getIfSsidActive];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidClientListElement toJson: %@", [ifSsidClientListElement toJson]);
```
 
 */
@interface StructIfSsidClientListElement : NSObject


/**
 Designated initializer for StructIfSsidClientListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidClientListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidSignalStrength.
 
 An indicator of radio signal strength of the uplink from the
associated device to the access point, measured in dBm, as an average
of the last 100 packets received from the device.
 
 @param aIfSsidSignalStrength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSignalStrength:(NSInteger)aIfSsidSignalStrength;

/**
 Setter for IfSsidAuthenticationState.
 
 Whether an associated device has authenticated (true) or not
(false).
 
 @param aIfSsidAuthenticationState Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidAuthenticationState:(BOOL)aIfSsidAuthenticationState;

/**
 Setter for IfSsidRetransmissions.
 
 The number of packets that had to be re-transmitted, from the last 100
packets sent to the associated device. Multiple re-transmissions of
the same packet count as one.
 
 @param aIfSsidRetransmissions Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidRetransmissions:(NSInteger)aIfSsidRetransmissions;

/**
 Setter for IfSsidLastDataUplinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the associated device to the access point.
 
 @param aIfSsidLastDataUplinkRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidLastDataUplinkRate:(NSInteger)aIfSsidLastDataUplinkRate;

/**
 Setter for IfSsidLastDataDownlinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the access point to the associated device.
 
 @param aIfSsidLastDataDownlinkRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidLastDataDownlinkRate:(NSInteger)aIfSsidLastDataDownlinkRate;

/**
 Setter for IfSsidMacaddress.
 
 The mac address of an associated station.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aIfSsidMacaddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidMacaddress:(NSString *)aIfSsidMacaddress;

/**
 Setter for IfSsidActive.
 
 Whether or not this node is currently present in the WiFi AccessPoint
network.
 
 @param aIfSsidActive Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidActive:(BOOL)aIfSsidActive;


/**
 Getter for IfSsidSignalStrength.
 
 An indicator of radio signal strength of the uplink from the
associated device to the access point, measured in dBm, as an average
of the last 100 packets received from the device.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidSignalStrength;

/**
 Getter for IfSsidAuthenticationState.
 
 Whether an associated device has authenticated (true) or not
(false).
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidAuthenticationState;

/**
 Getter for IfSsidRetransmissions.
 
 The number of packets that had to be re-transmitted, from the last 100
packets sent to the associated device. Multiple re-transmissions of
the same packet count as one.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidRetransmissions;

/**
 Getter for IfSsidLastDataUplinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the associated device to the access point.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidLastDataUplinkRate;

/**
 Getter for IfSsidLastDataDownlinkRate.
 
 The data transmit rate in kbps that was most recently used for
transmission from the access point to the associated device.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidLastDataDownlinkRate;

/**
 Getter for IfSsidMacaddress.
 
 The mac address of an associated station.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidMacaddress;

/**
 Getter for IfSsidActive.
 
 Whether or not this node is currently present in the WiFi AccessPoint
network.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidActive;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStatistics

/**
 StructStatistics, as in YANG: __statistics__.
 
 Detailed Description: A collection of interface-related statistics objects.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> statistics
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStatistics example:
      StructStatistics *statistics = [[StructStatistics alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"statistics init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!statistics) {
        NSLog(@"statistics is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"statistics init successful! toJson: %@", [statistics toJson]);
      NSLog(@"statistics validated result: %lu, 0 means it passes validation.", (unsigned long)[statistics validate]);
      
      // -----------------------------------------------
      // Setters of StructStatistics
      if ((error = [statistics setOutOctets:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutOctets:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setDiscontinuityTime:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setDiscontinuityTime:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInMulticastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInMulticastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setOutUnicastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutUnicastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInErrors:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInErrors:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setOutErrors:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutErrors:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setOutMulticastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutMulticastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInDiscards:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInDiscards:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInUnicastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInUnicastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setOutBroadcastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutBroadcastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setOutDiscards:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setOutDiscards:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInBroadcastPkts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInBroadcastPkts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInUnknownProtos:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInUnknownProtos:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [statistics setInOctets:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[statistics setInOctets:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStatistics
      [statistics getOutOctets];
      [statistics getDiscontinuityTime];
      [statistics getInMulticastPkts];
      [statistics getOutUnicastPkts];
      [statistics getInErrors];
      [statistics getOutErrors];
      [statistics getOutMulticastPkts];
      [statistics getInDiscards];
      [statistics getInUnicastPkts];
      [statistics getOutBroadcastPkts];
      [statistics getOutDiscards];
      [statistics getInBroadcastPkts];
      [statistics getInUnknownProtos];
      [statistics getInOctets];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"statistics toJson: %@", [statistics toJson]);
```
 
 */
@interface StructStatistics : NSObject


/**
 Designated initializer for StructStatistics either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStatistics if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for OutOctets.
 
 The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutOctets Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutOctets:(NSInteger)aOutOctets;

/**
 Setter for DiscontinuityTime.
 
 The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aDiscontinuityTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDiscontinuityTime:(NSString *)aDiscontinuityTime;

/**
 Setter for InMulticastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInMulticastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInMulticastPkts:(NSInteger)aInMulticastPkts;

/**
 Setter for OutUnicastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutUnicastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutUnicastPkts:(NSInteger)aOutUnicastPkts;

/**
 Setter for InErrors.
 
 For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInErrors Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInErrors:(NSInteger)aInErrors;

/**
 Setter for OutErrors.
 
 For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.




Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutErrors Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutErrors:(NSInteger)aOutErrors;

/**
 Setter for OutMulticastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutMulticastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutMulticastPkts:(NSInteger)aOutMulticastPkts;

/**
 Setter for InDiscards.
 
 The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInDiscards Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInDiscards:(NSInteger)aInDiscards;

/**
 Setter for InUnicastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInUnicastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInUnicastPkts:(NSInteger)aInUnicastPkts;

/**
 Setter for OutBroadcastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutBroadcastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutBroadcastPkts:(NSInteger)aOutBroadcastPkts;

/**
 Setter for OutDiscards.
 
 The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aOutDiscards Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOutDiscards:(NSInteger)aOutDiscards;

/**
 Setter for InBroadcastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInBroadcastPkts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInBroadcastPkts:(NSInteger)aInBroadcastPkts;

/**
 Setter for InUnknownProtos.
 
 For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInUnknownProtos Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInUnknownProtos:(NSInteger)aInUnknownProtos;

/**
 Setter for InOctets.
 
 The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @param aInOctets Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInOctets:(NSInteger)aInOctets;


/**
 Getter for OutOctets.
 
 The total number of octets transmitted out of the
interface, including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutOctets;

/**
 Getter for DiscontinuityTime.
 
 The time on the most recent occasion at which any one or
more of this interface's counters suffered a
discontinuity.  If no such discontinuities have occurred
since the last re-initialization of the local management
subsystem, then this node contains the time the local
management subsystem re-initialized itself.
 
 @return NSString * The value of property.
 */
- (NSString *)getDiscontinuityTime;

/**
 Getter for InMulticastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a multicast
address at this sub-layer.  For a MAC-layer protocol,
this includes both Group and Functional addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInMulticastPkts;

/**
 Getter for OutUnicastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were not addressed
to a multicast or broadcast address at this sub-layer,
including those that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutUnicastPkts;

/**
 Getter for InErrors.
 
 For packet-oriented interfaces, the number of inbound
packets that contained errors preventing them from being
deliverable to a higher-layer protocol.  For character-
oriented or fixed-length interfaces, the number of
inbound transmission units that contained errors
preventing them from being deliverable to a higher-layer
protocol.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInErrors;

/**
 Getter for OutErrors.
 
 For packet-oriented interfaces, the number of outbound
packets that could not be transmitted because of errors.
For character-oriented or fixed-length interfaces, the
number of outbound transmission units that could not be
transmitted because of errors.




Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutErrors;

/**
 Getter for OutMulticastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
multicast address at this sub-layer, including those
that were discarded or not sent.  For a MAC-layer
protocol, this includes both Group and Functional
addresses.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutMulticastPkts;

/**
 Getter for InDiscards.
 
 The number of inbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being deliverable to a higher-layer
protocol.  One possible reason for discarding such a
packet could be to free up buffer space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInDiscards;

/**
 Getter for InUnicastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were not addressed to a
multicast or broadcast address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInUnicastPkts;

/**
 Getter for OutBroadcastPkts.
 
 The total number of packets that higher-level protocols
requested be transmitted, and that were addressed to a
broadcast address at this sub-layer, including those
that were discarded or not sent.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutBroadcastPkts;

/**
 Getter for OutDiscards.
 
 The number of outbound packets that were chosen to be
discarded even though no errors had been detected to
prevent their being transmitted.  One possible reason
for discarding such a packet could be to free up buffer
space.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getOutDiscards;

/**
 Getter for InBroadcastPkts.
 
 The number of packets, delivered by this sub-layer to a
higher (sub-)layer, that were addressed to a broadcast
address at this sub-layer.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInBroadcastPkts;

/**
 Getter for InUnknownProtos.
 
 For packet-oriented interfaces, the number of packets
received via the interface that were discarded because
of an unknown or unsupported protocol.  For
character-oriented or fixed-length interfaces that
support protocol multiplexing, the number of
transmission units received via the interface that were
discarded because of an unknown or unsupported protocol.
For any interface that does not support protocol
multiplexing, this counter is not present.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInUnknownProtos;

/**
 Getter for InOctets.
 
 The total number of octets received on the interface,
including framing characters.

Discontinuities in the value of this counter can occur
at re-initialization of the management system, and at
other times as indicated by the value of
'discontinuity-time'.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getInOctets;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIpPrefixLength

/**
 StructCaseIpPrefixLength, as in YANG: __case_ip:prefix-length__.
 
 Detailed Description: <b>ip:prefix-length</b>(in YANG) is a case of choice: ip:subnet
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet -> case_ip:prefix-length
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet -> case_ip:prefix-length
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIpPrefixLength example:
      StructCaseIpPrefixLength *caseIpPrefixLength = [[StructCaseIpPrefixLength alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIpPrefixLength init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIpPrefixLength) {
        NSLog(@"caseIpPrefixLength is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIpPrefixLength init successful! toJson: %@", [caseIpPrefixLength toJson]);
      NSLog(@"caseIpPrefixLength validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIpPrefixLength validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIpPrefixLength
      if ((error = [caseIpPrefixLength setIpPrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[caseIpPrefixLength setIpPrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseIpPrefixLength
      [caseIpPrefixLength getIpPrefixLength];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIpPrefixLength toJson: %@", [caseIpPrefixLength toJson]);
```
 
 */
@interface StructCaseIpPrefixLength : NSObject


/**
 Designated initializer for StructCaseIpPrefixLength either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIpPrefixLength if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 Range:       0..32

 @param aIpPrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpPrefixLength:(NSInteger)aIpPrefixLength;


/**
 Getter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpPrefixLength;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIpNetmask

/**
 StructCaseIpNetmask, as in YANG: __case_ip:netmask__.
 
 Detailed Description: <b>ip:netmask</b>(in YANG) is a case of choice: ip:subnet
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet -> case_ip:netmask
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet -> case_ip:netmask
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIpNetmask example:
      StructCaseIpNetmask *caseIpNetmask = [[StructCaseIpNetmask alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIpNetmask init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIpNetmask) {
        NSLog(@"caseIpNetmask is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIpNetmask init successful! toJson: %@", [caseIpNetmask toJson]);
      NSLog(@"caseIpNetmask validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIpNetmask validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIpNetmask
      if ((error = [caseIpNetmask setIpNetmask:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseIpNetmask setIpNetmask:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseIpNetmask
      [caseIpNetmask getIpNetmask];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIpNetmask toJson: %@", [caseIpNetmask toJson]);
```
 
 */
@interface StructCaseIpNetmask : NSObject


/**
 Designated initializer for StructCaseIpNetmask either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIpNetmask if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpNetmask.
 
 The subnet specified as a netmask.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aIpNetmask Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpNetmask:(NSString *)aIpNetmask;


/**
 Getter for IpNetmask.
 
 The subnet specified as a netmask.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpNetmask;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpSubnet

/**
 StructIpSubnet, as in YANG: __ip:subnet__.
 
 Detailed Description: The subnet can be specified as a prefix-length, or,
if the server supports non-contiguous netmasks, as
a netmask.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element -> ip:subnet
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpSubnet example:
      StructIpSubnet *ipSubnet = [[StructIpSubnet alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipSubnet init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipSubnet) {
        NSLog(@"ipSubnet is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipSubnet init successful! toJson: %@", [ipSubnet toJson]);
      NSLog(@"ipSubnet validated result: %lu, 0 means it passes validation.", (unsigned long)[ipSubnet validate]);
      
      // -----------------------------------------------
      // Setters of StructIpSubnet
  
      // -----------------------------------------------
      // Getters of StructIpSubnet
      [ipSubnet getCaseIpPrefixLength];
      [ipSubnet getCaseIpNetmask];
      [ipSubnet getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipSubnet toJson: %@", [ipSubnet toJson]);
```
 
 */
@interface StructIpSubnet : NSObject

/**
 As in YANG: __case_ip:prefix-length__
 
 @see StructCaseIpPrefixLength
 */
@property (atomic, retain) StructCaseIpPrefixLength *caseIpPrefixLength;
/**
 As in YANG: __case_ip:netmask__
 
 @see StructCaseIpNetmask
 */
@property (atomic, retain) StructCaseIpNetmask *caseIpNetmask;

/**
 Designated initializer for StructIpSubnet either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpSubnet if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: ip:subnet, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCase)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: ip:subnet, was not in original defined YANG data model.
 
 @return EnumCurrentCase The value of property.
 */
- (EnumCurrentCase)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddressElement

/**
 StructIpAddressElement, as in YANG: __ip:address-element__.
 
 Detailed Description: The list of IPv4 addresses on the interface.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddressElement example:
      StructIpAddressElement *ipAddressElement = [[StructIpAddressElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddressElement) {
        NSLog(@"ipAddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddressElement init successful! toJson: %@", [ipAddressElement toJson]);
      NSLog(@"ipAddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddressElement
      if ((error = [ipAddressElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAddressElement
      [ipAddressElement getIpOrigin];
      [ipAddressElement getIpIp];
      [ipAddressElement getIpSubnet];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddressElement toJson: %@", [ipAddressElement toJson]);
```
 
 */
@interface StructIpAddressElement : NSObject

/**
 As in YANG: __ip:subnet__
 
 @see StructIpSubnet
 */
@property (atomic, retain) StructIpSubnet *ipSubnet;

/**
 Designated initializer for StructIpAddressElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddressElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpOrigin.
 
 The origin of this address.
 
 @param aIpOrigin Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpOrigin:(EnumIpAddressOrigin)aIpOrigin;

/**
 Setter for IpIp.
 
 The IPv4 address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;


/**
 Getter for IpOrigin.
 
 The origin of this address.
 
 @return EnumIpAddressOrigin The value of property.
 */
- (EnumIpAddressOrigin)getIpOrigin;

/**
 Getter for IpIp.
 
 The IPv4 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpNeighborElement

/**
 StructIpNeighborElement, as in YANG: __ip:neighbor-element__.
 
 Detailed Description: A list of mappings from IPv4 addresses to
link-layer addresses.

This list represents the ARP Cache.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4 -> ip:neighbor -> ip:neighbor-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpNeighborElement example:
      StructIpNeighborElement *ipNeighborElement = [[StructIpNeighborElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipNeighborElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipNeighborElement) {
        NSLog(@"ipNeighborElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipNeighborElement init successful! toJson: %@", [ipNeighborElement toJson]);
      NSLog(@"ipNeighborElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipNeighborElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpNeighborElement
      if ((error = [ipNeighborElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipNeighborElement setIpLinkLayerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpLinkLayerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpNeighborElement
      [ipNeighborElement getIpOrigin];
      [ipNeighborElement getIpIp];
      [ipNeighborElement getIpLinkLayerAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipNeighborElement toJson: %@", [ipNeighborElement toJson]);
```
 
 */
@interface StructIpNeighborElement : NSObject


/**
 Designated initializer for StructIpNeighborElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpNeighborElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpOrigin.
 
 The origin of this neighbor entry.
 
 @param aIpOrigin Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpOrigin:(EnumNeighborOrigin)aIpOrigin;

/**
 Setter for IpIp.
 
 The IPv4 address of the neighbor node.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;

/**
 Setter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aIpLinkLayerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpLinkLayerAddress:(NSString *)aIpLinkLayerAddress;


/**
 Getter for IpOrigin.
 
 The origin of this neighbor entry.
 
 @return EnumNeighborOrigin The value of property.
 */
- (EnumNeighborOrigin)getIpOrigin;

/**
 Getter for IpIp.
 
 The IPv4 address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;

/**
 Getter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpLinkLayerAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpIpv4

/**
 StructIpIpv4, as in YANG: __ip:ipv4__.
 
 Detailed Description: Interface-specific parameters for the IPv4 address family.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv4
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpIpv4 example:
      StructIpIpv4 *ipIpv4 = [[StructIpIpv4 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipIpv4 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipIpv4) {
        NSLog(@"ipIpv4 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipIpv4 init successful! toJson: %@", [ipIpv4 toJson]);
      NSLog(@"ipIpv4 validated result: %lu, 0 means it passes validation.", (unsigned long)[ipIpv4 validate]);
      
      // -----------------------------------------------
      // Setters of StructIpIpv4
      if ((error = [ipIpv4 setIpForwarding:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv4 setIpForwarding:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv4 setIpMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv4 setIpMtu:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpIpv4
      [ipIpv4 getIpForwarding];
      [ipIpv4 getIpMtu];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipIpv4 toJson: %@", [ipIpv4 toJson]);
```
 
 */
@interface StructIpIpv4 : NSObject

/**
 Array which contains StructIpAddressElement, as in YANG: __ip:address__
 
 Detailed Description: The list of IPv4 addresses on the interface.
 
 @see StructIpAddressElement
 */
@property (atomic, retain) NSMutableArray <StructIpAddressElement *> *ipAddress;
/**
 Array which contains StructIpNeighborElement, as in YANG: __ip:neighbor__
 
 Detailed Description: A list of mappings from IPv4 addresses to
link-layer addresses.

This list represents the ARP Cache.
 
 @see StructIpNeighborElement
 */
@property (atomic, retain) NSMutableArray <StructIpNeighborElement *> *ipNeighbor;

/**
 Designated initializer for StructIpIpv4 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpIpv4 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpForwarding.
 
 Indicates whether IPv4 packet forwarding is enabled or
disabled on this interface.
 
 @param aIpForwarding Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpForwarding:(BOOL)aIpForwarding;

/**
 Setter for IpMtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.
 
 Range:       68..max

 @param aIpMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpMtu:(NSInteger)aIpMtu;


/**
 Getter for IpForwarding.
 
 Indicates whether IPv4 packet forwarding is enabled or
disabled on this interface.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpForwarding;

/**
 Getter for IpMtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpMtu;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddressElementIpAddress

/**
 StructIpAddressElementIpAddress, as in YANG: __ip:address-element__.
 
 Detailed Description: The list of IPv6 addresses on the interface.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv6 -> ip:address -> ip:address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddressElementIpAddress example:
      StructIpAddressElementIpAddress *ipAddressElement = [[StructIpAddressElementIpAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddressElement) {
        NSLog(@"ipAddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddressElement init successful! toJson: %@", [ipAddressElement toJson]);
      NSLog(@"ipAddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddressElementIpAddress
      if ((error = [ipAddressElement setIpPrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpPrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipAddressElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAddressElementIpAddress
      [ipAddressElement getIpStatus];
      [ipAddressElement getIpOrigin];
      [ipAddressElement getIpPrefixLength];
      [ipAddressElement getIpIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddressElement toJson: %@", [ipAddressElement toJson]);
```
 
 */
@interface StructIpAddressElementIpAddress : NSObject


/**
 Designated initializer for StructIpAddressElementIpAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddressElementIpAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpStatus.
 
 The status of an address.  Most of the states correspond
to states from the IPv6 Stateless Address
Autoconfiguration protocol.
 
 @param aIpStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpStatus:(EnumIpStatus)aIpStatus;

/**
 Setter for IpOrigin.
 
 The origin of this address.
 
 @param aIpOrigin Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpOrigin:(EnumIpAddressOrigin)aIpOrigin;

/**
 Setter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 Range:       0..128

 @param aIpPrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpPrefixLength:(NSInteger)aIpPrefixLength;

/**
 Setter for IpIp.
 
 The IPv6 address on the interface.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;


/**
 Getter for IpStatus.
 
 The status of an address.  Most of the states correspond
to states from the IPv6 Stateless Address
Autoconfiguration protocol.
 
 @return EnumIpStatus The value of property.
 */
- (EnumIpStatus)getIpStatus;

/**
 Getter for IpOrigin.
 
 The origin of this address.
 
 @return EnumIpAddressOrigin The value of property.
 */
- (EnumIpAddressOrigin)getIpOrigin;

/**
 Getter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpPrefixLength;

/**
 Getter for IpIp.
 
 The IPv6 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpNeighborElementIpNeighbor

/**
 StructIpNeighborElementIpNeighbor, as in YANG: __ip:neighbor-element__.
 
 Detailed Description: A list of mappings from IPv6 addresses to
link-layer addresses.

This list represents the Neighbor Cache.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv6 -> ip:neighbor -> ip:neighbor-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpNeighborElementIpNeighbor example:
      StructIpNeighborElementIpNeighbor *ipNeighborElement = [[StructIpNeighborElementIpNeighbor alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipNeighborElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipNeighborElement) {
        NSLog(@"ipNeighborElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipNeighborElement init successful! toJson: %@", [ipNeighborElement toJson]);
      NSLog(@"ipNeighborElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipNeighborElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpNeighborElementIpNeighbor
      if ((error = [ipNeighborElement setIpLinkLayerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpLinkLayerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipNeighborElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpNeighborElementIpNeighbor
      [ipNeighborElement getIpIsRouter];
      [ipNeighborElement getIpLinkLayerAddress];
      [ipNeighborElement getIpOrigin];
      [ipNeighborElement getIpIp];
      [ipNeighborElement getIpState];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipNeighborElement toJson: %@", [ipNeighborElement toJson]);
```
 
 */
@interface StructIpNeighborElementIpNeighbor : NSObject


/**
 Designated initializer for StructIpNeighborElementIpNeighbor either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpNeighborElementIpNeighbor if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aIpLinkLayerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpLinkLayerAddress:(NSString *)aIpLinkLayerAddress;

/**
 Setter for IpOrigin.
 
 The origin of this neighbor entry.
 
 @param aIpOrigin Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpOrigin:(EnumNeighborOrigin)aIpOrigin;

/**
 Setter for IpIp.
 
 The IPv6 address of the neighbor node.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;

/**
 Setter for IpState.
 
 The Neighbor Unreachability Detection state of this
entry.
 
 @param aIpState Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpState:(EnumIpState)aIpState;


/**
 Getter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpLinkLayerAddress;

/**
 Getter for IpOrigin.
 
 The origin of this neighbor entry.
 
 @return EnumNeighborOrigin The value of property.
 */
- (EnumNeighborOrigin)getIpOrigin;

/**
 Getter for IpIp.
 
 The IPv6 address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;

/**
 Getter for IpState.
 
 The Neighbor Unreachability Detection state of this
entry.
 
 @return EnumIpState The value of property.
 */
- (EnumIpState)getIpState;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpIpv6

/**
 StructIpIpv6, as in YANG: __ip:ipv6__.
 
 Detailed Description: Parameters for the IPv6 address family.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element -> ip:ipv6
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpIpv6 example:
      StructIpIpv6 *ipIpv6 = [[StructIpIpv6 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipIpv6 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipIpv6) {
        NSLog(@"ipIpv6 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipIpv6 init successful! toJson: %@", [ipIpv6 toJson]);
      NSLog(@"ipIpv6 validated result: %lu, 0 means it passes validation.", (unsigned long)[ipIpv6 validate]);
      
      // -----------------------------------------------
      // Setters of StructIpIpv6
      if ((error = [ipIpv6 setIpForwarding:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpForwarding:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv6 setIpMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpMtu:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpIpv6
      [ipIpv6 getIpForwarding];
      [ipIpv6 getIpMtu];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipIpv6 toJson: %@", [ipIpv6 toJson]);
```
 
 */
@interface StructIpIpv6 : NSObject

/**
 Array which contains StructIpAddressElementIpAddress, as in YANG: __ip:address__
 
 Detailed Description: The list of IPv6 addresses on the interface.
 
 @see StructIpAddressElementIpAddress
 */
@property (atomic, retain) NSMutableArray <StructIpAddressElementIpAddress *> *ipAddress;
/**
 Array which contains StructIpNeighborElementIpNeighbor, as in YANG: __ip:neighbor__
 
 Detailed Description: A list of mappings from IPv6 addresses to
link-layer addresses.

This list represents the Neighbor Cache.
 
 @see StructIpNeighborElementIpNeighbor
 */
@property (atomic, retain) NSMutableArray <StructIpNeighborElementIpNeighbor *> *ipNeighbor;

/**
 Designated initializer for StructIpIpv6 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpIpv6 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpForwarding.
 
 Indicates whether IPv6 packet forwarding is enabled or
disabled on this interface.
 
 @param aIpForwarding Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpForwarding:(BOOL)aIpForwarding;

/**
 Setter for IpMtu.
 
 The size, in octets, of the largest IPv6 packet that the
interface will send and receive.
 
 Range:       1280..max

 @param aIpMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpMtu:(NSInteger)aIpMtu;


/**
 Getter for IpForwarding.
 
 Indicates whether IPv6 packet forwarding is enabled or
disabled on this interface.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpForwarding;

/**
 Getter for IpMtu.
 
 The size, in octets, of the largest IPv6 packet that the
interface will send and receive.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpMtu;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInterfaceElement

/**
 StructInterfaceElement, as in YANG: __interface-element__.
 
 Detailed Description: The list of interfaces on the device.

System-controlled interfaces created by the system are
always present in this list, whether they are configured or
not.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state -> interface -> interface-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInterfaceElement example:
      StructInterfaceElement *interfaceElement = [[StructInterfaceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"interfaceElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!interfaceElement) {
        NSLog(@"interfaceElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"interfaceElement init successful! toJson: %@", [interfaceElement toJson]);
      NSLog(@"interfaceElement validated result: %lu, 0 means it passes validation.", (unsigned long)[interfaceElement validate]);
      
      // -----------------------------------------------
      // Setters of StructInterfaceElement
      if ((error = [interfaceElement setIfSsidPinCode:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidPinCode:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      [interfaceElement.lowerLayerIf addObject:@"abc"];
      if ((error = [interfaceElement setLastChange:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setLastChange:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setSpeed:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setSpeed:1234] failed, error: %lu", (unsigned long)error);
      }
      [interfaceElement.higherLayerIf addObject:@"abc"];
      if ((error = [interfaceElement setIfRadioEnabledByHwButton:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfRadioEnabledByHwButton:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidSsid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidSsid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setPhysAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setPhysAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfRadioChannel:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfRadioChannel:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfIndex:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfIndex:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInterfaceElement
      [interfaceElement getIfEthernetEthernet];
      [interfaceElement getIfSsidPinCode];
      [interfaceElement getIfPppEncryptionProtocol];
      for (NSString *o in interfaceElement.lowerLayerIf) {
          NSLog(@"element in interfaceElement.lowerLayerIf: %@", o);
      }
      [interfaceElement getIfSsidEndPointStats];
      [interfaceElement getLastChange];
      [interfaceElement getSpeed];
      [interfaceElement getStatistics];
      for (NSString *o in interfaceElement.higherLayerIf) {
          NSLog(@"element in interfaceElement.higherLayerIf: %@", o);
      }
      [interfaceElement getIfPppAuthenticationProtocol];
      [interfaceElement getOperStatus];
      [interfaceElement getIfRadioOperatingFrequencyBand];
      [interfaceElement getIfRadioEnabledByHwButton];
      [interfaceElement getIfPppConnectionStatus];
      [interfaceElement getIpIpv4];
      [interfaceElement getIfSsidSsid];
      [interfaceElement getIpIpv6];
      [interfaceElement getAdminStatus];
      [interfaceElement getIfSsidWpsConfigured];
      [interfaceElement getName];
      [interfaceElement getType];
      [interfaceElement getPhysAddress];
      [interfaceElement getIfPppCompressionProtocol];
      [interfaceElement getIfRadioChannel];
      [interfaceElement getIfIndex];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"interfaceElement toJson: %@", [interfaceElement toJson]);
```
 
 */
@interface StructInterfaceElement : NSObject

/**
 As in YANG: __if-ethernet:ethernet__
 
 @see StructIfEthernetEthernet
 */
@property (atomic, retain) StructIfEthernetEthernet *ifEthernetEthernet;
/**
 Array which contains NSString, as in YANG: __lower-layer-if__
 
 Detailed Description: A list of references to interfaces layered underneath this
interface.
 
 @see NSString
 */
@property (atomic, retain) NSMutableArray <NSString *> *lowerLayerIf;
/**
 As in YANG: __if-ssid:end-point-stats__
 
 @see StructIfSsidEndPointStats
 */
@property (atomic, retain) StructIfSsidEndPointStats *ifSsidEndPointStats;
/**
 Array which contains StructIfSsidClientListElement, as in YANG: __if-ssid:client-list__
 
 Detailed Description: Wireless client list.
 
 @see StructIfSsidClientListElement
 */
@property (atomic, retain) NSMutableArray <StructIfSsidClientListElement *> *ifSsidClientList;
/**
 As in YANG: __statistics__
 
 @see StructStatistics
 */
@property (atomic, retain) StructStatistics *statistics;
/**
 Array which contains NSString, as in YANG: __higher-layer-if__
 
 Detailed Description: A list of references to interfaces layered on top of this
interface.
 
 @see NSString
 */
@property (atomic, retain) NSMutableArray <NSString *> *higherLayerIf;
/**
 As in YANG: __ip:ipv4__
 
 @see StructIpIpv4
 */
@property (atomic, retain) StructIpIpv4 *ipIpv4;
/**
 As in YANG: __ip:ipv6__
 
 @see StructIpIpv6
 */
@property (atomic, retain) StructIpIpv6 *ipIpv6;

/**
 Designated initializer for StructInterfaceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInterfaceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidPinCode.
 
 The WPS PIN code of this device.
 
 Length:      8

 Pattern:     ^([0-9]*)$

 @param aIfSsidPinCode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidPinCode:(NSString *)aIfSsidPinCode;

/**
 Setter for IfPppEncryptionProtocol.
 
 Describes the PPP encryption protocol.
 
 @param aIfPppEncryptionProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppEncryptionProtocol:(EnumIfPppEncryptionProtocol)aIfPppEncryptionProtocol;

/**
 Setter for LastChange.
 
 The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aLastChange Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLastChange:(NSString *)aLastChange;

/**
 Setter for Speed.
 
 An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can
be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
 
 @param aSpeed Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSpeed:(NSInteger)aSpeed;

/**
 Setter for IfPppAuthenticationProtocol.
 
 Describes the PPP authentication protocol.
 
 @param aIfPppAuthenticationProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppAuthenticationProtocol:(EnumIfPppAuthenticationProtocol)aIfPppAuthenticationProtocol;

/**
 Setter for OperStatus.
 
 The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
 
 @param aOperStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOperStatus:(EnumOperStatus)aOperStatus;

/**
 Setter for IfRadioOperatingFrequencyBand.
 
 The frequency band of this radio.
 
 @param aIfRadioOperatingFrequencyBand Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioOperatingFrequencyBand:(EnumWifiTypesRadioBand)aIfRadioOperatingFrequencyBand;

/**
 Setter for IfRadioEnabledByHwButton.
 
 The radio is on/off by hardware button.
 
 @param aIfRadioEnabledByHwButton Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioEnabledByHwButton:(BOOL)aIfRadioEnabledByHwButton;

/**
 Setter for IfPppConnectionStatus.
 
 Current status of this connection.
 
 @param aIfPppConnectionStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppConnectionStatus:(EnumIfPppConnectionStatus)aIfPppConnectionStatus;

/**
 Setter for IfSsidSsid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless LAN
that functions as an ID for joining a particular radio network (BSS).
 
 Length:      1..32

 Pattern:     ^([0-9a-zA-Z`~!@#$%\^&*()\-+={};:'<>,\./_\|\[\]"?\\ ]*)$

 @param aIfSsidSsid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSsid:(NSString *)aIfSsidSsid;

/**
 Setter for AdminStatus.
 
 The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
 
 @param aAdminStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAdminStatus:(EnumAdminStatus)aAdminStatus;

/**
 Setter for IfSsidWpsConfigured.
 
 WPS configure status.
 
 @param aIfSsidWpsConfigured Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidWpsConfigured:(EnumIfSsidWpsConfigured)aIfSsidWpsConfigured;

/**
 Setter for Name.
 
 The name of the interface.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Type.
 
 The type of the interface.
 
 @param aType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setType:(NSString *)aType;

/**
 Setter for PhysAddress.
 
 The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit


and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aPhysAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPhysAddress:(NSString *)aPhysAddress;

/**
 Setter for IfPppCompressionProtocol.
 
 Describes the PPP compression protocol.
 
 @param aIfPppCompressionProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppCompressionProtocol:(EnumIfPppCompressionProtocol)aIfPppCompressionProtocol;

/**
 Setter for IfRadioChannel.
 
 The channel of this radio.
 
 @param aIfRadioChannel Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioChannel:(NSInteger)aIfRadioChannel;

/**
 Setter for IfIndex.
 
 The ifIndex value for the ifEntry represented by this
interface.
 
 Range:       1..2147483647

 @param aIfIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfIndex:(NSInteger)aIfIndex;


/**
 Getter for IfSsidPinCode.
 
 The WPS PIN code of this device.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidPinCode;

/**
 Getter for IfPppEncryptionProtocol.
 
 Describes the PPP encryption protocol.
 
 @return EnumIfPppEncryptionProtocol The value of property.
 */
- (EnumIfPppEncryptionProtocol)getIfPppEncryptionProtocol;

/**
 Getter for LastChange.
 
 The time the interface entered its current operational
state.  If the current state was entered prior to the
last re-initialization of the local network management
subsystem, then this node is not present.
 
 @return NSString * The value of property.
 */
- (NSString *)getLastChange;

/**
 Getter for Speed.
 
 An estimate of the interface's current bandwidth in bits
per second.  For interfaces that do not vary in
bandwidth or for those where no accurate estimation can
be made, this node should contain the nominal bandwidth.
For interfaces that have no concept of bandwidth, this
node is not present.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getSpeed;

/**
 Getter for IfPppAuthenticationProtocol.
 
 Describes the PPP authentication protocol.
 
 @return EnumIfPppAuthenticationProtocol The value of property.
 */
- (EnumIfPppAuthenticationProtocol)getIfPppAuthenticationProtocol;

/**
 Getter for OperStatus.
 
 The current operational state of the interface.

This leaf has the same semantics as ifOperStatus.
 
 @return EnumOperStatus The value of property.
 */
- (EnumOperStatus)getOperStatus;

/**
 Getter for IfRadioOperatingFrequencyBand.
 
 The frequency band of this radio.
 
 @return EnumWifiTypesRadioBand The value of property.
 */
- (EnumWifiTypesRadioBand)getIfRadioOperatingFrequencyBand;

/**
 Getter for IfRadioEnabledByHwButton.
 
 The radio is on/off by hardware button.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfRadioEnabledByHwButton;

/**
 Getter for IfPppConnectionStatus.
 
 Current status of this connection.
 
 @return EnumIfPppConnectionStatus The value of property.
 */
- (EnumIfPppConnectionStatus)getIfPppConnectionStatus;

/**
 Getter for IfSsidSsid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless LAN
that functions as an ID for joining a particular radio network (BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidSsid;

/**
 Getter for AdminStatus.
 
 The desired state of the interface.

This leaf has the same read semantics as ifAdminStatus.
 
 @return EnumAdminStatus The value of property.
 */
- (EnumAdminStatus)getAdminStatus;

/**
 Getter for IfSsidWpsConfigured.
 
 WPS configure status.
 
 @return EnumIfSsidWpsConfigured The value of property.
 */
- (EnumIfSsidWpsConfigured)getIfSsidWpsConfigured;

/**
 Getter for Name.
 
 The name of the interface.

A server implementation MAY map this leaf to the ifName
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and ifName.  The definition of
such a mechanism is outside the scope of this document.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Type.
 
 The type of the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getType;

/**
 Getter for PhysAddress.
 
 The interface's address at its protocol sub-layer.  For
example, for an 802.x interface, this object normally
contains a Media Access Control (MAC) address.  The
interface's media-specific modules must define the bit


and byte ordering and the format of the value of this
object.  For interfaces that do not have such an address
(e.g., a serial line), this node is not present.
 
 @return NSString * The value of property.
 */
- (NSString *)getPhysAddress;

/**
 Getter for IfPppCompressionProtocol.
 
 Describes the PPP compression protocol.
 
 @return EnumIfPppCompressionProtocol The value of property.
 */
- (EnumIfPppCompressionProtocol)getIfPppCompressionProtocol;

/**
 Getter for IfRadioChannel.
 
 The channel of this radio.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfRadioChannel;

/**
 Getter for IfIndex.
 
 The ifIndex value for the ifEntry represented by this
interface.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfIndex;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInterfacesState

/**
 StructInterfacesState, as in YANG: __interfaces-state__.
 
 Detailed Description: Data nodes for the operational state of interfaces.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces-state

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInterfacesState example:
      StructInterfacesState *interfacesState = [[StructInterfacesState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"interfacesState init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!interfacesState) {
        NSLog(@"interfacesState is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"interfacesState init successful! toJson: %@", [interfacesState toJson]);
      NSLog(@"interfacesState validated result: %lu, 0 means it passes validation.", (unsigned long)[interfacesState validate]);
      
      // -----------------------------------------------
      // Setters of StructInterfacesState
  
      // -----------------------------------------------
      // Getters of StructInterfacesState
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"interfacesState toJson: %@", [interfacesState toJson]);
```
 
 */
@interface StructInterfacesState : NSObject

/**
 Array which contains StructInterfaceElement, as in YANG: __interface__
 
 Detailed Description: The list of interfaces on the device.

System-controlled interfaces created by the system are
always present in this list, whether they are configured or
not.
 
 @see StructInterfaceElement
 */
@property (atomic, retain) NSMutableArray <StructInterfaceElement *> *interface;

/**
 Designated initializer for StructInterfacesState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInterfacesState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIfEthernetAuto

/**
 StructCaseIfEthernetAuto, as in YANG: __case_if-ethernet:auto__.
 
 Detailed Description: <b>if-ethernet:auto</b>(in YANG) is a case of choice: if-ethernet:transmission-params
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ethernet:ethernet -> if-ethernet:transmission-params -> case_if-ethernet:auto
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIfEthernetAuto example:
      StructCaseIfEthernetAuto *caseIfEthernetAuto = [[StructCaseIfEthernetAuto alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIfEthernetAuto init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIfEthernetAuto) {
        NSLog(@"caseIfEthernetAuto is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIfEthernetAuto init successful! toJson: %@", [caseIfEthernetAuto toJson]);
      NSLog(@"caseIfEthernetAuto validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIfEthernetAuto validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIfEthernetAuto
  
      // -----------------------------------------------
      // Getters of StructCaseIfEthernetAuto
      [caseIfEthernetAuto getIfEthernetAutoNegotiate];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIfEthernetAuto toJson: %@", [caseIfEthernetAuto toJson]);
```
 
 */
@interface StructCaseIfEthernetAuto : NSObject


/**
 Designated initializer for StructCaseIfEthernetAuto either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIfEthernetAuto if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIfEthernetManual

/**
 StructCaseIfEthernetManual, as in YANG: __case_if-ethernet:manual__.
 
 Detailed Description: <b>if-ethernet:manual</b>(in YANG) is a case of choice: if-ethernet:transmission-params
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ethernet:ethernet -> if-ethernet:transmission-params -> case_if-ethernet:manual
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIfEthernetManual example:
      StructCaseIfEthernetManual *caseIfEthernetManual = [[StructCaseIfEthernetManual alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIfEthernetManual init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIfEthernetManual) {
        NSLog(@"caseIfEthernetManual is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIfEthernetManual init successful! toJson: %@", [caseIfEthernetManual toJson]);
      NSLog(@"caseIfEthernetManual validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIfEthernetManual validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIfEthernetManual
  
      // -----------------------------------------------
      // Getters of StructCaseIfEthernetManual
      [caseIfEthernetManual getIfEthernetSpeed];
      [caseIfEthernetManual getIfEthernetDuplex];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIfEthernetManual toJson: %@", [caseIfEthernetManual toJson]);
```
 
 */
@interface StructCaseIfEthernetManual : NSObject


/**
 Designated initializer for StructCaseIfEthernetManual either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIfEthernetManual if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfEthernetSpeed.
 
 Manually Set the speed.
 
 @param aIfEthernetSpeed Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfEthernetSpeed:(EnumIfEthernetSpeed)aIfEthernetSpeed;

/**
 Setter for IfEthernetDuplex.
 
 The duplex mode available to this connection.
 
 @param aIfEthernetDuplex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfEthernetDuplex:(EnumIfEthernetDuplex)aIfEthernetDuplex;


/**
 Getter for IfEthernetSpeed.
 
 Manually Set the speed.
 
 @return EnumIfEthernetSpeed The value of property.
 */
- (EnumIfEthernetSpeed)getIfEthernetSpeed;

/**
 Getter for IfEthernetDuplex.
 
 The duplex mode available to this connection.
 
 @return EnumIfEthernetDuplex The value of property.
 */
- (EnumIfEthernetDuplex)getIfEthernetDuplex;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfEthernetTransmissionParams

/**
 StructIfEthernetTransmissionParams, as in YANG: __if-ethernet:transmission-params__.
 
 Detailed Description: Transmission parameters.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ethernet:ethernet -> if-ethernet:transmission-params
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfEthernetTransmissionParams example:
      StructIfEthernetTransmissionParams *ifEthernetTransmissionParams = [[StructIfEthernetTransmissionParams alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifEthernetTransmissionParams init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifEthernetTransmissionParams) {
        NSLog(@"ifEthernetTransmissionParams is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifEthernetTransmissionParams init successful! toJson: %@", [ifEthernetTransmissionParams toJson]);
      NSLog(@"ifEthernetTransmissionParams validated result: %lu, 0 means it passes validation.", (unsigned long)[ifEthernetTransmissionParams validate]);
      
      // -----------------------------------------------
      // Setters of StructIfEthernetTransmissionParams
  
      // -----------------------------------------------
      // Getters of StructIfEthernetTransmissionParams
      [ifEthernetTransmissionParams getCaseIfEthernetAuto];
      [ifEthernetTransmissionParams getCaseIfEthernetManual];
      [ifEthernetTransmissionParams getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifEthernetTransmissionParams toJson: %@", [ifEthernetTransmissionParams toJson]);
```
 
 */
@interface StructIfEthernetTransmissionParams : NSObject

/**
 As in YANG: __case_if-ethernet:auto__
 
 @see StructCaseIfEthernetAuto
 */
@property (atomic, retain) StructCaseIfEthernetAuto *caseIfEthernetAuto;
/**
 As in YANG: __case_if-ethernet:manual__
 
 @see StructCaseIfEthernetManual
 */
@property (atomic, retain) StructCaseIfEthernetManual *caseIfEthernetManual;

/**
 Designated initializer for StructIfEthernetTransmissionParams either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfEthernetTransmissionParams if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: if-ethernet:transmission-params, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseIfEthernetTransmissionParams)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: if-ethernet:transmission-params, was not in original defined YANG data model.
 
 @return EnumCurrentCaseIfEthernetTransmissionParams The value of property.
 */
- (EnumCurrentCaseIfEthernetTransmissionParams)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfEthernetEthernetInterfaceElement

/**
 StructIfEthernetEthernetInterfaceElement, as in YANG: __if-ethernet:ethernet__.
 
 Detailed Description: Ethernet interface.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ethernet:ethernet
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfEthernetEthernetInterfaceElement example:
      StructIfEthernetEthernetInterfaceElement *ifEthernetEthernet = [[StructIfEthernetEthernetInterfaceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifEthernetEthernet init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifEthernetEthernet) {
        NSLog(@"ifEthernetEthernet is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifEthernetEthernet init successful! toJson: %@", [ifEthernetEthernet toJson]);
      NSLog(@"ifEthernetEthernet validated result: %lu, 0 means it passes validation.", (unsigned long)[ifEthernetEthernet validate]);
      
      // -----------------------------------------------
      // Setters of StructIfEthernetEthernetInterfaceElement
  
      // -----------------------------------------------
      // Getters of StructIfEthernetEthernetInterfaceElement
      [ifEthernetEthernet getIfEthernetTransmissionParams];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifEthernetEthernet toJson: %@", [ifEthernetEthernet toJson]);
```
 
 */
@interface StructIfEthernetEthernetInterfaceElement : NSObject

/**
 As in YANG: __if-ethernet:transmission-params__
 
 @see StructIfEthernetTransmissionParams
 */
@property (atomic, retain) StructIfEthernetTransmissionParams *ifEthernetTransmissionParams;

/**
 Designated initializer for StructIfEthernetEthernetInterfaceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfEthernetEthernetInterfaceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidWps

/**
 StructIfSsidWps, as in YANG: __if-ssid:wps__.
 
 Detailed Description: WiFi protected setting.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:wps
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidWps example:
      StructIfSsidWps *ifSsidWps = [[StructIfSsidWps alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidWps init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidWps) {
        NSLog(@"ifSsidWps is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidWps init successful! toJson: %@", [ifSsidWps toJson]);
      NSLog(@"ifSsidWps validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidWps validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidWps
      if ((error = [ifSsidWps setIfSsidEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidWps setIfSsidEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidWps setIfSsidPinCodeEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidWps setIfSsidPinCodeEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidWps
      [ifSsidWps getIfSsidEnabled];
      [ifSsidWps getIfSsidPinCodeEnabled];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidWps toJson: %@", [ifSsidWps toJson]);
```
 
 */
@interface StructIfSsidWps : NSObject


/**
 Designated initializer for StructIfSsidWps either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidWps if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidEnabled.
 
 Enable/Disable WPS function.
 
 @param aIfSsidEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidEnabled:(BOOL)aIfSsidEnabled;

/**
 Setter for IfSsidPinCodeEnabled.
 
 Enable to allow PIN configuration method.
 
 @param aIfSsidPinCodeEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidPinCodeEnabled:(BOOL)aIfSsidPinCodeEnabled;


/**
 Getter for IfSsidEnabled.
 
 Enable/Disable WPS function.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidEnabled;

/**
 Getter for IfSsidPinCodeEnabled.
 
 Enable to allow PIN configuration method.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidPinCodeEnabled;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidBandwidthControl

/**
 StructIfSsidBandwidthControl, as in YANG: __if-ssid:bandwidth-control__.
 
 Detailed Description: Bandwidth control.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:bandwidth-control
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidBandwidthControl example:
      StructIfSsidBandwidthControl *ifSsidBandwidthControl = [[StructIfSsidBandwidthControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidBandwidthControl init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidBandwidthControl) {
        NSLog(@"ifSsidBandwidthControl is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidBandwidthControl init successful! toJson: %@", [ifSsidBandwidthControl toJson]);
      NSLog(@"ifSsidBandwidthControl validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidBandwidthControl validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidBandwidthControl
      if ((error = [ifSsidBandwidthControl setIfSsidEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidBandwidthControl setIfSsidEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidBandwidthControl setIfSsidMaxBandwidth:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidBandwidthControl setIfSsidMaxBandwidth:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidBandwidthControl
      [ifSsidBandwidthControl getIfSsidEnabled];
      [ifSsidBandwidthControl getIfSsidMaxBandwidth];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidBandwidthControl toJson: %@", [ifSsidBandwidthControl toJson]);
```
 
 */
@interface StructIfSsidBandwidthControl : NSObject


/**
 Designated initializer for StructIfSsidBandwidthControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidBandwidthControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidEnabled.
 
 Turn on bandwidth management or not.
 
 @param aIfSsidEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidEnabled:(BOOL)aIfSsidEnabled;

/**
 Setter for IfSsidMaxBandwidth.
 
 Maximum bandwidth this SSID can use.
 
 @param aIfSsidMaxBandwidth Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidMaxBandwidth:(NSInteger)aIfSsidMaxBandwidth;


/**
 Getter for IfSsidEnabled.
 
 Turn on bandwidth management or not.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidEnabled;

/**
 Getter for IfSsidMaxBandwidth.
 
 Maximum bandwidth this SSID can use.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidMaxBandwidth;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddressElementIpAddressIpIpv4

/**
 StructIpAddressElementIpAddressIpIpv4, as in YANG: __ip:address-element__.
 
 Detailed Description: The list of configured IPv4 addresses on the interface.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4 -> ip:address -> ip:address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddressElementIpAddressIpIpv4 example:
      StructIpAddressElementIpAddressIpIpv4 *ipAddressElement = [[StructIpAddressElementIpAddressIpIpv4 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddressElement) {
        NSLog(@"ipAddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddressElement init successful! toJson: %@", [ipAddressElement toJson]);
      NSLog(@"ipAddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddressElementIpAddressIpIpv4
      if ((error = [ipAddressElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAddressElementIpAddressIpIpv4
      [ipAddressElement getIpIp];
      [ipAddressElement getIpSubnet];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddressElement toJson: %@", [ipAddressElement toJson]);
```
 
 */
@interface StructIpAddressElementIpAddressIpIpv4 : NSObject

/**
 As in YANG: __ip:subnet__
 
 @see StructIpSubnet
 */
@property (atomic, retain) StructIpSubnet *ipSubnet;

/**
 Designated initializer for StructIpAddressElementIpAddressIpIpv4 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddressElementIpAddressIpIpv4 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpIp.
 
 The IPv4 address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;


/**
 Getter for IpIp.
 
 The IPv4 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpNeighborElementIpNeighborIpIpv4

/**
 StructIpNeighborElementIpNeighborIpIpv4, as in YANG: __ip:neighbor-element__.
 
 Detailed Description: A list of mappings from IPv4 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
ARP Cache.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4 -> ip:neighbor -> ip:neighbor-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpNeighborElementIpNeighborIpIpv4 example:
      StructIpNeighborElementIpNeighborIpIpv4 *ipNeighborElement = [[StructIpNeighborElementIpNeighborIpIpv4 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipNeighborElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipNeighborElement) {
        NSLog(@"ipNeighborElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipNeighborElement init successful! toJson: %@", [ipNeighborElement toJson]);
      NSLog(@"ipNeighborElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipNeighborElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpNeighborElementIpNeighborIpIpv4
      if ((error = [ipNeighborElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipNeighborElement setIpLinkLayerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpLinkLayerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpNeighborElementIpNeighborIpIpv4
      [ipNeighborElement getIpIp];
      [ipNeighborElement getIpLinkLayerAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipNeighborElement toJson: %@", [ipNeighborElement toJson]);
```
 
 */
@interface StructIpNeighborElementIpNeighborIpIpv4 : NSObject


/**
 Designated initializer for StructIpNeighborElementIpNeighborIpIpv4 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpNeighborElementIpNeighborIpIpv4 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpIp.
 
 The IPv4 address of the neighbor node.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;

/**
 Setter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aIpLinkLayerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpLinkLayerAddress:(NSString *)aIpLinkLayerAddress;


/**
 Getter for IpIp.
 
 The IPv4 address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;

/**
 Getter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpLinkLayerAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpIpv4InterfaceElement

/**
 StructIpIpv4InterfaceElement, as in YANG: __ip:ipv4__.
 
 Detailed Description: Parameters for the IPv4 address family.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv4
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpIpv4InterfaceElement example:
      StructIpIpv4InterfaceElement *ipIpv4 = [[StructIpIpv4InterfaceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipIpv4 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipIpv4) {
        NSLog(@"ipIpv4 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipIpv4 init successful! toJson: %@", [ipIpv4 toJson]);
      NSLog(@"ipIpv4 validated result: %lu, 0 means it passes validation.", (unsigned long)[ipIpv4 validate]);
      
      // -----------------------------------------------
      // Setters of StructIpIpv4InterfaceElement
      if ((error = [ipIpv4 setIpEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv4 setIpEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv4 setIpForwarding:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv4 setIpForwarding:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv4 setIpMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv4 setIpMtu:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpIpv4InterfaceElement
      [ipIpv4 getIpEnabled];
      [ipIpv4 getIpForwarding];
      [ipIpv4 getIpMtu];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipIpv4 toJson: %@", [ipIpv4 toJson]);
```
 
 */
@interface StructIpIpv4InterfaceElement : NSObject

/**
 Array which contains StructIpAddressElementIpAddressIpIpv4, as in YANG: __ip:address__
 
 Detailed Description: The list of configured IPv4 addresses on the interface.
 
 @see StructIpAddressElementIpAddressIpIpv4
 */
@property (atomic, retain) NSMutableArray <StructIpAddressElementIpAddressIpIpv4 *> *ipAddress;
/**
 Array which contains StructIpNeighborElementIpNeighborIpIpv4, as in YANG: __ip:neighbor__
 
 Detailed Description: A list of mappings from IPv4 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
ARP Cache.
 
 @see StructIpNeighborElementIpNeighborIpIpv4
 */
@property (atomic, retain) NSMutableArray <StructIpNeighborElementIpNeighborIpIpv4 *> *ipNeighbor;

/**
 Designated initializer for StructIpIpv4InterfaceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpIpv4InterfaceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpEnabled.
 
 Controls whether IPv4 is enabled or disabled on this
interface.  When IPv4 is enabled, this interface is
connected to an IPv4 stack, and the interface can send
and receive IPv4 packets.
 
 @param aIpEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpEnabled:(BOOL)aIpEnabled;

/**
 Setter for IpForwarding.
 
 Controls IPv4 packet forwarding of datagrams received by,
but not addressed to, this interface.  IPv4 routers
forward datagrams.  IPv4 hosts do not (except those
source-routed via the host).
 
 @param aIpForwarding Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpForwarding:(BOOL)aIpForwarding;

/**
 Setter for IpMtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 Range:       68..max

 @param aIpMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpMtu:(NSInteger)aIpMtu;


/**
 Getter for IpEnabled.
 
 Controls whether IPv4 is enabled or disabled on this
interface.  When IPv4 is enabled, this interface is
connected to an IPv4 stack, and the interface can send
and receive IPv4 packets.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpEnabled;

/**
 Getter for IpForwarding.
 
 Controls IPv4 packet forwarding of datagrams received by,
but not addressed to, this interface.  IPv4 routers
forward datagrams.  IPv4 hosts do not (except those
source-routed via the host).
 
 @return BOOL The value of property.
 */
- (BOOL)getIpForwarding;

/**
 Getter for IpMtu.
 
 The size, in octets, of the largest IPv4 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpMtu;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAutoconf

/**
 StructIpAutoconf, as in YANG: __ip:autoconf__.
 
 Detailed Description: Parameters to control the autoconfiguration of IPv6
addresses, as described in RFC 4862.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv6 -> ip:autoconf
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAutoconf example:
      StructIpAutoconf *ipAutoconf = [[StructIpAutoconf alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAutoconf init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAutoconf) {
        NSLog(@"ipAutoconf is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAutoconf init successful! toJson: %@", [ipAutoconf toJson]);
      NSLog(@"ipAutoconf validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAutoconf validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAutoconf
      if ((error = [ipAutoconf setIpTemporaryValidLifetime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAutoconf setIpTemporaryValidLifetime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipAutoconf setIpCreateTemporaryAddresses:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAutoconf setIpCreateTemporaryAddresses:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipAutoconf setIpCreateGlobalAddresses:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAutoconf setIpCreateGlobalAddresses:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipAutoconf setIpTemporaryPreferredLifetime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAutoconf setIpTemporaryPreferredLifetime:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAutoconf
      [ipAutoconf getIpTemporaryValidLifetime];
      [ipAutoconf getIpCreateTemporaryAddresses];
      [ipAutoconf getIpCreateGlobalAddresses];
      [ipAutoconf getIpTemporaryPreferredLifetime];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAutoconf toJson: %@", [ipAutoconf toJson]);
```
 
 */
@interface StructIpAutoconf : NSObject


/**
 Designated initializer for StructIpAutoconf either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAutoconf if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpTemporaryValidLifetime.
 
 The time period during which the temporary address
is valid.
 
 @param aIpTemporaryValidLifetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpTemporaryValidLifetime:(NSInteger)aIpTemporaryValidLifetime;

/**
 Setter for IpCreateTemporaryAddresses.
 
 If enabled, the host creates temporary addresses as
described in RFC 4941.
 
 @param aIpCreateTemporaryAddresses Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpCreateTemporaryAddresses:(BOOL)aIpCreateTemporaryAddresses;

/**
 Setter for IpCreateGlobalAddresses.
 
 If enabled, the host creates global addresses as
described in RFC 4862.
 
 @param aIpCreateGlobalAddresses Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpCreateGlobalAddresses:(BOOL)aIpCreateGlobalAddresses;

/**
 Setter for IpTemporaryPreferredLifetime.
 
 The time period during which the temporary address is
preferred.
 
 @param aIpTemporaryPreferredLifetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpTemporaryPreferredLifetime:(NSInteger)aIpTemporaryPreferredLifetime;


/**
 Getter for IpTemporaryValidLifetime.
 
 The time period during which the temporary address
is valid.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpTemporaryValidLifetime;

/**
 Getter for IpCreateTemporaryAddresses.
 
 If enabled, the host creates temporary addresses as
described in RFC 4941.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpCreateTemporaryAddresses;

/**
 Getter for IpCreateGlobalAddresses.
 
 If enabled, the host creates global addresses as
described in RFC 4862.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpCreateGlobalAddresses;

/**
 Getter for IpTemporaryPreferredLifetime.
 
 The time period during which the temporary address is
preferred.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpTemporaryPreferredLifetime;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddressElementIpAddressIpIpv6

/**
 StructIpAddressElementIpAddressIpIpv6, as in YANG: __ip:address-element__.
 
 Detailed Description: The list of configured IPv6 addresses on the interface.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv6 -> ip:address -> ip:address-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddressElementIpAddressIpIpv6 example:
      StructIpAddressElementIpAddressIpIpv6 *ipAddressElement = [[StructIpAddressElementIpAddressIpIpv6 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddressElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddressElement) {
        NSLog(@"ipAddressElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddressElement init successful! toJson: %@", [ipAddressElement toJson]);
      NSLog(@"ipAddressElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddressElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddressElementIpAddressIpIpv6
      if ((error = [ipAddressElement setIpPrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpPrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipAddressElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipAddressElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpAddressElementIpAddressIpIpv6
      [ipAddressElement getIpPrefixLength];
      [ipAddressElement getIpIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddressElement toJson: %@", [ipAddressElement toJson]);
```
 
 */
@interface StructIpAddressElementIpAddressIpIpv6 : NSObject


/**
 Designated initializer for StructIpAddressElementIpAddressIpIpv6 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddressElementIpAddressIpIpv6 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 Range:       0..128

 @param aIpPrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpPrefixLength:(NSInteger)aIpPrefixLength;

/**
 Setter for IpIp.
 
 The IPv6 address on the interface.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;


/**
 Getter for IpPrefixLength.
 
 The length of the subnet prefix.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpPrefixLength;

/**
 Getter for IpIp.
 
 The IPv6 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpNeighborElementIpNeighborIpIpv6

/**
 StructIpNeighborElementIpNeighborIpIpv6, as in YANG: __ip:neighbor-element__.
 
 Detailed Description: A list of mappings from IPv6 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
Neighbor Cache.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv6 -> ip:neighbor -> ip:neighbor-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpNeighborElementIpNeighborIpIpv6 example:
      StructIpNeighborElementIpNeighborIpIpv6 *ipNeighborElement = [[StructIpNeighborElementIpNeighborIpIpv6 alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipNeighborElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipNeighborElement) {
        NSLog(@"ipNeighborElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipNeighborElement init successful! toJson: %@", [ipNeighborElement toJson]);
      NSLog(@"ipNeighborElement validated result: %lu, 0 means it passes validation.", (unsigned long)[ipNeighborElement validate]);
      
      // -----------------------------------------------
      // Setters of StructIpNeighborElementIpNeighborIpIpv6
      if ((error = [ipNeighborElement setIpIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipNeighborElement setIpLinkLayerAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ipNeighborElement setIpLinkLayerAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpNeighborElementIpNeighborIpIpv6
      [ipNeighborElement getIpIp];
      [ipNeighborElement getIpLinkLayerAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipNeighborElement toJson: %@", [ipNeighborElement toJson]);
```
 
 */
@interface StructIpNeighborElementIpNeighborIpIpv6 : NSObject


/**
 Designated initializer for StructIpNeighborElementIpNeighborIpIpv6 either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpNeighborElementIpNeighborIpIpv6 if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpIp.
 
 The IPv6 address of the neighbor node.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aIpIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpIp:(NSString *)aIpIp;

/**
 Setter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aIpLinkLayerAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpLinkLayerAddress:(NSString *)aIpLinkLayerAddress;


/**
 Getter for IpIp.
 
 The IPv6 address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpIp;

/**
 Getter for IpLinkLayerAddress.
 
 The link-layer address of the neighbor node.
 
 @return NSString * The value of property.
 */
- (NSString *)getIpLinkLayerAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpIpv6InterfaceElement

/**
 StructIpIpv6InterfaceElement, as in YANG: __ip:ipv6__.
 
 Detailed Description: Parameters for the IPv6 address family.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> ip:ipv6
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpIpv6InterfaceElement example:
      StructIpIpv6InterfaceElement *ipIpv6 = [[StructIpIpv6InterfaceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipIpv6 init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipIpv6) {
        NSLog(@"ipIpv6 is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipIpv6 init successful! toJson: %@", [ipIpv6 toJson]);
      NSLog(@"ipIpv6 validated result: %lu, 0 means it passes validation.", (unsigned long)[ipIpv6 validate]);
      
      // -----------------------------------------------
      // Setters of StructIpIpv6InterfaceElement
      if ((error = [ipIpv6 setIpEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv6 setIpForwarding:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpForwarding:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv6 setIpMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpMtu:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipIpv6 setIpDupAddrDetectTransmits:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipIpv6 setIpDupAddrDetectTransmits:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpIpv6InterfaceElement
      [ipIpv6 getIpAutoconf];
      [ipIpv6 getIpEnabled];
      [ipIpv6 getIpForwarding];
      [ipIpv6 getIpMtu];
      [ipIpv6 getIpDupAddrDetectTransmits];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipIpv6 toJson: %@", [ipIpv6 toJson]);
```
 
 */
@interface StructIpIpv6InterfaceElement : NSObject

/**
 As in YANG: __ip:autoconf__
 
 @see StructIpAutoconf
 */
@property (atomic, retain) StructIpAutoconf *ipAutoconf;
/**
 Array which contains StructIpAddressElementIpAddressIpIpv6, as in YANG: __ip:address__
 
 Detailed Description: The list of configured IPv6 addresses on the interface.
 
 @see StructIpAddressElementIpAddressIpIpv6
 */
@property (atomic, retain) NSMutableArray <StructIpAddressElementIpAddressIpIpv6 *> *ipAddress;
/**
 Array which contains StructIpNeighborElementIpNeighborIpIpv6, as in YANG: __ip:neighbor__
 
 Detailed Description: A list of mappings from IPv6 addresses to
link-layer addresses.

Entries in this list are used as static entries in the
Neighbor Cache.
 
 @see StructIpNeighborElementIpNeighborIpIpv6
 */
@property (atomic, retain) NSMutableArray <StructIpNeighborElementIpNeighborIpIpv6 *> *ipNeighbor;

/**
 Designated initializer for StructIpIpv6InterfaceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpIpv6InterfaceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpEnabled.
 
 Controls whether IPv6 is enabled or disabled on this
interface.  When IPv6 is enabled, this interface is
connected to an IPv6 stack, and the interface can send
and receive IPv6 packets.
 
 @param aIpEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpEnabled:(BOOL)aIpEnabled;

/**
 Setter for IpForwarding.
 
 Controls IPv6 packet forwarding of datagrams received by,
but not addressed to, this interface.  IPv6 routers
forward datagrams.  IPv6 hosts do not (except those
source-routed via the host).
 
 @param aIpForwarding Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpForwarding:(BOOL)aIpForwarding;

/**
 Setter for IpMtu.
 
 The size, in octets, of the largest IPv6 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 Range:       1280..max

 @param aIpMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpMtu:(NSInteger)aIpMtu;

/**
 Setter for IpDupAddrDetectTransmits.
 
 The number of consecutive Neighbor Solicitation messages
sent while performing Duplicate Address Detection on a
tentative address.  A value of zero indicates that
Duplicate Address Detection is not performed on
tentative addresses.  A value of one indicates a single
transmission with no follow-up retransmissions.
 
 @param aIpDupAddrDetectTransmits Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpDupAddrDetectTransmits:(NSInteger)aIpDupAddrDetectTransmits;


/**
 Getter for IpEnabled.
 
 Controls whether IPv6 is enabled or disabled on this
interface.  When IPv6 is enabled, this interface is
connected to an IPv6 stack, and the interface can send
and receive IPv6 packets.
 
 @return BOOL The value of property.
 */
- (BOOL)getIpEnabled;

/**
 Getter for IpForwarding.
 
 Controls IPv6 packet forwarding of datagrams received by,
but not addressed to, this interface.  IPv6 routers
forward datagrams.  IPv6 hosts do not (except those
source-routed via the host).
 
 @return BOOL The value of property.
 */
- (BOOL)getIpForwarding;

/**
 Getter for IpMtu.
 
 The size, in octets, of the largest IPv6 packet that the
interface will send and receive.

The server may restrict the allowed values for this leaf,
depending on the interface's type.

If this leaf is not configured, the operationally used MTU
depends on the interface's type.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpMtu;

/**
 Getter for IpDupAddrDetectTransmits.
 
 The number of consecutive Neighbor Solicitation messages
sent while performing Duplicate Address Detection on a
tentative address.  A value of zero indicates that
Duplicate Address Detection is not performed on
tentative addresses.  A value of one indicates a single
transmission with no follow-up retransmissions.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIpDupAddrDetectTransmits;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidEnterpriseSetting

/**
 StructIfSsidEnterpriseSetting, as in YANG: __if-ssid:enterprise-setting__.
 
 Detailed Description: Enterprise setting.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:enterprise-setting
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidEnterpriseSetting example:
      StructIfSsidEnterpriseSetting *ifSsidEnterpriseSetting = [[StructIfSsidEnterpriseSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidEnterpriseSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidEnterpriseSetting) {
        NSLog(@"ifSsidEnterpriseSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidEnterpriseSetting init successful! toJson: %@", [ifSsidEnterpriseSetting toJson]);
      NSLog(@"ifSsidEnterpriseSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidEnterpriseSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidEnterpriseSetting
      if ((error = [ifSsidEnterpriseSetting setIfSsidRadiusServerIpAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEnterpriseSetting setIfSsidRadiusServerIpAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidEnterpriseSetting setIfSsidRadiusSecret:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEnterpriseSetting setIfSsidRadiusSecret:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ifSsidEnterpriseSetting setIfSsidRadiusServerPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidEnterpriseSetting setIfSsidRadiusServerPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidEnterpriseSetting
      [ifSsidEnterpriseSetting getIfSsidRadiusServerIpAddress];
      [ifSsidEnterpriseSetting getIfSsidRadiusSecret];
      [ifSsidEnterpriseSetting getIfSsidRadiusServerPort];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidEnterpriseSetting toJson: %@", [ifSsidEnterpriseSetting toJson]);
```
 
 */
@interface StructIfSsidEnterpriseSetting : NSObject


/**
 Designated initializer for StructIfSsidEnterpriseSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidEnterpriseSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidRadiusServerIpAddress.
 
 The IPv4 address of the radius server.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIfSsidRadiusServerIpAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidRadiusServerIpAddress:(NSString *)aIfSsidRadiusServerIpAddress;

/**
 Setter for IfSsidRadiusSecret.
 
 The secret used for handshaking with the RADIUS server.
 
 @param aIfSsidRadiusSecret Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidRadiusSecret:(NSString *)aIfSsidRadiusSecret;

/**
 Setter for IfSsidRadiusServerPort.
 
 The port number of the radius server.
 
 @param aIfSsidRadiusServerPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidRadiusServerPort:(NSInteger)aIfSsidRadiusServerPort;


/**
 Getter for IfSsidRadiusServerIpAddress.
 
 The IPv4 address of the radius server.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidRadiusServerIpAddress;

/**
 Getter for IfSsidRadiusSecret.
 
 The secret used for handshaking with the RADIUS server.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidRadiusSecret;

/**
 Getter for IfSsidRadiusServerPort.
 
 The port number of the radius server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidRadiusServerPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIfSsidKeyPassphrase

/**
 StructCaseIfSsidKeyPassphrase, as in YANG: __case_if-ssid:key-passphrase__.
 
 Detailed Description: <b>if-ssid:key-passphrase</b>(in YANG) is a case of choice: if-ssid:psk
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:psk-setting -> if-ssid:psk -> case_if-ssid:key-passphrase
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIfSsidKeyPassphrase example:
      StructCaseIfSsidKeyPassphrase *caseIfSsidKeyPassphrase = [[StructCaseIfSsidKeyPassphrase alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIfSsidKeyPassphrase init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIfSsidKeyPassphrase) {
        NSLog(@"caseIfSsidKeyPassphrase is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIfSsidKeyPassphrase init successful! toJson: %@", [caseIfSsidKeyPassphrase toJson]);
      NSLog(@"caseIfSsidKeyPassphrase validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIfSsidKeyPassphrase validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIfSsidKeyPassphrase
      if ((error = [caseIfSsidKeyPassphrase setIfSsidKeyPassphrase:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseIfSsidKeyPassphrase setIfSsidKeyPassphrase:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseIfSsidKeyPassphrase
      [caseIfSsidKeyPassphrase getIfSsidKeyPassphrase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIfSsidKeyPassphrase toJson: %@", [caseIfSsidKeyPassphrase toJson]);
```
 
 */
@interface StructCaseIfSsidKeyPassphrase : NSObject


/**
 Designated initializer for StructCaseIfSsidKeyPassphrase either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIfSsidKeyPassphrase if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidKeyPassphrase.
 
 A passphrase from which the PreSharedKey is to be generated.
 
 Length:      8..63

 Pattern:     ^([a-zA-Z0-9 `~!@#$%\^&*()_\-+={}\|\\;:'<,>\./?"\[\]]*)$

 @param aIfSsidKeyPassphrase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidKeyPassphrase:(NSString *)aIfSsidKeyPassphrase;


/**
 Getter for IfSsidKeyPassphrase.
 
 A passphrase from which the PreSharedKey is to be generated.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidKeyPassphrase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseIfSsidPresharedkey

/**
 StructCaseIfSsidPresharedkey, as in YANG: __case_if-ssid:presharedkey__.
 
 Detailed Description: <b>if-ssid:presharedkey</b>(in YANG) is a case of choice: if-ssid:psk
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:psk-setting -> if-ssid:psk -> case_if-ssid:presharedkey
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseIfSsidPresharedkey example:
      StructCaseIfSsidPresharedkey *caseIfSsidPresharedkey = [[StructCaseIfSsidPresharedkey alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseIfSsidPresharedkey init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseIfSsidPresharedkey) {
        NSLog(@"caseIfSsidPresharedkey is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseIfSsidPresharedkey init successful! toJson: %@", [caseIfSsidPresharedkey toJson]);
      NSLog(@"caseIfSsidPresharedkey validated result: %lu, 0 means it passes validation.", (unsigned long)[caseIfSsidPresharedkey validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseIfSsidPresharedkey
      if ((error = [caseIfSsidPresharedkey setIfSsidPresharedkey:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseIfSsidPresharedkey setIfSsidPresharedkey:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseIfSsidPresharedkey
      [caseIfSsidPresharedkey getIfSsidPresharedkey];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseIfSsidPresharedkey toJson: %@", [caseIfSsidPresharedkey toJson]);
```
 
 */
@interface StructCaseIfSsidPresharedkey : NSObject


/**
 Designated initializer for StructCaseIfSsidPresharedkey either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseIfSsidPresharedkey if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidPresharedkey.
 
 A literal PreSharedKey (PSK) expressed as a hexadecimal string.
 
 Length:      64

 Pattern:     ^([0-9a-fA-F]{64})$

 @param aIfSsidPresharedkey Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidPresharedkey:(NSString *)aIfSsidPresharedkey;


/**
 Getter for IfSsidPresharedkey.
 
 A literal PreSharedKey (PSK) expressed as a hexadecimal string.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidPresharedkey;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidPsk

/**
 StructIfSsidPsk, as in YANG: __if-ssid:psk__.
 
 Detailed Description: Pre-shared key.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:psk-setting -> if-ssid:psk
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidPsk example:
      StructIfSsidPsk *ifSsidPsk = [[StructIfSsidPsk alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidPsk init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidPsk) {
        NSLog(@"ifSsidPsk is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidPsk init successful! toJson: %@", [ifSsidPsk toJson]);
      NSLog(@"ifSsidPsk validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidPsk validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidPsk
  
      // -----------------------------------------------
      // Getters of StructIfSsidPsk
      [ifSsidPsk getCaseIfSsidKeyPassphrase];
      [ifSsidPsk getCaseIfSsidPresharedkey];
      [ifSsidPsk getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidPsk toJson: %@", [ifSsidPsk toJson]);
```
 
 */
@interface StructIfSsidPsk : NSObject

/**
 As in YANG: __case_if-ssid:key-passphrase__
 
 @see StructCaseIfSsidKeyPassphrase
 */
@property (atomic, retain) StructCaseIfSsidKeyPassphrase *caseIfSsidKeyPassphrase;
/**
 As in YANG: __case_if-ssid:presharedkey__
 
 @see StructCaseIfSsidPresharedkey
 */
@property (atomic, retain) StructCaseIfSsidPresharedkey *caseIfSsidPresharedkey;

/**
 Designated initializer for StructIfSsidPsk either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidPsk if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: if-ssid:psk, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseIfSsidPsk)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: if-ssid:psk, was not in original defined YANG data model.
 
 @return EnumCurrentCaseIfSsidPsk The value of property.
 */
- (EnumCurrentCaseIfSsidPsk)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfSsidPskSetting

/**
 StructIfSsidPskSetting, as in YANG: __if-ssid:psk-setting__.
 
 Detailed Description: Pre-shared key setting.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-ssid:psk-setting
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfSsidPskSetting example:
      StructIfSsidPskSetting *ifSsidPskSetting = [[StructIfSsidPskSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifSsidPskSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifSsidPskSetting) {
        NSLog(@"ifSsidPskSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifSsidPskSetting init successful! toJson: %@", [ifSsidPskSetting toJson]);
      NSLog(@"ifSsidPskSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[ifSsidPskSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructIfSsidPskSetting
      if ((error = [ifSsidPskSetting setIfSsidReKeyInterval:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifSsidPskSetting setIfSsidReKeyInterval:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfSsidPskSetting
      [ifSsidPskSetting getIfSsidPsk];
      [ifSsidPskSetting getIfSsidReKeyInterval];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifSsidPskSetting toJson: %@", [ifSsidPskSetting toJson]);
```
 
 */
@interface StructIfSsidPskSetting : NSObject

/**
 As in YANG: __if-ssid:psk__
 
 @see StructIfSsidPsk
 */
@property (atomic, retain) StructIfSsidPsk *ifSsidPsk;

/**
 Designated initializer for StructIfSsidPskSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfSsidPskSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfSsidReKeyInterval.
 
 The interval (expressed in seconds) in which the keys are
re-generated.
 
 @param aIfSsidReKeyInterval Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidReKeyInterval:(NSInteger)aIfSsidReKeyInterval;


/**
 Getter for IfSsidReKeyInterval.
 
 The interval (expressed in seconds) in which the keys are
re-generated.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidReKeyInterval;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIfRadioChannel

/**
 StructIfRadioChannel, as in YANG: __if-radio:channel__.
 
 Detailed Description: The channel of this radio.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element -> if-radio:channel
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIfRadioChannel example:
      StructIfRadioChannel *ifRadioChannel = [[StructIfRadioChannel alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ifRadioChannel init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ifRadioChannel) {
        NSLog(@"ifRadioChannel is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ifRadioChannel init successful! toJson: %@", [ifRadioChannel toJson]);
      NSLog(@"ifRadioChannel validated result: %lu, 0 means it passes validation.", (unsigned long)[ifRadioChannel validate]);
      
      // -----------------------------------------------
      // Setters of StructIfRadioChannel
      if ((error = [ifRadioChannel setUnionOfWifiTypesChannel2g:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ifRadioChannel setUnionOfWifiTypesChannel2g:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIfRadioChannel
      [ifRadioChannel getUnionOfWifiTypesChannel2g];
      [ifRadioChannel getUnionOfWifiTypesChannel5g];
      [ifRadioChannel getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ifRadioChannel toJson: %@", [ifRadioChannel toJson]);
```
 
 */
@interface StructIfRadioChannel : NSObject


/**
 Designated initializer for StructIfRadioChannel either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIfRadioChannel if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfWifiTypesChannel2g.

 Range:       1..14

 @param aUnionOfWifiTypesChannel2g Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfWifiTypesChannel2g:(NSInteger)aUnionOfWifiTypesChannel2g;

/**
 Setter for UnionOfWifiTypesChannel5g.

 @param aUnionOfWifiTypesChannel5g Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfWifiTypesChannel5g:(EnumWifiTypesChannel5g)aUnionOfWifiTypesChannel5g;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: if-radio:channel, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemIfRadioChannel)aCurrentUnionItem;


/**
 Getter for UnionOfWifiTypesChannel2g.

 @return NSInteger The value of property.
 */
- (NSInteger)getUnionOfWifiTypesChannel2g;

/**
 Getter for UnionOfWifiTypesChannel5g.

 @return EnumWifiTypesChannel5g The value of property.
 */
- (EnumWifiTypesChannel5g)getUnionOfWifiTypesChannel5g;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: if-radio:channel, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemIfRadioChannel The value of property.
 */
- (EnumCurrentUnionItemIfRadioChannel)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInterfaceElementInterface

/**
 StructInterfaceElementInterface, as in YANG: __interface-element__.
 
 Detailed Description: The list of configured interfaces on the device.

The operational state of an interface is available in the
/interfaces-state/interface list.  If the configuration of a
system-controlled interface cannot be used by the system
(e.g., the interface hardware present does not match the
interface type), then the configuration is not applied to
the system-controlled interface shown in the
/interfaces-state/interface list.  If the configuration
of a user-controlled interface cannot be used by the system,
the configured interface is not instantiated in the
/interfaces-state/interface list.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces -> interface -> interface-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInterfaceElementInterface example:
      StructInterfaceElementInterface *interfaceElement = [[StructInterfaceElementInterface alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"interfaceElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!interfaceElement) {
        NSLog(@"interfaceElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"interfaceElement init successful! toJson: %@", [interfaceElement toJson]);
      NSLog(@"interfaceElement validated result: %lu, 0 means it passes validation.", (unsigned long)[interfaceElement validate]);
      
      // -----------------------------------------------
      // Setters of StructInterfaceElementInterface
      if ((error = [interfaceElement setIfRadioAutoChannel:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfRadioAutoChannel:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfRadioSupportChannelList:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfRadioSupportChannelList:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidPmfEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidPmfEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppMtu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppMtu:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidSsidHiddenEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidSsidHiddenEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidBaseInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidBaseInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidDfsEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidDfsEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidIntraBssTrafficBlocking:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidIntraBssTrafficBlocking:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppUsername:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppUsername:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidSsid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidSsid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppBaseInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppBaseInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppIdleDisconnectTime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppIdleDisconnectTime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppAutoConnectEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppAutoConnectEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidWmmEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidWmmEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfPppPppoeServiceName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfPppPppoeServiceName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidCtsrts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidCtsrts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfSsidFrag:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfSsidFrag:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [interfaceElement setIfRadioRegulatoryDomain:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[interfaceElement setIfRadioRegulatoryDomain:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInterfaceElementInterface
      [interfaceElement getIfEthernetEthernet];
      [interfaceElement getIfRadioAutoChannel];
      [interfaceElement getIfPppPassword];
      [interfaceElement getIfRadioSupportChannelList];
      [interfaceElement getIfSsidPmfEnable];
      [interfaceElement getIfPppMtu];
      [interfaceElement getIfRadioTransmitPower];
      [interfaceElement getIfRadioOperatingStandard];
      [interfaceElement getIfSsidSsidHiddenEnabled];
      [interfaceElement getIfSsidWps];
      [interfaceElement getIfSsidSecurity];
      [interfaceElement getIfSsidBaseInterface];
      [interfaceElement getIfSsidDfsEnable];
      [interfaceElement getIfSsidBandwidthControl];
      [interfaceElement getIfSsidIntraBssTrafficBlocking];
      [interfaceElement getIfPppUsername];
      [interfaceElement getType];
      [interfaceElement getIfRadioOperatingFrequencyBand];
      [interfaceElement getIpIpv4];
      [interfaceElement getIfSsidSsid];
      [interfaceElement getIpIpv6];
      [interfaceElement getIfPppBaseInterface];
      [interfaceElement getIfPppIdleDisconnectTime];
      [interfaceElement getIfSsidEnterpriseSetting];
      [interfaceElement getIfPppName];
      [interfaceElement getIfPppAutoConnectEnable];
      [interfaceElement getIfSsidSsidMode];
      [interfaceElement getIfSsidWmmEnable];
      [interfaceElement getIfPppPppoeServiceName];
      [interfaceElement getIfSsidCtsrts];
      [interfaceElement getName];
      [interfaceElement getIfSsidFrag];
      [interfaceElement getLinkUpDownTrapEnable];
      [interfaceElement getEnabled];
      [interfaceElement getIfSsidPskSetting];
      [interfaceElement getIfRadioChannel];
      [interfaceElement getIfRadioOperatingChannelBandwidth];
      [interfaceElement getIfRadioRegulatoryDomain];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"interfaceElement toJson: %@", [interfaceElement toJson]);
```
 
 */
@interface StructInterfaceElementInterface : NSObject

/**
 As in YANG: __if-ethernet:ethernet__
 
 @see StructIfEthernetEthernetInterfaceElement
 */
@property (atomic, retain) StructIfEthernetEthernetInterfaceElement *ifEthernetEthernet;
/**
 As in YANG: __if-ssid:wps__
 
 @see StructIfSsidWps
 */
@property (atomic, retain) StructIfSsidWps *ifSsidWps;
/**
 As in YANG: __if-ssid:bandwidth-control__
 
 @see StructIfSsidBandwidthControl
 */
@property (atomic, retain) StructIfSsidBandwidthControl *ifSsidBandwidthControl;
/**
 As in YANG: __ip:ipv4__
 
 @see StructIpIpv4InterfaceElement
 */
@property (atomic, retain) StructIpIpv4InterfaceElement *ipIpv4;
/**
 As in YANG: __ip:ipv6__
 
 @see StructIpIpv6InterfaceElement
 */
@property (atomic, retain) StructIpIpv6InterfaceElement *ipIpv6;
/**
 As in YANG: __if-ssid:enterprise-setting__
 
 @see StructIfSsidEnterpriseSetting
 */
@property (atomic, retain) StructIfSsidEnterpriseSetting *ifSsidEnterpriseSetting;
/**
 As in YANG: __if-ssid:psk-setting__
 
 @see StructIfSsidPskSetting
 */
@property (atomic, retain) StructIfSsidPskSetting *ifSsidPskSetting;
/**
 As in YANG: __if-radio:channel__
 
 @see StructIfRadioChannel
 */
@property (atomic, retain) StructIfRadioChannel *ifRadioChannel;

/**
 Designated initializer for StructInterfaceElementInterface either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInterfaceElementInterface if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IfRadioAutoChannel.
 
 Select channel automatically.
 
 @param aIfRadioAutoChannel Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioAutoChannel:(BOOL)aIfRadioAutoChannel;

/**
 Setter for IfPppPassword.
 
 Password to be used for authentication.
 
 @param aIfPppPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppPassword:(NSString *)aIfPppPassword;

/**
 Setter for IfRadioSupportChannelList.
 
 The supported channel list of this radio.
 
 @param aIfRadioSupportChannelList Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioSupportChannelList:(NSString *)aIfRadioSupportChannelList;

/**
 Setter for IfSsidPmfEnable.
 
 Enable/Disable Protect Management Frame function.
 
 @param aIfSsidPmfEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidPmfEnable:(BOOL)aIfSsidPmfEnable;

/**
 Setter for IfPppMtu.
 
 Maximum Transmission Unit for this interface.
 
 Range:       1360..1492

 @param aIfPppMtu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppMtu:(NSInteger)aIfPppMtu;

/**
 Setter for IfRadioTransmitPower.
 
 The setting of output power.
 
 @param aIfRadioTransmitPower Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioTransmitPower:(EnumWifiTypesTransmitPower)aIfRadioTransmitPower;

/**
 Setter for IfRadioOperatingStandard.
 
 The operation mode of this radio like 802.11b/g/n for 2.4GHz,
802.11a/n/ac for 5GHz.
 
 @param aIfRadioOperatingStandard Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioOperatingStandard:(EnumWifiTypesMode)aIfRadioOperatingStandard;

/**
 Setter for IfSsidSsidHiddenEnabled.
 
 Hide the SSID in beacon.
 
 @param aIfSsidSsidHiddenEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSsidHiddenEnabled:(BOOL)aIfSsidSsidHiddenEnabled;

/**
 Setter for IfSsidSecurity.
 
 The security mode of this ssid.
 
 @param aIfSsidSecurity Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSecurity:(EnumWifiTypesSecurityMode)aIfSsidSecurity;

/**
 Setter for IfSsidBaseInterface.
 
 Based interface.
 
 @param aIfSsidBaseInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidBaseInterface:(NSString *)aIfSsidBaseInterface;

/**
 Setter for IfSsidDfsEnable.
 
 Enable/Disable dynamic frequency selection function.
 
 @param aIfSsidDfsEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidDfsEnable:(BOOL)aIfSsidDfsEnable;

/**
 Setter for IfSsidIntraBssTrafficBlocking.
 
 Intra-BSS traffic is the traffic between wireless clients in the BSS.
When you enable this function, wireless clients can access wired
network and communicate with each other. When disable this function,
wireless clients can still access wired network but cannot communicate
with each other.
 
 @param aIfSsidIntraBssTrafficBlocking Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidIntraBssTrafficBlocking:(BOOL)aIfSsidIntraBssTrafficBlocking;

/**
 Setter for IfPppUsername.
 
 Username to be used for authentication.
 
 @param aIfPppUsername Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppUsername:(NSString *)aIfPppUsername;

/**
 Setter for Type.
 
 The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
 
 @param aType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setType:(NSString *)aType;

/**
 Setter for IfRadioOperatingFrequencyBand.
 
 The frequency band of this radio.
 
 @param aIfRadioOperatingFrequencyBand Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioOperatingFrequencyBand:(EnumWifiTypesRadioBand)aIfRadioOperatingFrequencyBand;

/**
 Setter for IfSsidSsid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless LAN
that functions as an ID for joining a particular radio network (BSS).
 
 Length:      1..32

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aIfSsidSsid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSsid:(NSString *)aIfSsidSsid;

/**
 Setter for IfPppBaseInterface.
 
 Based interface.
 
 @param aIfPppBaseInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppBaseInterface:(NSString *)aIfPppBaseInterface;

/**
 Setter for IfPppIdleDisconnectTime.
 
 Idle disconnect time.
 
 @param aIfPppIdleDisconnectTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppIdleDisconnectTime:(NSInteger)aIfPppIdleDisconnectTime;

/**
 Setter for IfPppName.
 
 The textual name of the interface.
 
 @param aIfPppName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppName:(NSString *)aIfPppName;

/**
 Setter for IfPppAutoConnectEnable.
 
 If this PPP connection is disconnected for any reason, the device
automatically attempts to reestablish the connection (and continues to
attempt to reestablish the connection as long it remains disconnected)
 
 @param aIfPppAutoConnectEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppAutoConnectEnable:(BOOL)aIfPppAutoConnectEnable;

/**
 Setter for IfSsidSsidMode.
 
 The mode of this interface. Station, Access Point or others.
 
 @param aIfSsidSsidMode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidSsidMode:(EnumWifiTypesSsidMode)aIfSsidSsidMode;

/**
 Setter for IfSsidWmmEnable.
 
 Whether WMM support is currently enabled. When enabled, this is
indicated in beacon frames.
 
 @param aIfSsidWmmEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidWmmEnable:(BOOL)aIfSsidWmmEnable;

/**
 Setter for IfPppPppoeServiceName.
 
 The service name of the setting configuration.
 
 @param aIfPppPppoeServiceName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfPppPppoeServiceName:(NSString *)aIfPppPppoeServiceName;

/**
 Setter for IfSsidCtsrts.
 
 Data with its frame size larger than this value will perform the
RTS/CTS handshake.
 
 Range:       256..2346

 @param aIfSsidCtsrts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidCtsrts:(NSInteger)aIfSsidCtsrts;

/**
 Setter for Name.
 
 The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list /interfaces-state/interface contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
/interfaces-state/interface list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

If the device supports pre-provisioning of interface
configuration, the 'pre-provisioning' feature is
advertised.

If the device allows arbitrarily named user-controlled
interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interface-state/interface list.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for IfSsidFrag.
 
 The threshold (number of byte) for fragmentation boundary for directed
messages. It is the maximum fragment size that can be sent.
 
 Range:       256..2346

 @param aIfSsidFrag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfSsidFrag:(NSInteger)aIfSsidFrag;

/**
 Setter for LinkUpDownTrapEnable.
 
 Controls whether linkUp/linkDown SNMP notifications
should be generated for this interface.

If this node is not configured, the value 'enabled' is
operationally used by the server for interfaces that do
not operate on top of any other interface (i.e., there are
no 'lower-layer-if' entries), and 'disabled' otherwise.
 
 @param aLinkUpDownTrapEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLinkUpDownTrapEnable:(EnumLinkUpDownTrapEnable)aLinkUpDownTrapEnable;

/**
 Setter for Enabled.
 
 This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.



Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for IfRadioOperatingChannelBandwidth.
 
 The band witdth of this channel.
 
 @param aIfRadioOperatingChannelBandwidth Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioOperatingChannelBandwidth:(EnumWifiTypesChannelBandwidth)aIfRadioOperatingChannelBandwidth;

/**
 Setter for IfRadioRegulatoryDomain.
 
 The 802.11d Regulatory Domain.
 
 Length:      2

 Pattern:     ^([a-zA-Z]*)$

 @param aIfRadioRegulatoryDomain Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIfRadioRegulatoryDomain:(NSString *)aIfRadioRegulatoryDomain;


/**
 Getter for IfRadioAutoChannel.
 
 Select channel automatically.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfRadioAutoChannel;

/**
 Getter for IfPppPassword.
 
 Password to be used for authentication.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfPppPassword;

/**
 Getter for IfRadioSupportChannelList.
 
 The supported channel list of this radio.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfRadioSupportChannelList;

/**
 Getter for IfSsidPmfEnable.
 
 Enable/Disable Protect Management Frame function.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidPmfEnable;

/**
 Getter for IfPppMtu.
 
 Maximum Transmission Unit for this interface.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfPppMtu;

/**
 Getter for IfRadioTransmitPower.
 
 The setting of output power.
 
 @return EnumWifiTypesTransmitPower The value of property.
 */
- (EnumWifiTypesTransmitPower)getIfRadioTransmitPower;

/**
 Getter for IfRadioOperatingStandard.
 
 The operation mode of this radio like 802.11b/g/n for 2.4GHz,
802.11a/n/ac for 5GHz.
 
 @return EnumWifiTypesMode The value of property.
 */
- (EnumWifiTypesMode)getIfRadioOperatingStandard;

/**
 Getter for IfSsidSsidHiddenEnabled.
 
 Hide the SSID in beacon.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidSsidHiddenEnabled;

/**
 Getter for IfSsidSecurity.
 
 The security mode of this ssid.
 
 @return EnumWifiTypesSecurityMode The value of property.
 */
- (EnumWifiTypesSecurityMode)getIfSsidSecurity;

/**
 Getter for IfSsidBaseInterface.
 
 Based interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidBaseInterface;

/**
 Getter for IfSsidDfsEnable.
 
 Enable/Disable dynamic frequency selection function.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidDfsEnable;

/**
 Getter for IfSsidIntraBssTrafficBlocking.
 
 Intra-BSS traffic is the traffic between wireless clients in the BSS.
When you enable this function, wireless clients can access wired
network and communicate with each other. When disable this function,
wireless clients can still access wired network but cannot communicate
with each other.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidIntraBssTrafficBlocking;

/**
 Getter for IfPppUsername.
 
 Username to be used for authentication.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfPppUsername;

/**
 Getter for Type.
 
 The type of the interface.

When an interface entry is created, a server MAY
initialize the type leaf with a valid value, e.g., if it
is possible to derive the type from the name of the
interface.

If a client tries to set the type of an interface to a
value that can never be used by the system, e.g., if the
type is not supported or if the type does not match the
name of the interface, the server MUST reject the request.
A NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.
 
 @return NSString * The value of property.
 */
- (NSString *)getType;

/**
 Getter for IfRadioOperatingFrequencyBand.
 
 The frequency band of this radio.
 
 @return EnumWifiTypesRadioBand The value of property.
 */
- (EnumWifiTypesRadioBand)getIfRadioOperatingFrequencyBand;

/**
 Getter for IfSsidSsid.
 
 The current service set identifier in use by the connection. The SSID
is an identifier that is attached to packets sent over the wireless LAN
that functions as an ID for joining a particular radio network (BSS).
 
 @return NSString * The value of property.
 */
- (NSString *)getIfSsidSsid;

/**
 Getter for IfPppBaseInterface.
 
 Based interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfPppBaseInterface;

/**
 Getter for IfPppIdleDisconnectTime.
 
 Idle disconnect time.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfPppIdleDisconnectTime;

/**
 Getter for IfPppName.
 
 The textual name of the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfPppName;

/**
 Getter for IfPppAutoConnectEnable.
 
 If this PPP connection is disconnected for any reason, the device
automatically attempts to reestablish the connection (and continues to
attempt to reestablish the connection as long it remains disconnected)
 
 @return BOOL The value of property.
 */
- (BOOL)getIfPppAutoConnectEnable;

/**
 Getter for IfSsidSsidMode.
 
 The mode of this interface. Station, Access Point or others.
 
 @return EnumWifiTypesSsidMode The value of property.
 */
- (EnumWifiTypesSsidMode)getIfSsidSsidMode;

/**
 Getter for IfSsidWmmEnable.
 
 Whether WMM support is currently enabled. When enabled, this is
indicated in beacon frames.
 
 @return BOOL The value of property.
 */
- (BOOL)getIfSsidWmmEnable;

/**
 Getter for IfPppPppoeServiceName.
 
 The service name of the setting configuration.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfPppPppoeServiceName;

/**
 Getter for IfSsidCtsrts.
 
 Data with its frame size larger than this value will perform the
RTS/CTS handshake.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidCtsrts;

/**
 Getter for Name.
 
 The name of the interface.

A device MAY restrict the allowed values for this leaf,
possibly depending on the type of the interface.
For system-controlled interfaces, this leaf is the
device-specific name of the interface.  The 'config false'
list /interfaces-state/interface contains the currently
existing interfaces on the device.

If a client tries to create configuration for a
system-controlled interface that is not present in the
/interfaces-state/interface list, the server MAY reject
the request if the implementation does not support
pre-provisioning of interfaces or if the name refers to
an interface that can never exist in the system.  A
NETCONF server MUST reply with an rpc-error with the
error-tag 'invalid-value' in this case.

If the device supports pre-provisioning of interface
configuration, the 'pre-provisioning' feature is
advertised.

If the device allows arbitrarily named user-controlled
interfaces, the 'arbitrary-names' feature is advertised.

When a configured user-controlled interface is created by
the system, it is instantiated with the same name in the
/interface-state/interface list.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for IfSsidFrag.
 
 The threshold (number of byte) for fragmentation boundary for directed
messages. It is the maximum fragment size that can be sent.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIfSsidFrag;

/**
 Getter for LinkUpDownTrapEnable.
 
 Controls whether linkUp/linkDown SNMP notifications
should be generated for this interface.

If this node is not configured, the value 'enabled' is
operationally used by the server for interfaces that do
not operate on top of any other interface (i.e., there are
no 'lower-layer-if' entries), and 'disabled' otherwise.
 
 @return EnumLinkUpDownTrapEnable The value of property.
 */
- (EnumLinkUpDownTrapEnable)getLinkUpDownTrapEnable;

/**
 Getter for Enabled.
 
 This leaf contains the configured, desired state of the
interface.

Systems that implement the IF-MIB use the value of this
leaf in the 'running' datastore to set
IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
has been initialized, as described in RFC 2863.



Changes in this leaf in the 'running' datastore are
reflected in ifAdminStatus, but if ifAdminStatus is
changed over SNMP, this leaf is not affected.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for IfRadioOperatingChannelBandwidth.
 
 The band witdth of this channel.
 
 @return EnumWifiTypesChannelBandwidth The value of property.
 */
- (EnumWifiTypesChannelBandwidth)getIfRadioOperatingChannelBandwidth;

/**
 Getter for IfRadioRegulatoryDomain.
 
 The 802.11d Regulatory Domain.
 
 @return NSString * The value of property.
 */
- (NSString *)getIfRadioRegulatoryDomain;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInterfaces

/**
 StructInterfaces, as in YANG: __interfaces__.
 
 Detailed Description: Interface configuration parameters.
 
  Used in the following data model: 
 
- urn:ietf:params:xml:ns:yang:ietf-interfaces -> interfaces

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInterfaces example:
      StructInterfaces *interfaces = [[StructInterfaces alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"interfaces init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!interfaces) {
        NSLog(@"interfaces is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"interfaces init successful! toJson: %@", [interfaces toJson]);
      NSLog(@"interfaces validated result: %lu, 0 means it passes validation.", (unsigned long)[interfaces validate]);
      
      // -----------------------------------------------
      // Setters of StructInterfaces
  
      // -----------------------------------------------
      // Getters of StructInterfaces
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"interfaces toJson: %@", [interfaces toJson]);
```
 
 */
@interface StructInterfaces : NSObject

/**
 Array which contains StructInterfaceElementInterface, as in YANG: __interface__
 
 Detailed Description: The list of configured interfaces on the device.

The operational state of an interface is available in the
/interfaces-state/interface list.  If the configuration of a
system-controlled interface cannot be used by the system
(e.g., the interface hardware present does not match the
interface type), then the configuration is not applied to
the system-controlled interface shown in the
/interfaces-state/interface list.  If the configuration
of a user-controlled interface cannot be used by the system,
the configured interface is not instantiated in the
/interfaces-state/interface list.
 
 @see StructInterfaceElementInterface
 */
@property (atomic, retain) NSMutableArray <StructInterfaceElementInterface *> *interface;

/**
 Designated initializer for StructInterfaces either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInterfaces if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputBleState

/**
 StructOutputBleState, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-bluetooth-low-energy -> ble-state -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputBleState example:
      StructOutputBleState *output = [[StructOutputBleState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputBleState
  
      // -----------------------------------------------
      // Getters of StructOutputBleState
      [output getState];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputBleState : NSObject


/**
 Designated initializer for StructOutputBleState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputBleState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for State.
 
 Current state of BLE.
 
 @param aState Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setState:(EnumBleStatus)aState;


/**
 Getter for State.
 
 Current state of BLE.
 
 @return EnumBleStatus The value of property.
 */
- (EnumBleStatus)getState;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructBleState

/**
 StructBleState, as in YANG: __ble-state__.
 
 Detailed Description: Current BLE state.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-bluetooth-low-energy -> ble-state

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructBleState example:
      StructBleState *bleState = [[StructBleState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"bleState init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!bleState) {
        NSLog(@"bleState is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"bleState init successful! toJson: %@", [bleState toJson]);
      NSLog(@"bleState validated result: %lu, 0 means it passes validation.", (unsigned long)[bleState validate]);
      
      // -----------------------------------------------
      // Setters of StructBleState
  
      // -----------------------------------------------
      // Getters of StructBleState
      [bleState getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"bleState toJson: %@", [bleState toJson]);
```
 
 */
@interface StructBleState : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputBleState
 */
@property (atomic, retain) StructOutputBleState *output;

/**
 Designated initializer for StructBleState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructBleState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputActionForBle

/**
 StructInputActionForBle, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-bluetooth-low-energy -> action-for-ble -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputActionForBle example:
      StructInputActionForBle *input = [[StructInputActionForBle alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputActionForBle
  
      // -----------------------------------------------
      // Getters of StructInputActionForBle
      [input getAction];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputActionForBle : NSObject


/**
 Designated initializer for StructInputActionForBle either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputActionForBle if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Action.
 
 Action for BLE.
 
 @param aAction Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAction:(EnumBleStatus)aAction;


/**
 Getter for Action.
 
 Action for BLE.
 
 @return EnumBleStatus The value of property.
 */
- (EnumBleStatus)getAction;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructActionForBle

/**
 StructActionForBle, as in YANG: __action-for-ble__.
 
 Detailed Description: Action for BLE.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-bluetooth-low-energy -> action-for-ble

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructActionForBle example:
      StructActionForBle *actionForBle = [[StructActionForBle alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"actionForBle init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!actionForBle) {
        NSLog(@"actionForBle is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"actionForBle init successful! toJson: %@", [actionForBle toJson]);
      NSLog(@"actionForBle validated result: %lu, 0 means it passes validation.", (unsigned long)[actionForBle validate]);
      
      // -----------------------------------------------
      // Setters of StructActionForBle
  
      // -----------------------------------------------
      // Getters of StructActionForBle
      [actionForBle getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"actionForBle toJson: %@", [actionForBle toJson]);
```
 
 */
@interface StructActionForBle : NSObject

/**
 As in YANG: __input__
 
 @see StructInputActionForBle
 */
@property (atomic, retain) StructInputActionForBle *input;

/**
 Designated initializer for StructActionForBle either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructActionForBle if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputPairUnpair

/**
 StructInputPairUnpair, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-cloud -> pair-unpair -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputPairUnpair example:
      StructInputPairUnpair *input = [[StructInputPairUnpair alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputPairUnpair
      if ((error = [input setToken:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setToken:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setCloudId:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setCloudId:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputPairUnpair
      [input getAction];
      [input getToken];
      [input getCloudId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputPairUnpair : NSObject


/**
 Designated initializer for StructInputPairUnpair either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputPairUnpair if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Action.
 
 Action.
 
 @param aAction Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAction:(EnumAction)aAction;

/**
 Setter for Token.
 
 Token.
 
 @param aToken Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setToken:(NSString *)aToken;

/**
 Setter for CloudId.
 
 Unique ID.
 
 @param aCloudId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCloudId:(NSString *)aCloudId;


/**
 Getter for Action.
 
 Action.
 
 @return EnumAction The value of property.
 */
- (EnumAction)getAction;

/**
 Getter for Token.
 
 Token.
 
 @return NSString * The value of property.
 */
- (NSString *)getToken;

/**
 Getter for CloudId.
 
 Unique ID.
 
 @return NSString * The value of property.
 */
- (NSString *)getCloudId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPairUnpair

/**
 StructPairUnpair, as in YANG: __pair-unpair__.
 
 Detailed Description: Pairing or unpair device and cloud.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-cloud -> pair-unpair

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPairUnpair example:
      StructPairUnpair *pairUnpair = [[StructPairUnpair alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pairUnpair init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pairUnpair) {
        NSLog(@"pairUnpair is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pairUnpair init successful! toJson: %@", [pairUnpair toJson]);
      NSLog(@"pairUnpair validated result: %lu, 0 means it passes validation.", (unsigned long)[pairUnpair validate]);
      
      // -----------------------------------------------
      // Setters of StructPairUnpair
  
      // -----------------------------------------------
      // Getters of StructPairUnpair
      [pairUnpair getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pairUnpair toJson: %@", [pairUnpair toJson]);
```
 
 */
@interface StructPairUnpair : NSObject

/**
 As in YANG: __input__
 
 @see StructInputPairUnpair
 */
@property (atomic, retain) StructInputPairUnpair *input;

/**
 Designated initializer for StructPairUnpair either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPairUnpair if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructFilterRuleElement

/**
 StructFilterRuleElement, as in YANG: __filter-rule-element__.
 
 Detailed Description: The firewall filter rules.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> firewall -> filter-rule -> filter-rule-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructFilterRuleElement example:
      StructFilterRuleElement *filterRuleElement = [[StructFilterRuleElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"filterRuleElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!filterRuleElement) {
        NSLog(@"filterRuleElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"filterRuleElement init successful! toJson: %@", [filterRuleElement toJson]);
      NSLog(@"filterRuleElement validated result: %lu, 0 means it passes validation.", (unsigned long)[filterRuleElement validate]);
      
      // -----------------------------------------------
      // Setters of StructFilterRuleElement
      if ((error = [filterRuleElement setDestPortEnd:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setDestPortEnd:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setDestIpAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setDestIpAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setSourcePortStart:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setSourcePortStart:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setRuleIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setRuleIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setSourcePortEnd:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setSourcePortEnd:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setSourceIpAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setSourceIpAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setServiceName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setServiceName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setDestPortStart:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setDestPortStart:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [filterRuleElement setMacAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[filterRuleElement setMacAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructFilterRuleElement
      [filterRuleElement getProtocol];
      [filterRuleElement getDestPortEnd];
      [filterRuleElement getDestIpAddress];
      [filterRuleElement getSourcePortStart];
      [filterRuleElement getRuleIndex];
      [filterRuleElement getSourcePortEnd];
      [filterRuleElement getSourceIpAddress];
      [filterRuleElement getServiceName];
      [filterRuleElement getDestPortStart];
      [filterRuleElement getMacAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"filterRuleElement toJson: %@", [filterRuleElement toJson]);
```
 
 */
@interface StructFilterRuleElement : NSObject


/**
 Designated initializer for StructFilterRuleElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructFilterRuleElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Protocol.
 
 The protocol for this rule.
 
 @param aProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProtocol:(EnumProtocol)aProtocol;

/**
 Setter for DestPortEnd.
 
 The destination ending port for this rule.
 
 Range:       1..65535

 @param aDestPortEnd Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDestPortEnd:(NSInteger)aDestPortEnd;

/**
 Setter for DestIpAddress.
 
 Destination IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aDestIpAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDestIpAddress:(NSString *)aDestIpAddress;

/**
 Setter for SourcePortStart.
 
 The source starting port for this rule.
 
 Range:       1..65535

 @param aSourcePortStart Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSourcePortStart:(NSInteger)aSourcePortStart;

/**
 Setter for RuleIndex.
 
 The index of the filter rule.
 
 @param aRuleIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRuleIndex:(NSString *)aRuleIndex;

/**
 Setter for SourcePortEnd.
 
 The source ending port for this rule.
 
 Range:       1..65535

 @param aSourcePortEnd Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSourcePortEnd:(NSInteger)aSourcePortEnd;

/**
 Setter for SourceIpAddress.
 
 Source IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aSourceIpAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSourceIpAddress:(NSString *)aSourceIpAddress;

/**
 Setter for ServiceName.
 
 The name of the rule.
 
 @param aServiceName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setServiceName:(NSString *)aServiceName;

/**
 Setter for DestPortStart.
 
 The destination starting port for this rule.
 
 Range:       1..65535

 @param aDestPortStart Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDestPortStart:(NSInteger)aDestPortStart;

/**
 Setter for MacAddress.
 
 MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMacAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddress:(NSString *)aMacAddress;


/**
 Getter for Protocol.
 
 The protocol for this rule.
 
 @return EnumProtocol The value of property.
 */
- (EnumProtocol)getProtocol;

/**
 Getter for DestPortEnd.
 
 The destination ending port for this rule.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDestPortEnd;

/**
 Getter for DestIpAddress.
 
 Destination IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getDestIpAddress;

/**
 Getter for SourcePortStart.
 
 The source starting port for this rule.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getSourcePortStart;

/**
 Getter for RuleIndex.
 
 The index of the filter rule.
 
 @return NSString * The value of property.
 */
- (NSString *)getRuleIndex;

/**
 Getter for SourcePortEnd.
 
 The source ending port for this rule.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getSourcePortEnd;

/**
 Getter for SourceIpAddress.
 
 Source IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getSourceIpAddress;

/**
 Getter for ServiceName.
 
 The name of the rule.
 
 @return NSString * The value of property.
 */
- (NSString *)getServiceName;

/**
 Getter for DestPortStart.
 
 The destination starting port for this rule.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDestPortStart;

/**
 Getter for MacAddress.
 
 MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructFirewall

/**
 StructFirewall, as in YANG: __firewall__.
 
 Detailed Description: IPv4 firewall and filter rules setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> firewall

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructFirewall example:
      StructFirewall *firewall = [[StructFirewall alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"firewall init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!firewall) {
        NSLog(@"firewall is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"firewall init successful! toJson: %@", [firewall toJson]);
      NSLog(@"firewall validated result: %lu, 0 means it passes validation.", (unsigned long)[firewall validate]);
      
      // -----------------------------------------------
      // Setters of StructFirewall
      if ((error = [firewall setEnableFirewallRule:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[firewall setEnableFirewallRule:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [firewall setEnableFirewall:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[firewall setEnableFirewall:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructFirewall
      [firewall getTarget];
      [firewall getIcmpRespondToPingInterface];
      [firewall getEnableFirewallRule];
      [firewall getEnableFirewall];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"firewall toJson: %@", [firewall toJson]);
```
 
 */
@interface StructFirewall : NSObject

/**
 Array which contains StructFilterRuleElement, as in YANG: __filter-rule__
 
 Detailed Description: The firewall filter rules.
 
 @see StructFilterRuleElement
 */
@property (atomic, retain) NSMutableArray <StructFilterRuleElement *> *filterRule;

/**
 Designated initializer for StructFirewall either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructFirewall if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Target.
 
 Default action for packets not matching any of the level rules.
Enumeration of:
- Drop (The firewall discards packets matching this rule)
- Accept (The firewall forwards packets matching this rule)
 
 @param aTarget Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTarget:(EnumTargetFirewall)aTarget;

/**
 Setter for IcmpRespondToPingInterface.
 
 Respond to the ICMP request form the interface.
 
 @param aIcmpRespondToPingInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIcmpRespondToPingInterface:(EnumIcmpRespondToPingInterface)aIcmpRespondToPingInterface;

/**
 Setter for EnableFirewallRule.
 
 Enables or disables the filter rules.
 
 @param aEnableFirewallRule Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnableFirewallRule:(BOOL)aEnableFirewallRule;

/**
 Setter for EnableFirewall.
 
 Enables or disables the Firewall.
 
 @param aEnableFirewall Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnableFirewall:(BOOL)aEnableFirewall;


/**
 Getter for Target.
 
 Default action for packets not matching any of the level rules.
Enumeration of:
- Drop (The firewall discards packets matching this rule)
- Accept (The firewall forwards packets matching this rule)
 
 @return EnumTargetFirewall The value of property.
 */
- (EnumTargetFirewall)getTarget;

/**
 Getter for IcmpRespondToPingInterface.
 
 Respond to the ICMP request form the interface.
 
 @return EnumIcmpRespondToPingInterface The value of property.
 */
- (EnumIcmpRespondToPingInterface)getIcmpRespondToPingInterface;

/**
 Getter for EnableFirewallRule.
 
 Enables or disables the filter rules.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnableFirewallRule;

/**
 Getter for EnableFirewall.
 
 Enables or disables the Firewall.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnableFirewall;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall

/**
 StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> unblock -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall example:
      StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall *input = [[StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall
      if ((error = [input setMacAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMacAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall
      [input getMacAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall : NSObject


/**
 Designated initializer for StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MacAddress.
 
 The mac address of the device we want to unblock.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMacAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddress:(NSString *)aMacAddress;


/**
 Getter for MacAddress.
 
 The mac address of the device we want to unblock.
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUnblock

/**
 StructUnblock, as in YANG: __unblock__.
 
 Detailed Description: Unblock a device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> unblock

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUnblock example:
      StructUnblock *unblock = [[StructUnblock alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"unblock init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!unblock) {
        NSLog(@"unblock is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"unblock init successful! toJson: %@", [unblock toJson]);
      NSLog(@"unblock validated result: %lu, 0 means it passes validation.", (unsigned long)[unblock validate]);
      
      // -----------------------------------------------
      // Setters of StructUnblock
  
      // -----------------------------------------------
      // Getters of StructUnblock
      [unblock getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"unblock toJson: %@", [unblock toJson]);
```
 
 */
@interface StructUnblock : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall
 */
@property (atomic, retain) StructInputUnblockUrnZyxelCpeApplicationsZyxelApplicationsIpv4Firewall *input;

/**
 Designated initializer for StructUnblock either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUnblock if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputBlock

/**
 StructInputBlock, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> block -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputBlock example:
      StructInputBlock *input = [[StructInputBlock alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputBlock
      if ((error = [input setMacAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMacAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputBlock
      [input getMacAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputBlock : NSObject


/**
 Designated initializer for StructInputBlock either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputBlock if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MacAddress.
 
 The mac address of the device we want to block.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMacAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddress:(NSString *)aMacAddress;


/**
 Getter for MacAddress.
 
 The mac address of the device we want to block.
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructBlock

/**
 StructBlock, as in YANG: __block__.
 
 Detailed Description: Block a device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-ipv4-firewall -> block

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructBlock example:
      StructBlock *block = [[StructBlock alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"block init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!block) {
        NSLog(@"block is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"block init successful! toJson: %@", [block toJson]);
      NSLog(@"block validated result: %lu, 0 means it passes validation.", (unsigned long)[block validate]);
      
      // -----------------------------------------------
      // Setters of StructBlock
  
      // -----------------------------------------------
      // Getters of StructBlock
      [block getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"block toJson: %@", [block toJson]);
```
 
 */
@interface StructBlock : NSObject

/**
 As in YANG: __input__
 
 @see StructInputBlock
 */
@property (atomic, retain) StructInputBlock *input;

/**
 Designated initializer for StructBlock either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructBlock if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInput

/**
 StructInput, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> generate-pin-code -> input
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-push-button -> input
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> clear-setting -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInput example:
      StructInput *input = [[StructInput alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInput
      if ((error = [input setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInput
      [input getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInput : NSObject


/**
 Designated initializer for StructInput either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInput if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 The interface name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Name.
 
 The interface name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGeneratePinCode

/**
 StructOutputGeneratePinCode, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> generate-pin-code -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGeneratePinCode example:
      StructOutputGeneratePinCode *output = [[StructOutputGeneratePinCode alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGeneratePinCode
      if ((error = [output setPinCode:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setPinCode:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputGeneratePinCode
      [output getPinCode];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGeneratePinCode : NSObject


/**
 Designated initializer for StructOutputGeneratePinCode either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGeneratePinCode if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PinCode.
 
 The generated PIN code.
 
 Length:      8

 Pattern:     ^([0-9]*)$

 @param aPinCode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPinCode:(NSString *)aPinCode;


/**
 Getter for PinCode.
 
 The generated PIN code.
 
 @return NSString * The value of property.
 */
- (NSString *)getPinCode;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGeneratePinCode

/**
 StructGeneratePinCode, as in YANG: __generate-pin-code__.
 
 Detailed Description: Generate new PIN code.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> generate-pin-code

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGeneratePinCode example:
      StructGeneratePinCode *generatePinCode = [[StructGeneratePinCode alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"generatePinCode init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!generatePinCode) {
        NSLog(@"generatePinCode is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"generatePinCode init successful! toJson: %@", [generatePinCode toJson]);
      NSLog(@"generatePinCode validated result: %lu, 0 means it passes validation.", (unsigned long)[generatePinCode validate]);
      
      // -----------------------------------------------
      // Setters of StructGeneratePinCode
  
      // -----------------------------------------------
      // Getters of StructGeneratePinCode
      [generatePinCode getInput];
      [generatePinCode getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"generatePinCode toJson: %@", [generatePinCode toJson]);
```
 
 */
@interface StructGeneratePinCode : NSObject

/**
 As in YANG: __input__
 
 @see StructInput
 */
@property (atomic, retain) StructInput *input;
/**
 As in YANG: __output__
 
 @see StructOutputGeneratePinCode
 */
@property (atomic, retain) StructOutputGeneratePinCode *output;

/**
 Designated initializer for StructGeneratePinCode either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGeneratePinCode if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSiteSurvey

/**
 StructInputSiteSurvey, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> site-survey -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSiteSurvey example:
      StructInputSiteSurvey *input = [[StructInputSiteSurvey alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSiteSurvey
      if ((error = [input setInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSiteSurvey
      [input getInterface];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSiteSurvey : NSObject


/**
 Designated initializer for StructInputSiteSurvey either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSiteSurvey if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Interface.
 
 The interface to do site survey
 
 @param aInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterface:(NSString *)aInterface;


/**
 Getter for Interface.
 
 The interface to do site survey
 
 @return NSString * The value of property.
 */
- (NSString *)getInterface;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSiteSurveyResultElement

/**
 StructSiteSurveyResultElement, as in YANG: __site-survey-result-element__.
 
 Detailed Description: The result of the site survey.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> site-survey -> output -> site-survey-result -> site-survey-result-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSiteSurveyResultElement example:
      StructSiteSurveyResultElement *siteSurveyResultElement = [[StructSiteSurveyResultElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"siteSurveyResultElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!siteSurveyResultElement) {
        NSLog(@"siteSurveyResultElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"siteSurveyResultElement init successful! toJson: %@", [siteSurveyResultElement toJson]);
      NSLog(@"siteSurveyResultElement validated result: %lu, 0 means it passes validation.", (unsigned long)[siteSurveyResultElement validate]);
      
      // -----------------------------------------------
      // Setters of StructSiteSurveyResultElement
      if ((error = [siteSurveyResultElement setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[siteSurveyResultElement setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [siteSurveyResultElement setStrength:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[siteSurveyResultElement setStrength:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [siteSurveyResultElement setSsid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[siteSurveyResultElement setSsid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [siteSurveyResultElement setChannel:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[siteSurveyResultElement setChannel:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSiteSurveyResultElement
      [siteSurveyResultElement getIndex];
      [siteSurveyResultElement getStrength];
      [siteSurveyResultElement getSsid];
      [siteSurveyResultElement getRadio];
      [siteSurveyResultElement getMode];
      [siteSurveyResultElement getSecurity];
      [siteSurveyResultElement getChannel];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"siteSurveyResultElement toJson: %@", [siteSurveyResultElement toJson]);
```
 
 */
@interface StructSiteSurveyResultElement : NSObject


/**
 Designated initializer for StructSiteSurveyResultElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSiteSurveyResultElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 Index of the result.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Strength.
 
 Signal strength of the AP.
 
 @param aStrength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStrength:(NSString *)aStrength;

/**
 Setter for Ssid.
 
 SSID of the AP.
 
 @param aSsid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSsid:(NSString *)aSsid;

/**
 Setter for Radio.
 
 The radio of the AP.
 
 @param aRadio Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRadio:(EnumWifiTypesRadioBand)aRadio;

/**
 Setter for Mode.
 
 Operation mode of the AP.
 
 @param aMode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMode:(EnumWifiTypesMode)aMode;

/**
 Setter for Security.
 
 Security mode of the AP.
 
 @param aSecurity Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSecurity:(EnumWifiTypesSecurityMode)aSecurity;

/**
 Setter for Channel.
 
 Channel of the AP.
 
 @param aChannel Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setChannel:(NSInteger)aChannel;


/**
 Getter for Index.
 
 Index of the result.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Strength.
 
 Signal strength of the AP.
 
 @return NSString * The value of property.
 */
- (NSString *)getStrength;

/**
 Getter for Ssid.
 
 SSID of the AP.
 
 @return NSString * The value of property.
 */
- (NSString *)getSsid;

/**
 Getter for Radio.
 
 The radio of the AP.
 
 @return EnumWifiTypesRadioBand The value of property.
 */
- (EnumWifiTypesRadioBand)getRadio;

/**
 Getter for Mode.
 
 Operation mode of the AP.
 
 @return EnumWifiTypesMode The value of property.
 */
- (EnumWifiTypesMode)getMode;

/**
 Getter for Security.
 
 Security mode of the AP.
 
 @return EnumWifiTypesSecurityMode The value of property.
 */
- (EnumWifiTypesSecurityMode)getSecurity;

/**
 Getter for Channel.
 
 Channel of the AP.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getChannel;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputSiteSurvey

/**
 StructOutputSiteSurvey, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> site-survey -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputSiteSurvey example:
      StructOutputSiteSurvey *output = [[StructOutputSiteSurvey alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputSiteSurvey
  
      // -----------------------------------------------
      // Getters of StructOutputSiteSurvey
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputSiteSurvey : NSObject

/**
 Array which contains StructSiteSurveyResultElement, as in YANG: __site-survey-result__
 
 Detailed Description: The result of the site survey.
 
 @see StructSiteSurveyResultElement
 */
@property (atomic, retain) NSMutableArray <StructSiteSurveyResultElement *> *siteSurveyResult;

/**
 Designated initializer for StructOutputSiteSurvey either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputSiteSurvey if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSiteSurvey

/**
 StructSiteSurvey, as in YANG: __site-survey__.
 
 Detailed Description: Site survey.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> site-survey

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSiteSurvey example:
      StructSiteSurvey *siteSurvey = [[StructSiteSurvey alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"siteSurvey init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!siteSurvey) {
        NSLog(@"siteSurvey is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"siteSurvey init successful! toJson: %@", [siteSurvey toJson]);
      NSLog(@"siteSurvey validated result: %lu, 0 means it passes validation.", (unsigned long)[siteSurvey validate]);
      
      // -----------------------------------------------
      // Setters of StructSiteSurvey
  
      // -----------------------------------------------
      // Getters of StructSiteSurvey
      [siteSurvey getInput];
      [siteSurvey getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"siteSurvey toJson: %@", [siteSurvey toJson]);
```
 
 */
@interface StructSiteSurvey : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSiteSurvey
 */
@property (atomic, retain) StructInputSiteSurvey *input;
/**
 As in YANG: __output__
 
 @see StructOutputSiteSurvey
 */
@property (atomic, retain) StructOutputSiteSurvey *output;

/**
 Designated initializer for StructSiteSurvey either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSiteSurvey if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputPressStartButton

/**
 StructInputPressStartButton, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-start-button -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputPressStartButton example:
      StructInputPressStartButton *input = [[StructInputPressStartButton alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputPressStartButton
      if ((error = [input setStaPin:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setStaPin:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputPressStartButton
      [input getStaPin];
      [input getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputPressStartButton : NSObject


/**
 Designated initializer for StructInputPressStartButton either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputPressStartButton if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for StaPin.
 
 The station's PIN code.
 
 Length:      8

 Pattern:     ^([0-9]*)$

 @param aStaPin Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStaPin:(NSString *)aStaPin;

/**
 Setter for Name.
 
 The interface name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for StaPin.
 
 The station's PIN code.
 
 @return NSString * The value of property.
 */
- (NSString *)getStaPin;

/**
 Getter for Name.
 
 The interface name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutput

/**
 StructOutput, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-start-button -> output
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-push-button -> output
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> wps-button-pin-status -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutput example:
      StructOutput *output = [[StructOutput alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutput
  
      // -----------------------------------------------
      // Getters of StructOutput
      [output getWpsStatus];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutput : NSObject


/**
 Designated initializer for StructOutput either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutput if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for WpsStatus.
 
 WPS button PIN status.
 
 @param aWpsStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWpsStatus:(EnumWifiTypesWpsStatus)aWpsStatus;


/**
 Getter for WpsStatus.
 
 WPS button PIN status.
 
 @return EnumWifiTypesWpsStatus The value of property.
 */
- (EnumWifiTypesWpsStatus)getWpsStatus;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPressStartButton

/**
 StructPressStartButton, as in YANG: __press-start-button__.
 
 Detailed Description: Pressed the WPS start button with station's PIN code.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-start-button

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPressStartButton example:
      StructPressStartButton *pressStartButton = [[StructPressStartButton alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pressStartButton init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pressStartButton) {
        NSLog(@"pressStartButton is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pressStartButton init successful! toJson: %@", [pressStartButton toJson]);
      NSLog(@"pressStartButton validated result: %lu, 0 means it passes validation.", (unsigned long)[pressStartButton validate]);
      
      // -----------------------------------------------
      // Setters of StructPressStartButton
  
      // -----------------------------------------------
      // Getters of StructPressStartButton
      [pressStartButton getInput];
      [pressStartButton getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pressStartButton toJson: %@", [pressStartButton toJson]);
```
 
 */
@interface StructPressStartButton : NSObject

/**
 As in YANG: __input__
 
 @see StructInputPressStartButton
 */
@property (atomic, retain) StructInputPressStartButton *input;
/**
 As in YANG: __output__
 
 @see StructOutput
 */
@property (atomic, retain) StructOutput *output;

/**
 Designated initializer for StructPressStartButton either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPressStartButton if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPressPushButton

/**
 StructPressPushButton, as in YANG: __press-push-button__.
 
 Detailed Description: Pressed the WPS push button.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> press-push-button

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPressPushButton example:
      StructPressPushButton *pressPushButton = [[StructPressPushButton alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"pressPushButton init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!pressPushButton) {
        NSLog(@"pressPushButton is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"pressPushButton init successful! toJson: %@", [pressPushButton toJson]);
      NSLog(@"pressPushButton validated result: %lu, 0 means it passes validation.", (unsigned long)[pressPushButton validate]);
      
      // -----------------------------------------------
      // Setters of StructPressPushButton
  
      // -----------------------------------------------
      // Getters of StructPressPushButton
      [pressPushButton getInput];
      [pressPushButton getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"pressPushButton toJson: %@", [pressPushButton toJson]);
```
 
 */
@interface StructPressPushButton : NSObject

/**
 As in YANG: __input__
 
 @see StructInput
 */
@property (atomic, retain) StructInput *input;
/**
 As in YANG: __output__
 
 @see StructOutput
 */
@property (atomic, retain) StructOutput *output;

/**
 Designated initializer for StructPressPushButton either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPressPushButton if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructClearSetting

/**
 StructClearSetting, as in YANG: __clear-setting__.
 
 Detailed Description: Clear WPS configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> clear-setting

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructClearSetting example:
      StructClearSetting *clearSetting = [[StructClearSetting alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"clearSetting init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!clearSetting) {
        NSLog(@"clearSetting is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"clearSetting init successful! toJson: %@", [clearSetting toJson]);
      NSLog(@"clearSetting validated result: %lu, 0 means it passes validation.", (unsigned long)[clearSetting validate]);
      
      // -----------------------------------------------
      // Setters of StructClearSetting
  
      // -----------------------------------------------
      // Getters of StructClearSetting
      [clearSetting getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"clearSetting toJson: %@", [clearSetting toJson]);
```
 
 */
@interface StructClearSetting : NSObject

/**
 As in YANG: __input__
 
 @see StructInput
 */
@property (atomic, retain) StructInput *input;

/**
 Designated initializer for StructClearSetting either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructClearSetting if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWpsButtonPinStatus

/**
 StructWpsButtonPinStatus, as in YANG: __wps-button-pin-status__.
 
 Detailed Description: WPS status.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:interface:zyxel-interface-ssid -> wps-button-pin-status

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWpsButtonPinStatus example:
      StructWpsButtonPinStatus *wpsButtonPinStatus = [[StructWpsButtonPinStatus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wpsButtonPinStatus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wpsButtonPinStatus) {
        NSLog(@"wpsButtonPinStatus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wpsButtonPinStatus init successful! toJson: %@", [wpsButtonPinStatus toJson]);
      NSLog(@"wpsButtonPinStatus validated result: %lu, 0 means it passes validation.", (unsigned long)[wpsButtonPinStatus validate]);
      
      // -----------------------------------------------
      // Setters of StructWpsButtonPinStatus
  
      // -----------------------------------------------
      // Getters of StructWpsButtonPinStatus
      [wpsButtonPinStatus getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wpsButtonPinStatus toJson: %@", [wpsButtonPinStatus toJson]);
```
 
 */
@interface StructWpsButtonPinStatus : NSObject

/**
 As in YANG: __output__
 
 @see StructOutput
 */
@property (atomic, retain) StructOutput *output;

/**
 Designated initializer for StructWpsButtonPinStatus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWpsButtonPinStatus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructConfigElement

/**
 StructConfigElement, as in YANG: __config-element__.
 
 Detailed Description: This parameter identifies the portions of the device
configuration datastore to retrieve.  If this parameter is not
present, the entire configuration is returned.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> request-container -> rpc -> params -> filter -> filter-element
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> request-container -> rpc -> params -> config -> config-element
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> response-container -> rpc-reply -> data -> data-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructConfigElement example:
      StructConfigElement *configElement = [[StructConfigElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"configElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!configElement) {
        NSLog(@"configElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"configElement init successful! toJson: %@", [configElement toJson]);
      NSLog(@"configElement validated result: %lu, 0 means it passes validation.", (unsigned long)[configElement validate]);
      
      // -----------------------------------------------
      // Setters of StructConfigElement
  
      // -----------------------------------------------
      // Getters of StructConfigElement
      [configElement getRoot];
      [configElement getXmlns];
      [configElement getType];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"configElement toJson: %@", [configElement toJson]);
```
 
 */
@interface StructConfigElement : NSObject


/**
 Designated initializer for StructConfigElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructConfigElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Root.
 
 Namespace of current data model.
 
 @param aRoot Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRoot:(EnumRoot)aRoot;

/**
 Setter for Xmlns.
 
 Namespace of current data model.
 
 @param aXmlns Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setXmlns:(EnumNamespace)aXmlns;

/**
 Setter for Type.
 
 The configuration filter type.
 
 @param aType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setType:(EnumFilterType)aType;


/**
 Getter for Root.
 
 Namespace of current data model.
 
 @return EnumRoot The value of property.
 */
- (EnumRoot)getRoot;

/**
 Getter for Xmlns.
 
 Namespace of current data model.
 
 @return EnumNamespace The value of property.
 */
- (EnumNamespace)getXmlns;

/**
 Getter for Type.
 
 The configuration filter type.
 
 @return EnumFilterType The value of property.
 */
- (EnumFilterType)getType;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructParams

/**
 StructParams, as in YANG: __params__.
 
 Detailed Description: Parameters of operation.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> request-container -> rpc -> params
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructParams example:
      StructParams *params = [[StructParams alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"params init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!params) {
        NSLog(@"params is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"params init successful! toJson: %@", [params toJson]);
      NSLog(@"params validated result: %lu, 0 means it passes validation.", (unsigned long)[params validate]);
      
      // -----------------------------------------------
      // Setters of StructParams
  
      // -----------------------------------------------
      // Getters of StructParams
      [params getXmlns];
      [params getTarget];
      [params getErrorOption];
      [params getSource];
      [params getRoot];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"params toJson: %@", [params toJson]);
```
 
 */
@interface StructParams : NSObject

/**
 Array which contains StructConfigElement, as in YANG: __filter__
 
 Detailed Description: This parameter identifies the portions of the device
configuration datastore to retrieve.  If this parameter is not
present, the entire configuration is returned.
 
 @see StructConfigElement
 */
@property (atomic, retain) NSMutableArray  *filter;
/**
 Array which contains StructConfigElement, as in YANG: __config__
 
 Detailed Description: The configuration when operation type is edit-config.
 
 @see StructConfigElement
 */
@property (atomic, retain) NSMutableArray  *config;

/**
 Designated initializer for StructParams either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructParams if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Xmlns.
 
 Namespace of current data model.
 
 @param aXmlns Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setXmlns:(EnumNamespace)aXmlns;

/**
 Setter for Target.
 
 The configuration source type when edit-config for the operation.
 
 @param aTarget Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTarget:(EnumConfigSource)aTarget;

/**
 Setter for ErrorOption.
 
 The error option when operation type is edit-config.
 
 @param aErrorOption Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setErrorOption:(EnumErrorOption)aErrorOption;

/**
 Setter for Source.
 
 The configuration source type when get-config for the operation.
 
 @param aSource Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSource:(EnumConfigSource)aSource;

/**
 Setter for Root.
 
 Namespace of current data model.
 
 @param aRoot Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRoot:(EnumRoot)aRoot;


/**
 Getter for Xmlns.
 
 Namespace of current data model.
 
 @return EnumNamespace The value of property.
 */
- (EnumNamespace)getXmlns;

/**
 Getter for Target.
 
 The configuration source type when edit-config for the operation.
 
 @return EnumConfigSource The value of property.
 */
- (EnumConfigSource)getTarget;

/**
 Getter for ErrorOption.
 
 The error option when operation type is edit-config.
 
 @return EnumErrorOption The value of property.
 */
- (EnumErrorOption)getErrorOption;

/**
 Getter for Source.
 
 The configuration source type when get-config for the operation.
 
 @return EnumConfigSource The value of property.
 */
- (EnumConfigSource)getSource;

/**
 Getter for Root.
 
 Namespace of current data model.
 
 @return EnumRoot The value of property.
 */
- (EnumRoot)getRoot;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRpc

/**
 StructRpc, as in YANG: __rpc__.
 
 Detailed Description: Zyxel Zapi request format, please refer to ietf-netconf.yang rpc get-config.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> request-container -> rpc
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRpc example:
      StructRpc *rpc = [[StructRpc alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"rpc init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!rpc) {
        NSLog(@"rpc is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"rpc init successful! toJson: %@", [rpc toJson]);
      NSLog(@"rpc validated result: %lu, 0 means it passes validation.", (unsigned long)[rpc validate]);
      
      // -----------------------------------------------
      // Setters of StructRpc
      if ((error = [rpc setMessageId:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[rpc setMessageId:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [rpc setXmlns:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rpc setXmlns:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRpc
      [rpc getMessageId];
      [rpc getOperation];
      [rpc getXmlns];
      [rpc getParams];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"rpc toJson: %@", [rpc toJson]);
```
 
 */
@interface StructRpc : NSObject

/**
 As in YANG: __params__
 
 @see StructParams
 */
@property (atomic, retain) StructParams *params;

/**
 Designated initializer for StructRpc either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRpc if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MessageId.
 
 Message id of rpc transaction.
 
 @param aMessageId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMessageId:(NSInteger)aMessageId;

/**
 Setter for Operation.
 
 Operation type of rpc.
 
 @param aOperation Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOperation:(EnumOperationType)aOperation;

/**
 Setter for Xmlns.
 
 The namespace for NETCONF XML definitions.
 
 Length:      39

 @param aXmlns Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setXmlns:(NSString *)aXmlns;


/**
 Getter for MessageId.
 
 Message id of rpc transaction.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMessageId;

/**
 Getter for Operation.
 
 Operation type of rpc.
 
 @return EnumOperationType The value of property.
 */
- (EnumOperationType)getOperation;

/**
 Getter for Xmlns.
 
 The namespace for NETCONF XML definitions.
 
 @return NSString * The value of property.
 */
- (NSString *)getXmlns;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRequestContainer

/**
 StructRequestContainer, as in YANG: __request-container__.
 
 Detailed Description: Zyxel Zapi request contaier, so the whole json would start from {"rpc":{}}.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> request-container

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRequestContainer example:
      StructRequestContainer *requestContainer = [[StructRequestContainer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"requestContainer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!requestContainer) {
        NSLog(@"requestContainer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"requestContainer init successful! toJson: %@", [requestContainer toJson]);
      NSLog(@"requestContainer validated result: %lu, 0 means it passes validation.", (unsigned long)[requestContainer validate]);
      
      // -----------------------------------------------
      // Setters of StructRequestContainer
  
      // -----------------------------------------------
      // Getters of StructRequestContainer
      [requestContainer getRpc];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"requestContainer toJson: %@", [requestContainer toJson]);
```
 
 */
@interface StructRequestContainer : NSObject

/**
 As in YANG: __rpc__
 
 @see StructRpc
 */
@property (atomic, retain) StructRpc *rpc;

/**
 Designated initializer for StructRequestContainer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRequestContainer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructErrorMessage

/**
 StructErrorMessage, as in YANG: __error-message__.
 
 Detailed Description: Contains a string suitable for human display that
describes the error condition.  This element will not be present
if no appropriate message is provided for a particular error
condition.  This element SHOULD include an xml:lang attribute as
defined in [W3C.REC-xml-20001006] and discussed in [RFC3470].
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> response-container -> rpc-reply -> rpc-error -> error-message
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructErrorMessage example:
      StructErrorMessage *errorMessage = [[StructErrorMessage alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"errorMessage init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!errorMessage) {
        NSLog(@"errorMessage is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"errorMessage init successful! toJson: %@", [errorMessage toJson]);
      NSLog(@"errorMessage validated result: %lu, 0 means it passes validation.", (unsigned long)[errorMessage validate]);
      
      // -----------------------------------------------
      // Setters of StructErrorMessage
      if ((error = [errorMessage setText:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[errorMessage setText:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [errorMessage setXmlLang:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[errorMessage setXmlLang:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructErrorMessage
      [errorMessage getText];
      [errorMessage getXmlLang];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"errorMessage toJson: %@", [errorMessage toJson]);
```
 
 */
@interface StructErrorMessage : NSObject


/**
 Designated initializer for StructErrorMessage either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructErrorMessage if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Text.
 
 Human readable text error message.
 
 Length:      0..500

 @param aText Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setText:(NSString *)aText;

/**
 Setter for XmlLang.
 
 Language code of error message.
 
 Length:      2

 Pattern:     ^([A-Z]{2})$

 @param aXmlLang Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setXmlLang:(NSString *)aXmlLang;


/**
 Getter for Text.
 
 Human readable text error message.
 
 @return NSString * The value of property.
 */
- (NSString *)getText;

/**
 Getter for XmlLang.
 
 Language code of error message.
 
 @return NSString * The value of property.
 */
- (NSString *)getXmlLang;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRpcError

/**
 StructRpcError, as in YANG: __rpc-error__.
 
 Detailed Description: The <rpc-error> element is sent in <rpc-reply> messages if an error
occurs during the processing of an <rpc> request.

If a server encounters multiple errors during the processing of an
<rpc> request, the <rpc-reply> MAY contain multiple <rpc-error>
elements.  However, a server is not required to detect or report more
than one <rpc-error> element, if a request contains multiple errors.
A server is not required to check for particular error conditions in
a specific sequence.  A server MUST return an <rpc-error> element if
any error conditions occur during processing.

A server MUST NOT return application-level- or data-model-specific
error information in an <rpc-error> element for which the client does
not have sufficient access rights.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> response-container -> rpc-reply -> rpc-error
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRpcError example:
      StructRpcError *rpcError = [[StructRpcError alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"rpcError init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!rpcError) {
        NSLog(@"rpcError is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"rpcError init successful! toJson: %@", [rpcError toJson]);
      NSLog(@"rpcError validated result: %lu, 0 means it passes validation.", (unsigned long)[rpcError validate]);
      
      // -----------------------------------------------
      // Setters of StructRpcError
      if ((error = [rpcError setErrorTag:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rpcError setErrorTag:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRpcError
      [rpcError getErrorType];
      [rpcError getErrorSeverity];
      [rpcError getErrorTag];
      [rpcError getErrorMessage];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"rpcError toJson: %@", [rpcError toJson]);
```
 
 */
@interface StructRpcError : NSObject

/**
 As in YANG: __error-message__
 
 @see StructErrorMessage
 */
@property (atomic, retain) StructErrorMessage *errorMessage;

/**
 Designated initializer for StructRpcError either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRpcError if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for ErrorType.
 
 The type of error of this rpc-error.
 
 @param aErrorType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setErrorType:(EnumErrorType)aErrorType;

/**
 Setter for ErrorSeverity.
 
 Contains a string identifying the error severity, as
determined by the device.
 
 @param aErrorSeverity Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setErrorSeverity:(EnumErrorSeverity)aErrorSeverity;

/**
 Setter for ErrorTag.
 
 Contains a string identifying the error condition.  See
Appendix A for allowed values.
 
 @param aErrorTag Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setErrorTag:(NSString *)aErrorTag;


/**
 Getter for ErrorType.
 
 The type of error of this rpc-error.
 
 @return EnumErrorType The value of property.
 */
- (EnumErrorType)getErrorType;

/**
 Getter for ErrorSeverity.
 
 Contains a string identifying the error severity, as
determined by the device.
 
 @return EnumErrorSeverity The value of property.
 */
- (EnumErrorSeverity)getErrorSeverity;

/**
 Getter for ErrorTag.
 
 Contains a string identifying the error condition.  See
Appendix A for allowed values.
 
 @return NSString * The value of property.
 */
- (NSString *)getErrorTag;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRpcReply

/**
 StructRpcReply, as in YANG: __rpc-reply__.
 
 Detailed Description: Zyxel Zapi request format, please refer to ietf-netconf.yang rpc get-config.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> response-container -> rpc-reply
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRpcReply example:
      StructRpcReply *rpcReply = [[StructRpcReply alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"rpcReply init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!rpcReply) {
        NSLog(@"rpcReply is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"rpcReply init successful! toJson: %@", [rpcReply toJson]);
      NSLog(@"rpcReply validated result: %lu, 0 means it passes validation.", (unsigned long)[rpcReply validate]);
      
      // -----------------------------------------------
      // Setters of StructRpcReply
      if ((error = [rpcReply setXmlns:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rpcReply setXmlns:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [rpcReply setMessageId:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[rpcReply setMessageId:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRpcReply
      [rpcReply getXmlns];
      [rpcReply getRpcError];
      [rpcReply getResult];
      [rpcReply getMessageId];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"rpcReply toJson: %@", [rpcReply toJson]);
```
 
 */
@interface StructRpcReply : NSObject

/**
 As in YANG: __rpc-error__
 
 @see StructRpcError
 */
@property (atomic, retain) StructRpcError *rpcError;
/**
 Array which contains StructConfigElement, as in YANG: __data__
 
 Detailed Description: The configuration data received.
 
 @see StructConfigElement
 */
@property (atomic, retain) NSMutableArray  *data;

/**
 Designated initializer for StructRpcReply either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRpcReply if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Xmlns.
 
 The namespace for NETCONF XML definitions.
 
 Length:      39

 @param aXmlns Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setXmlns:(NSString *)aXmlns;

/**
 Setter for Result.
 
 Operation type of top most rpc, not opertation type rpc.
 
 @param aResult Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setResult:(EnumReplyResult)aResult;

/**
 Setter for MessageId.
 
 Message id of rpc transaction.
 
 @param aMessageId Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMessageId:(NSInteger)aMessageId;


/**
 Getter for Xmlns.
 
 The namespace for NETCONF XML definitions.
 
 @return NSString * The value of property.
 */
- (NSString *)getXmlns;

/**
 Getter for Result.
 
 Operation type of top most rpc, not opertation type rpc.
 
 @return EnumReplyResult The value of property.
 */
- (EnumReplyResult)getResult;

/**
 Getter for MessageId.
 
 Message id of rpc transaction.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMessageId;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructResponseContainer

/**
 StructResponseContainer, as in YANG: __response-container__.
 
 Detailed Description: Zyxel Zapi response contaier, so the whole json would start from {"rpc-reply":{}}.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:application:zyxel-zapi-request-response -> response-container

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructResponseContainer example:
      StructResponseContainer *responseContainer = [[StructResponseContainer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"responseContainer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!responseContainer) {
        NSLog(@"responseContainer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"responseContainer init successful! toJson: %@", [responseContainer toJson]);
      NSLog(@"responseContainer validated result: %lu, 0 means it passes validation.", (unsigned long)[responseContainer validate]);
      
      // -----------------------------------------------
      // Setters of StructResponseContainer
  
      // -----------------------------------------------
      // Getters of StructResponseContainer
      [responseContainer getRpcReply];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"responseContainer toJson: %@", [responseContainer toJson]);
```
 
 */
@interface StructResponseContainer : NSObject

/**
 As in YANG: __rpc-reply__
 
 @see StructRpcReply
 */
@property (atomic, retain) StructRpcReply *rpcReply;

/**
 Designated initializer for StructResponseContainer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructResponseContainer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWifiInterfaceMappingElement

/**
 StructWifiInterfaceMappingElement, as in YANG: __wifi-interface-mapping-element__.
 
 Detailed Description: Interface mapping list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-capability -> capability -> interfaces -> wifi-interface-mapping -> wifi-interface-mapping-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWifiInterfaceMappingElement example:
      StructWifiInterfaceMappingElement *wifiInterfaceMappingElement = [[StructWifiInterfaceMappingElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wifiInterfaceMappingElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wifiInterfaceMappingElement) {
        NSLog(@"wifiInterfaceMappingElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wifiInterfaceMappingElement init successful! toJson: %@", [wifiInterfaceMappingElement toJson]);
      NSLog(@"wifiInterfaceMappingElement validated result: %lu, 0 means it passes validation.", (unsigned long)[wifiInterfaceMappingElement validate]);
      
      // -----------------------------------------------
      // Setters of StructWifiInterfaceMappingElement
      if ((error = [wifiInterfaceMappingElement setRadioIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiInterfaceMappingElement setRadioIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wifiInterfaceMappingElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[wifiInterfaceMappingElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWifiInterfaceMappingElement
      [wifiInterfaceMappingElement getRadioIndex];
      [wifiInterfaceMappingElement getName];
      [wifiInterfaceMappingElement getRadio];
      [wifiInterfaceMappingElement getType];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wifiInterfaceMappingElement toJson: %@", [wifiInterfaceMappingElement toJson]);
```
 
 */
@interface StructWifiInterfaceMappingElement : NSObject


/**
 Designated initializer for StructWifiInterfaceMappingElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWifiInterfaceMappingElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for RadioIndex.
 
 Radio index. Identification or multiple radio in same band.
 
 @param aRadioIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRadioIndex:(NSString *)aRadioIndex;

/**
 Setter for Name.
 
 WiFi interface name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Radio.
 
 the radio device is linked
 
 @param aRadio Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRadio:(EnumWifiTypesRadioBand)aRadio;

/**
 Setter for Type.
 
 The type of this interface.
 
 @param aType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setType:(EnumWfiiInterfaceType)aType;


/**
 Getter for RadioIndex.
 
 Radio index. Identification or multiple radio in same band.
 
 @return NSString * The value of property.
 */
- (NSString *)getRadioIndex;

/**
 Getter for Name.
 
 WiFi interface name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Radio.
 
 the radio device is linked
 
 @return EnumWifiTypesRadioBand The value of property.
 */
- (EnumWifiTypesRadioBand)getRadio;

/**
 Getter for Type.
 
 The type of this interface.
 
 @return EnumWfiiInterfaceType The value of property.
 */
- (EnumWfiiInterfaceType)getType;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInterfacesCapability

/**
 StructInterfacesCapability, as in YANG: __interfaces__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-capability -> capability -> interfaces
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInterfacesCapability example:
      StructInterfacesCapability *interfaces = [[StructInterfacesCapability alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"interfaces init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!interfaces) {
        NSLog(@"interfaces is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"interfaces init successful! toJson: %@", [interfaces toJson]);
      NSLog(@"interfaces validated result: %lu, 0 means it passes validation.", (unsigned long)[interfaces validate]);
      
      // -----------------------------------------------
      // Setters of StructInterfacesCapability
  
      // -----------------------------------------------
      // Getters of StructInterfacesCapability
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"interfaces toJson: %@", [interfaces toJson]);
```
 
 */
@interface StructInterfacesCapability : NSObject

/**
 Array which contains StructWifiInterfaceMappingElement, as in YANG: __wifi-interface-mapping__
 
 Detailed Description: Interface mapping list.
 
 @see StructWifiInterfaceMappingElement
 */
@property (atomic, retain) NSMutableArray <StructWifiInterfaceMappingElement *> *wifiInterfaceMapping;

/**
 Designated initializer for StructInterfacesCapability either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInterfacesCapability if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCapability

/**
 StructCapability, as in YANG: __capability__.
 
 Detailed Description: The capability and information of the device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-capability -> capability

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCapability example:
      StructCapability *capability = [[StructCapability alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"capability init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!capability) {
        NSLog(@"capability is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"capability init successful! toJson: %@", [capability toJson]);
      NSLog(@"capability validated result: %lu, 0 means it passes validation.", (unsigned long)[capability validate]);
      
      // -----------------------------------------------
      // Setters of StructCapability
  
      // -----------------------------------------------
      // Getters of StructCapability
      [capability getInterfaces];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"capability toJson: %@", [capability toJson]);
```
 
 */
@interface StructCapability : NSObject

/**
 As in YANG: __interfaces__
 
 @see StructInterfacesCapability
 */
@property (atomic, retain) StructInterfacesCapability *interfaces;

/**
 Designated initializer for StructCapability either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCapability if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTopUrnZyxelCpeSystemZyxelWifiSystemLog

/**
 StructTopUrnZyxelCpeSystemZyxelWifiSystemLog, as in YANG: __top__.
 
 Detailed Description: WiFi system log data model, currently used to enable or disable log message.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> top

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTopUrnZyxelCpeSystemZyxelWifiSystemLog example:
      StructTopUrnZyxelCpeSystemZyxelWifiSystemLog *top = [[StructTopUrnZyxelCpeSystemZyxelWifiSystemLog alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"top init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!top) {
        NSLog(@"top is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"top init successful! toJson: %@", [top toJson]);
      NSLog(@"top validated result: %lu, 0 means it passes validation.", (unsigned long)[top validate]);
      
      // -----------------------------------------------
      // Setters of StructTopUrnZyxelCpeSystemZyxelWifiSystemLog
      if ((error = [top setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[top setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructTopUrnZyxelCpeSystemZyxelWifiSystemLog
      [top getEnabled];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"top toJson: %@", [top toJson]);
```
 
 */
@interface StructTopUrnZyxelCpeSystemZyxelWifiSystemLog : NSObject


/**
 Designated initializer for StructTopUrnZyxelCpeSystemZyxelWifiSystemLog either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTopUrnZyxelCpeSystemZyxelWifiSystemLog if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 Enable/Disable log messages.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;


/**
 Getter for Enabled.
 
 Enable/Disable log messages.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputDumpFile

/**
 StructOutputDumpFile, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> dump-file -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputDumpFile example:
      StructOutputDumpFile *output = [[StructOutputDumpFile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputDumpFile
  
      // -----------------------------------------------
      // Getters of StructOutputDumpFile
      [output getFile];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputDumpFile : NSObject


/**
 Designated initializer for StructOutputDumpFile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputDumpFile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for File.
 
 Base64 encoded zip file including the log, config, debug message.
 
 @param aFile Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFile:(NSString *)aFile;


/**
 Getter for File.
 
 Base64 encoded zip file including the log, config, debug message.
 
 @return NSString * The value of property.
 */
- (NSString *)getFile;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDumpFile

/**
 StructDumpFile, as in YANG: __dump-file__.
 
 Detailed Description: Dump log, config, debug message or other information to a file and
output it to caller.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> dump-file

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDumpFile example:
      StructDumpFile *dumpFile = [[StructDumpFile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dumpFile init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dumpFile) {
        NSLog(@"dumpFile is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dumpFile init successful! toJson: %@", [dumpFile toJson]);
      NSLog(@"dumpFile validated result: %lu, 0 means it passes validation.", (unsigned long)[dumpFile validate]);
      
      // -----------------------------------------------
      // Setters of StructDumpFile
  
      // -----------------------------------------------
      // Getters of StructDumpFile
      [dumpFile getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dumpFile toJson: %@", [dumpFile toJson]);
```
 
 */
@interface StructDumpFile : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputDumpFile
 */
@property (atomic, retain) StructOutputDumpFile *output;

/**
 Designated initializer for StructDumpFile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDumpFile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructClear

/**
 StructClear, as in YANG: __clear__.
 
 Detailed Description: Clear the log messages, i.e delete the logs.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> clear

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructClear example:
      StructClear *clear = [[StructClear alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"clear init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!clear) {
        NSLog(@"clear is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"clear init successful! toJson: %@", [clear toJson]);
      NSLog(@"clear validated result: %lu, 0 means it passes validation.", (unsigned long)[clear validate]);
      
      // -----------------------------------------------
      // Setters of StructClear
  
      // -----------------------------------------------
      // Getters of StructClear
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"clear toJson: %@", [clear toJson]);
```
 
 */
@interface StructClear : NSObject


/**
 Designated initializer for StructClear either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructClear if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputGetLog

/**
 StructInputGetLog, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> get-log -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputGetLog example:
      StructInputGetLog *input = [[StructInputGetLog alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputGetLog
  
      // -----------------------------------------------
      // Getters of StructInputGetLog
      [input getSeverity];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputGetLog : NSObject


/**
 Designated initializer for StructInputGetLog either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputGetLog if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Severity.
 
 The severity threshold for output log.

EMERGENCY: 0
ALERT:     1
CRITICAL:  2
ERROR:     3
WARNING:   4
NOTICE:    5
INFO:      6
DEBUG:     7
 
 @param aSeverity Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSeverity:(EnumLogSeverity)aSeverity;


/**
 Getter for Severity.
 
 The severity threshold for output log.

EMERGENCY: 0
ALERT:     1
CRITICAL:  2
ERROR:     3
WARNING:   4
NOTICE:    5
INFO:      6
DEBUG:     7
 
 @return EnumLogSeverity The value of property.
 */
- (EnumLogSeverity)getSeverity;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLogElement

/**
 StructLogElement, as in YANG: __log-element__.
 
 Detailed Description: Output log messages.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> get-log -> output -> log -> log-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLogElement example:
      StructLogElement *logElement = [[StructLogElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"logElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!logElement) {
        NSLog(@"logElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"logElement init successful! toJson: %@", [logElement toJson]);
      NSLog(@"logElement validated result: %lu, 0 means it passes validation.", (unsigned long)[logElement validate]);
      
      // -----------------------------------------------
      // Setters of StructLogElement
      if ((error = [logElement setIndex:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[logElement setIndex:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [logElement setTimestamp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[logElement setTimestamp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [logElement setMessage:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[logElement setMessage:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructLogElement
      [logElement getIndex];
      [logElement getTimestamp];
      [logElement getMessage];
      [logElement getType];
      [logElement getSeverity];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"logElement toJson: %@", [logElement toJson]);
```
 
 */
@interface StructLogElement : NSObject


/**
 Designated initializer for StructLogElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLogElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index of the log.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSInteger)aIndex;

/**
 Setter for Timestamp.
 
 The timestamp of the log.
 
 @param aTimestamp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimestamp:(NSString *)aTimestamp;

/**
 Setter for Message.
 
 The log message.
 
 @param aMessage Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMessage:(NSString *)aMessage;

/**
 Setter for Type.
 
 The WiFi system log message type.
 
 @param aType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setType:(EnumType)aType;

/**
 Setter for Severity.
 
 The severity threshold for output log.

EMERGENCY: 0
ALERT:     1
CRITICAL:  2
ERROR:     3
WARNING:   4
NOTICE:    5
INFO:      6
DEBUG:     7
 
 @param aSeverity Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSeverity:(EnumLogSeverity)aSeverity;


/**
 Getter for Index.
 
 The index of the log.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIndex;

/**
 Getter for Timestamp.
 
 The timestamp of the log.
 
 @return NSString * The value of property.
 */
- (NSString *)getTimestamp;

/**
 Getter for Message.
 
 The log message.
 
 @return NSString * The value of property.
 */
- (NSString *)getMessage;

/**
 Getter for Type.
 
 The WiFi system log message type.
 
 @return EnumType The value of property.
 */
- (EnumType)getType;

/**
 Getter for Severity.
 
 The severity threshold for output log.

EMERGENCY: 0
ALERT:     1
CRITICAL:  2
ERROR:     3
WARNING:   4
NOTICE:    5
INFO:      6
DEBUG:     7
 
 @return EnumLogSeverity The value of property.
 */
- (EnumLogSeverity)getSeverity;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetLog

/**
 StructOutputGetLog, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> get-log -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetLog example:
      StructOutputGetLog *output = [[StructOutputGetLog alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetLog
  
      // -----------------------------------------------
      // Getters of StructOutputGetLog
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetLog : NSObject

/**
 Array which contains StructLogElement, as in YANG: __log__
 
 Detailed Description: Output log messages.
 
 @see StructLogElement
 */
@property (atomic, retain) NSMutableArray <StructLogElement *> *log;

/**
 Designated initializer for StructOutputGetLog either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetLog if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetLog

/**
 StructGetLog, as in YANG: __get-log__.
 
 Detailed Description: Get device log message.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-wifi-system-log -> get-log

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetLog example:
      StructGetLog *getLog = [[StructGetLog alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getLog init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getLog) {
        NSLog(@"getLog is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getLog init successful! toJson: %@", [getLog toJson]);
      NSLog(@"getLog validated result: %lu, 0 means it passes validation.", (unsigned long)[getLog validate]);
      
      // -----------------------------------------------
      // Setters of StructGetLog
  
      // -----------------------------------------------
      // Getters of StructGetLog
      [getLog getInput];
      [getLog getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getLog toJson: %@", [getLog toJson]);
```
 
 */
@interface StructGetLog : NSObject

/**
 As in YANG: __input__
 
 @see StructInputGetLog
 */
@property (atomic, retain) StructInputGetLog *input;
/**
 As in YANG: __output__
 
 @see StructOutputGetLog
 */
@property (atomic, retain) StructOutputGetLog *output;

/**
 Designated initializer for StructGetLog either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetLog if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputBonus

/**
 StructInputBonus, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> bonus -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputBonus example:
      StructInputBonus *input = [[StructInputBonus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputBonus
      if ((error = [input setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setMinute:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMinute:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputBonus
      [input getIndex];
      [input getMinute];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputBonus : NSObject


/**
 Designated initializer for StructInputBonus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputBonus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index number of the profile which is going to be applied.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Minute.
 
 The bonus minutes for this rule.
 
 Range:       1 .. 1440

 @param aMinute Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMinute:(NSInteger)aMinute;


/**
 Getter for Index.
 
 The index number of the profile which is going to be applied.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Minute.
 
 The bonus minutes for this rule.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMinute;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructBonus

/**
 StructBonus, as in YANG: __bonus__.
 
 Detailed Description: Bonus.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> bonus

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructBonus example:
      StructBonus *bonus = [[StructBonus alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"bonus init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!bonus) {
        NSLog(@"bonus is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"bonus init successful! toJson: %@", [bonus toJson]);
      NSLog(@"bonus validated result: %lu, 0 means it passes validation.", (unsigned long)[bonus validate]);
      
      // -----------------------------------------------
      // Setters of StructBonus
  
      // -----------------------------------------------
      // Getters of StructBonus
      [bonus getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"bonus toJson: %@", [bonus toJson]);
```
 
 */
@interface StructBonus : NSObject

/**
 As in YANG: __input__
 
 @see StructInputBonus
 */
@property (atomic, retain) StructInputBonus *input;

/**
 Designated initializer for StructBonus either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructBonus if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructImmediateBlockState

/**
 StructImmediateBlockState, as in YANG: __immediate-block-state__.
 
 Detailed Description: State of the immediate block/unblock for the profile
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> immediate-block-state
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructImmediateBlockState example:
      StructImmediateBlockState *immediateBlockState = [[StructImmediateBlockState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"immediateBlockState init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!immediateBlockState) {
        NSLog(@"immediateBlockState is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"immediateBlockState init successful! toJson: %@", [immediateBlockState toJson]);
      NSLog(@"immediateBlockState validated result: %lu, 0 means it passes validation.", (unsigned long)[immediateBlockState validate]);
      
      // -----------------------------------------------
      // Setters of StructImmediateBlockState
      if ((error = [immediateBlockState setTimestamp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[immediateBlockState setTimestamp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructImmediateBlockState
      [immediateBlockState getTimestamp];
      [immediateBlockState getState];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"immediateBlockState toJson: %@", [immediateBlockState toJson]);
```
 
 */
@interface StructImmediateBlockState : NSObject


/**
 Designated initializer for StructImmediateBlockState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructImmediateBlockState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Timestamp.
 
 Expired time stamp of the immediate block/unblock.
 
 @param aTimestamp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimestamp:(NSString *)aTimestamp;

/**
 Setter for State.
 
 Profile name.
 
 @param aState Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setState:(EnumSchedule)aState;


/**
 Getter for Timestamp.
 
 Expired time stamp of the immediate block/unblock.
 
 @return NSString * The value of property.
 */
- (NSString *)getTimestamp;

/**
 Getter for State.
 
 Profile name.
 
 @return EnumSchedule The value of property.
 */
- (EnumSchedule)getState;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceMacSelectedListElement

/**
 StructDeviceMacSelectedListElement, as in YANG: __device-mac-selected-list-element__.
 
 Detailed Description: Selected MAC address in the configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> device-mac-selected-list -> device-mac-selected-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceMacSelectedListElement example:
      StructDeviceMacSelectedListElement *deviceMacSelectedListElement = [[StructDeviceMacSelectedListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceMacSelectedListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceMacSelectedListElement) {
        NSLog(@"deviceMacSelectedListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceMacSelectedListElement init successful! toJson: %@", [deviceMacSelectedListElement toJson]);
      NSLog(@"deviceMacSelectedListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceMacSelectedListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceMacSelectedListElement
      if ((error = [deviceMacSelectedListElement setDeviceMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceMacSelectedListElement setDeviceMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDeviceMacSelectedListElement
      [deviceMacSelectedListElement getDeviceMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceMacSelectedListElement toJson: %@", [deviceMacSelectedListElement toJson]);
```
 
 */
@interface StructDeviceMacSelectedListElement : NSObject


/**
 Designated initializer for StructDeviceMacSelectedListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceMacSelectedListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DeviceMac.
 
 Selected MAC address in the configuration.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aDeviceMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDeviceMac:(NSString *)aDeviceMac;


/**
 Getter for DeviceMac.
 
 Selected MAC address in the configuration.
 
 @return NSString * The value of property.
 */
- (NSString *)getDeviceMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructServiceRulesElement

/**
 StructServiceRulesElement, as in YANG: __service-rules-element__.
 
 Detailed Description: Service rule list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> content-filtering -> service-rules -> service-rules-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructServiceRulesElement example:
      StructServiceRulesElement *serviceRulesElement = [[StructServiceRulesElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"serviceRulesElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!serviceRulesElement) {
        NSLog(@"serviceRulesElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"serviceRulesElement init successful! toJson: %@", [serviceRulesElement toJson]);
      NSLog(@"serviceRulesElement validated result: %lu, 0 means it passes validation.", (unsigned long)[serviceRulesElement validate]);
      
      // -----------------------------------------------
      // Setters of StructServiceRulesElement
      if ((error = [serviceRulesElement setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serviceRulesElement setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serviceRulesElement setProtocol:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serviceRulesElement setProtocol:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serviceRulesElement setUserDefined:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[serviceRulesElement setUserDefined:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serviceRulesElement setServiceName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serviceRulesElement setServiceName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serviceRulesElement setPort:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serviceRulesElement setPort:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructServiceRulesElement
      [serviceRulesElement getIndex];
      [serviceRulesElement getProtocol];
      [serviceRulesElement getUserDefined];
      [serviceRulesElement getServiceName];
      [serviceRulesElement getPort];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"serviceRulesElement toJson: %@", [serviceRulesElement toJson]);
```
 
 */
@interface StructServiceRulesElement : NSObject


/**
 Designated initializer for StructServiceRulesElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructServiceRulesElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index of the service rule.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Protocol.
 
 The protocol of the service.
 
 @param aProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProtocol:(NSString *)aProtocol;

/**
 Setter for UserDefined.
 
 True for the service name is defined by user. False for the
service name is pre-defined.
 
 @param aUserDefined Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUserDefined:(BOOL)aUserDefined;

/**
 Setter for ServiceName.
 
 The name of the service.
 
 @param aServiceName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setServiceName:(NSString *)aServiceName;

/**
 Setter for Port.
 
 The port of the service.
 
 @param aPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPort:(NSString *)aPort;


/**
 Getter for Index.
 
 The index of the service rule.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Protocol.
 
 The protocol of the service.
 
 @return NSString * The value of property.
 */
- (NSString *)getProtocol;

/**
 Getter for UserDefined.
 
 True for the service name is defined by user. False for the
service name is pre-defined.
 
 @return BOOL The value of property.
 */
- (BOOL)getUserDefined;

/**
 Getter for ServiceName.
 
 The name of the service.
 
 @return NSString * The value of property.
 */
- (NSString *)getServiceName;

/**
 Getter for Port.
 
 The port of the service.
 
 @return NSString * The value of property.
 */
- (NSString *)getPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructKeywordListElement

/**
 StructKeywordListElement, as in YANG: __keyword-list-element__.
 
 Detailed Description: Service rule list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> content-filtering -> keyword-list -> keyword-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructKeywordListElement example:
      StructKeywordListElement *keywordListElement = [[StructKeywordListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"keywordListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!keywordListElement) {
        NSLog(@"keywordListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"keywordListElement init successful! toJson: %@", [keywordListElement toJson]);
      NSLog(@"keywordListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[keywordListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructKeywordListElement
      if ((error = [keywordListElement setKeyword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[keywordListElement setKeyword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructKeywordListElement
      [keywordListElement getKeyword];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"keywordListElement toJson: %@", [keywordListElement toJson]);
```
 
 */
@interface StructKeywordListElement : NSObject


/**
 Designated initializer for StructKeywordListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructKeywordListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Keyword.
 
 The keyword.
 
 @param aKeyword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setKeyword:(NSString *)aKeyword;


/**
 Getter for Keyword.
 
 The keyword.
 
 @return NSString * The value of property.
 */
- (NSString *)getKeyword;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructContentFiltering

/**
 StructContentFiltering, as in YANG: __content-filtering__.
 
 Detailed Description: Content filtering configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> content-filtering
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructContentFiltering example:
      StructContentFiltering *contentFiltering = [[StructContentFiltering alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"contentFiltering init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!contentFiltering) {
        NSLog(@"contentFiltering is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"contentFiltering init successful! toJson: %@", [contentFiltering toJson]);
      NSLog(@"contentFiltering validated result: %lu, 0 means it passes validation.", (unsigned long)[contentFiltering validate]);
      
      // -----------------------------------------------
      // Setters of StructContentFiltering
      if ((error = [contentFiltering setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[contentFiltering setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructContentFiltering
      [contentFiltering getEnabled];
      [contentFiltering getServiceSetting];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"contentFiltering toJson: %@", [contentFiltering toJson]);
```
 
 */
@interface StructContentFiltering : NSObject

/**
 Array which contains StructServiceRulesElement, as in YANG: __service-rules__
 
 Detailed Description: Service rule list.
 
 @see StructServiceRulesElement
 */
@property (atomic, retain) NSMutableArray <StructServiceRulesElement *> *serviceRules;
/**
 Array which contains StructKeywordListElement, as in YANG: __keyword-list__
 
 Detailed Description: Service rule list.
 
 @see StructKeywordListElement
 */
@property (atomic, retain) NSMutableArray <StructKeywordListElement *> *keywordList;

/**
 Designated initializer for StructContentFiltering either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructContentFiltering if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 Enable/Disable content filtering function of this profile.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for ServiceSetting.
 
 The network service setting.
 
 @param aServiceSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setServiceSetting:(EnumSchedule)aServiceSetting;


/**
 Getter for Enabled.
 
 Enable/Disable content filtering function of this profile.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for ServiceSetting.
 
 The network service setting.
 
 @return EnumSchedule The value of property.
 */
- (EnumSchedule)getServiceSetting;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNotificationSchedule

/**
 StructNotificationSchedule, as in YANG: __notification-schedule__.
 
 Detailed Description: Schedule time setting for notification.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> notification-schedule
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNotificationSchedule example:
      StructNotificationSchedule *notificationSchedule = [[StructNotificationSchedule alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"notificationSchedule init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!notificationSchedule) {
        NSLog(@"notificationSchedule is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"notificationSchedule init successful! toJson: %@", [notificationSchedule toJson]);
      NSLog(@"notificationSchedule validated result: %lu, 0 means it passes validation.", (unsigned long)[notificationSchedule validate]);
      
      // -----------------------------------------------
      // Setters of StructNotificationSchedule
      if ((error = [notificationSchedule setMonday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setMonday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setTuesday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setTuesday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setFriday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setFriday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setWednesday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setWednesday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setThursday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setThursday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setSunday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setSunday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [notificationSchedule setSaturday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[notificationSchedule setSaturday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNotificationSchedule
      [notificationSchedule getMonday];
      [notificationSchedule getTuesday];
      [notificationSchedule getFriday];
      [notificationSchedule getEnabled];
      [notificationSchedule getWednesday];
      [notificationSchedule getThursday];
      [notificationSchedule getSunday];
      [notificationSchedule getSaturday];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"notificationSchedule toJson: %@", [notificationSchedule toJson]);
```
 
 */
@interface StructNotificationSchedule : NSObject


/**
 Designated initializer for StructNotificationSchedule either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNotificationSchedule if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Monday.
 
 The setting of the schedule for Monday.
 
 @param aMonday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMonday:(NSString *)aMonday;

/**
 Setter for Tuesday.
 
 The setting of the schedule for Tuesday.
 
 @param aTuesday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTuesday:(NSString *)aTuesday;

/**
 Setter for Friday.
 
 The setting of the schedule for Friday.
 
 @param aFriday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFriday:(NSString *)aFriday;

/**
 Setter for Enabled.
 
 Enable or disable the notification function of this profile.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Wednesday.
 
 The setting of the schedule for Wednesday.
 
 @param aWednesday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWednesday:(NSString *)aWednesday;

/**
 Setter for Thursday.
 
 The setting of the schedule for Thursday.
 
 @param aThursday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setThursday:(NSString *)aThursday;

/**
 Setter for Sunday.
 
 The setting of the schedule for Sunday.
 
 @param aSunday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSunday:(NSString *)aSunday;

/**
 Setter for Saturday.
 
 The setting of the schedule for Saturday.
 
 @param aSaturday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSaturday:(NSString *)aSaturday;


/**
 Getter for Monday.
 
 The setting of the schedule for Monday.
 
 @return NSString * The value of property.
 */
- (NSString *)getMonday;

/**
 Getter for Tuesday.
 
 The setting of the schedule for Tuesday.
 
 @return NSString * The value of property.
 */
- (NSString *)getTuesday;

/**
 Getter for Friday.
 
 The setting of the schedule for Friday.
 
 @return NSString * The value of property.
 */
- (NSString *)getFriday;

/**
 Getter for Enabled.
 
 Enable or disable the notification function of this profile.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Wednesday.
 
 The setting of the schedule for Wednesday.
 
 @return NSString * The value of property.
 */
- (NSString *)getWednesday;

/**
 Getter for Thursday.
 
 The setting of the schedule for Thursday.
 
 @return NSString * The value of property.
 */
- (NSString *)getThursday;

/**
 Getter for Sunday.
 
 The setting of the schedule for Sunday.
 
 @return NSString * The value of property.
 */
- (NSString *)getSunday;

/**
 Getter for Saturday.
 
 The setting of the schedule for Saturday.
 
 @return NSString * The value of property.
 */
- (NSString *)getSaturday;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAccessTimeSchedule

/**
 StructAccessTimeSchedule, as in YANG: __access-time-schedule__.
 
 Detailed Description: Schedule time setting for internet access.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element -> access-time-schedule
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAccessTimeSchedule example:
      StructAccessTimeSchedule *accessTimeSchedule = [[StructAccessTimeSchedule alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"accessTimeSchedule init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!accessTimeSchedule) {
        NSLog(@"accessTimeSchedule is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"accessTimeSchedule init successful! toJson: %@", [accessTimeSchedule toJson]);
      NSLog(@"accessTimeSchedule validated result: %lu, 0 means it passes validation.", (unsigned long)[accessTimeSchedule validate]);
      
      // -----------------------------------------------
      // Setters of StructAccessTimeSchedule
      if ((error = [accessTimeSchedule setMonday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setMonday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setTuesday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setTuesday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setFriday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setFriday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setWednesday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setWednesday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setThursday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setThursday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setSunday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setSunday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [accessTimeSchedule setSaturday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[accessTimeSchedule setSaturday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructAccessTimeSchedule
      [accessTimeSchedule getMonday];
      [accessTimeSchedule getTuesday];
      [accessTimeSchedule getFriday];
      [accessTimeSchedule getEnabled];
      [accessTimeSchedule getWednesday];
      [accessTimeSchedule getThursday];
      [accessTimeSchedule getSunday];
      [accessTimeSchedule getSaturday];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"accessTimeSchedule toJson: %@", [accessTimeSchedule toJson]);
```
 
 */
@interface StructAccessTimeSchedule : NSObject


/**
 Designated initializer for StructAccessTimeSchedule either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAccessTimeSchedule if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Monday.
 
 The setting of the schedule for Monday.
 
 @param aMonday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMonday:(NSString *)aMonday;

/**
 Setter for Tuesday.
 
 The setting of the schedule for Tuesday.
 
 @param aTuesday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTuesday:(NSString *)aTuesday;

/**
 Setter for Friday.
 
 The setting of the schedule for Friday.
 
 @param aFriday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFriday:(NSString *)aFriday;

/**
 Setter for Enabled.
 
 Enable/Disable access time schedule function of this profile.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Wednesday.
 
 The setting of the schedule for Wednesday.
 
 @param aWednesday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setWednesday:(NSString *)aWednesday;

/**
 Setter for Thursday.
 
 The setting of the schedule for Thursday.
 
 @param aThursday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setThursday:(NSString *)aThursday;

/**
 Setter for Sunday.
 
 The setting of the schedule for Sunday.
 
 @param aSunday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSunday:(NSString *)aSunday;

/**
 Setter for Saturday.
 
 The setting of the schedule for Saturday.
 
 @param aSaturday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSaturday:(NSString *)aSaturday;


/**
 Getter for Monday.
 
 The setting of the schedule for Monday.
 
 @return NSString * The value of property.
 */
- (NSString *)getMonday;

/**
 Getter for Tuesday.
 
 The setting of the schedule for Tuesday.
 
 @return NSString * The value of property.
 */
- (NSString *)getTuesday;

/**
 Getter for Friday.
 
 The setting of the schedule for Friday.
 
 @return NSString * The value of property.
 */
- (NSString *)getFriday;

/**
 Getter for Enabled.
 
 Enable/Disable access time schedule function of this profile.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Wednesday.
 
 The setting of the schedule for Wednesday.
 
 @return NSString * The value of property.
 */
- (NSString *)getWednesday;

/**
 Getter for Thursday.
 
 The setting of the schedule for Thursday.
 
 @return NSString * The value of property.
 */
- (NSString *)getThursday;

/**
 Getter for Sunday.
 
 The setting of the schedule for Sunday.
 
 @return NSString * The value of property.
 */
- (NSString *)getSunday;

/**
 Getter for Saturday.
 
 The setting of the schedule for Saturday.
 
 @return NSString * The value of property.
 */
- (NSString *)getSaturday;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructProfilesElement

/**
 StructProfilesElement, as in YANG: __profiles-element__.
 
 Detailed Description: Rule list, this rule list is for edit only.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top -> profiles -> profiles-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructProfilesElement example:
      StructProfilesElement *profilesElement = [[StructProfilesElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"profilesElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!profilesElement) {
        NSLog(@"profilesElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"profilesElement init successful! toJson: %@", [profilesElement toJson]);
      NSLog(@"profilesElement validated result: %lu, 0 means it passes validation.", (unsigned long)[profilesElement validate]);
      
      // -----------------------------------------------
      // Setters of StructProfilesElement
      if ((error = [profilesElement setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[profilesElement setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [profilesElement setBonusRemainingTime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[profilesElement setBonusRemainingTime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [profilesElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[profilesElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [profilesElement setImagePath:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[profilesElement setImagePath:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [profilesElement setActive:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[profilesElement setActive:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructProfilesElement
      [profilesElement getIndex];
      [profilesElement getBonusRemainingTime];
      [profilesElement getName];
      [profilesElement getSchedule];
      [profilesElement getImmediateBlockState];
      [profilesElement getContentFiltering];
      [profilesElement getImagePath];
      [profilesElement getActive];
      [profilesElement getNotificationSchedule];
      [profilesElement getAccessTimeSchedule];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"profilesElement toJson: %@", [profilesElement toJson]);
```
 
 */
@interface StructProfilesElement : NSObject

/**
 As in YANG: __immediate-block-state__
 
 @see StructImmediateBlockState
 */
@property (atomic, retain) StructImmediateBlockState *immediateBlockState;
/**
 Array which contains StructDeviceMacSelectedListElement, as in YANG: __device-mac-selected-list__
 
 Detailed Description: Selected MAC address in the configuration.
 
 @see StructDeviceMacSelectedListElement
 */
@property (atomic, retain) NSMutableArray <StructDeviceMacSelectedListElement *> *deviceMacSelectedList;
/**
 As in YANG: __content-filtering__
 
 @see StructContentFiltering
 */
@property (atomic, retain) StructContentFiltering *contentFiltering;
/**
 As in YANG: __notification-schedule__
 
 @see StructNotificationSchedule
 */
@property (atomic, retain) StructNotificationSchedule *notificationSchedule;
/**
 As in YANG: __access-time-schedule__
 
 @see StructAccessTimeSchedule
 */
@property (atomic, retain) StructAccessTimeSchedule *accessTimeSchedule;

/**
 Designated initializer for StructProfilesElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructProfilesElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 Index of the profile.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for BonusRemainingTime.
 
 The remaining time of the bonus.
 
 @param aBonusRemainingTime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBonusRemainingTime:(NSInteger)aBonusRemainingTime;

/**
 Setter for Name.
 
 Profile name.
 
 Length:      1..20

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Schedule.
 
 The policy of the rule.
 
 @param aSchedule Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSchedule:(EnumSchedule)aSchedule;

/**
 Setter for ImagePath.
 
 The image path of the profile.
 
 @param aImagePath Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setImagePath:(NSString *)aImagePath;

/**
 Setter for Active.
 
 Activate/Deactivate the profile.
 
 @param aActive Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setActive:(BOOL)aActive;


/**
 Getter for Index.
 
 Index of the profile.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for BonusRemainingTime.
 
 The remaining time of the bonus.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getBonusRemainingTime;

/**
 Getter for Name.
 
 Profile name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Schedule.
 
 The policy of the rule.
 
 @return EnumSchedule The value of property.
 */
- (EnumSchedule)getSchedule;

/**
 Getter for ImagePath.
 
 The image path of the profile.
 
 @return NSString * The value of property.
 */
- (NSString *)getImagePath;

/**
 Getter for Active.
 
 Activate/Deactivate the profile.
 
 @return BOOL The value of property.
 */
- (BOOL)getActive;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl

/**
 StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl, as in YANG: __top__.
 
 Detailed Description: Parental control configuration

Flows:
  1. You have to add least 1 devices with rpc add device, and assign profile name, it will automatically creates a profile for you with profile name you specified.
  2. for edit profile, please use edit config parental control -> top, and for remove profile, please use rpc delete profile.
  3. For edit profile, please get the profile first and then apply the whole data model.
  4. Again, for add profile, please follow #1 and add a profile with at least one device.

 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> top

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl example:
      StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl *top = [[StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"top init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!top) {
        NSLog(@"top is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"top init successful! toJson: %@", [top toJson]);
      NSLog(@"top validated result: %lu, 0 means it passes validation.", (unsigned long)[top validate]);
      
      // -----------------------------------------------
      // Setters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
      if ((error = [top setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[top setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
      [top getEnabled];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"top toJson: %@", [top toJson]);
```
 
 */
@interface StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl : NSObject

/**
 Array which contains StructProfilesElement, as in YANG: __profiles__
 
 Detailed Description: Rule list, this rule list is for edit only.
 
 @see StructProfilesElement
 */
@property (atomic, retain) NSMutableArray <StructProfilesElement *> *profiles;

/**
 Designated initializer for StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTopUrnZyxelCpeApplicationsZyxelApplicationsParentalControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 Enables or disables the parantal function.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;


/**
 Getter for Enabled.
 
 Enables or disables the parantal function.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputUnblock

/**
 StructInputUnblock, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> unblock -> input
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> block -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputUnblock example:
      StructInputUnblock *input = [[StructInputUnblock alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputUnblock
      if ((error = [input setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputUnblock
      [input getIndex];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputUnblock : NSObject


/**
 Designated initializer for StructInputUnblock either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputUnblock if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index number of the profile which is going to be applied.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;


/**
 Getter for Index.
 
 The index number of the profile which is going to be applied.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl

/**
 StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl, as in YANG: __unblock__.
 
 Detailed Description: Immediate action for unblocking a specific profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> unblock

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl example:
      StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl *unblock = [[StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"unblock init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!unblock) {
        NSLog(@"unblock is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"unblock init successful! toJson: %@", [unblock toJson]);
      NSLog(@"unblock validated result: %lu, 0 means it passes validation.", (unsigned long)[unblock validate]);
      
      // -----------------------------------------------
      // Setters of StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
  
      // -----------------------------------------------
      // Getters of StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
      [unblock getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"unblock toJson: %@", [unblock toJson]);
```
 
 */
@interface StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUnblock
 */
@property (atomic, retain) StructInputUnblock *input;

/**
 Designated initializer for StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUnblockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDevicesElement

/**
 StructDevicesElement, as in YANG: __devices-element__.
 
 Detailed Description: The device MAC which is added into a profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> add-device -> input -> devices -> devices-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDevicesElement example:
      StructDevicesElement *devicesElement = [[StructDevicesElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"devicesElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!devicesElement) {
        NSLog(@"devicesElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"devicesElement init successful! toJson: %@", [devicesElement toJson]);
      NSLog(@"devicesElement validated result: %lu, 0 means it passes validation.", (unsigned long)[devicesElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDevicesElement
      if ((error = [devicesElement setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[devicesElement setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [devicesElement setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[devicesElement setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [devicesElement setProfileName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[devicesElement setProfileName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDevicesElement
      [devicesElement getIndex];
      [devicesElement getMode];
      [devicesElement getMac];
      [devicesElement getProfileName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"devicesElement toJson: %@", [devicesElement toJson]);
```
 
 */
@interface StructDevicesElement : NSObject


/**
 Designated initializer for StructDevicesElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDevicesElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 Index of the profile.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Mode.
 
 The device MAC is mutual exclusion to profile or not.
 
 @param aMode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMode:(EnumMode)aMode;

/**
 Setter for Mac.
 
 Device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for ProfileName.
 
 Profile name.
 
 @param aProfileName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProfileName:(NSString *)aProfileName;


/**
 Getter for Index.
 
 Index of the profile.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Mode.
 
 The device MAC is mutual exclusion to profile or not.
 
 @return EnumMode The value of property.
 */
- (EnumMode)getMode;

/**
 Getter for Mac.
 
 Device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for ProfileName.
 
 Profile name.
 
 @return NSString * The value of property.
 */
- (NSString *)getProfileName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputAddDevice

/**
 StructInputAddDevice, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> add-device -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputAddDevice example:
      StructInputAddDevice *input = [[StructInputAddDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputAddDevice
  
      // -----------------------------------------------
      // Getters of StructInputAddDevice
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputAddDevice : NSObject

/**
 Array which contains StructDevicesElement, as in YANG: __devices__
 
 Detailed Description: The device MAC which is added into a profile.
 
 @see StructDevicesElement
 */
@property (atomic, retain) NSMutableArray <StructDevicesElement *> *devices;

/**
 Designated initializer for StructInputAddDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputAddDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAddDevice

/**
 StructAddDevice, as in YANG: __add-device__.
 
 Detailed Description: Add a profile if profile not exist
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> add-device

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAddDevice example:
      StructAddDevice *addDevice = [[StructAddDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"addDevice init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!addDevice) {
        NSLog(@"addDevice is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"addDevice init successful! toJson: %@", [addDevice toJson]);
      NSLog(@"addDevice validated result: %lu, 0 means it passes validation.", (unsigned long)[addDevice validate]);
      
      // -----------------------------------------------
      // Setters of StructAddDevice
  
      // -----------------------------------------------
      // Getters of StructAddDevice
      [addDevice getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"addDevice toJson: %@", [addDevice toJson]);
```
 
 */
@interface StructAddDevice : NSObject

/**
 As in YANG: __input__
 
 @see StructInputAddDevice
 */
@property (atomic, retain) StructInputAddDevice *input;

/**
 Designated initializer for StructAddDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAddDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputRemoveDevice

/**
 StructInputRemoveDevice, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> remove-device -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputRemoveDevice example:
      StructInputRemoveDevice *input = [[StructInputRemoveDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputRemoveDevice
      if ((error = [input setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputRemoveDevice
      [input getIndex];
      [input getMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputRemoveDevice : NSObject


/**
 Designated initializer for StructInputRemoveDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputRemoveDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index number of the profile which is going to be applied.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Mac.
 
 Device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;


/**
 Getter for Index.
 
 The index number of the profile which is going to be applied.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Mac.
 
 Device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRemoveDevice

/**
 StructRemoveDevice, as in YANG: __remove-device__.
 
 Detailed Description: Immediate action for remove-device a specific profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> remove-device

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRemoveDevice example:
      StructRemoveDevice *removeDevice = [[StructRemoveDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"removeDevice init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!removeDevice) {
        NSLog(@"removeDevice is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"removeDevice init successful! toJson: %@", [removeDevice toJson]);
      NSLog(@"removeDevice validated result: %lu, 0 means it passes validation.", (unsigned long)[removeDevice validate]);
      
      // -----------------------------------------------
      // Setters of StructRemoveDevice
  
      // -----------------------------------------------
      // Getters of StructRemoveDevice
      [removeDevice getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"removeDevice toJson: %@", [removeDevice toJson]);
```
 
 */
@interface StructRemoveDevice : NSObject

/**
 As in YANG: __input__
 
 @see StructInputRemoveDevice
 */
@property (atomic, retain) StructInputRemoveDevice *input;

/**
 Designated initializer for StructRemoveDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRemoveDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputDeleteProfile

/**
 StructInputDeleteProfile, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> delete-profile -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputDeleteProfile example:
      StructInputDeleteProfile *input = [[StructInputDeleteProfile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputDeleteProfile
      if ((error = [input setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputDeleteProfile
      [input getIndex];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputDeleteProfile : NSObject


/**
 Designated initializer for StructInputDeleteProfile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputDeleteProfile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index number of the profile which is going to be deleted.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;


/**
 Getter for Index.
 
 The index number of the profile which is going to be deleted.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeleteProfile

/**
 StructDeleteProfile, as in YANG: __delete-profile__.
 
 Detailed Description: Delete a profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> delete-profile

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeleteProfile example:
      StructDeleteProfile *deleteProfile = [[StructDeleteProfile alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deleteProfile init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deleteProfile) {
        NSLog(@"deleteProfile is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deleteProfile init successful! toJson: %@", [deleteProfile toJson]);
      NSLog(@"deleteProfile validated result: %lu, 0 means it passes validation.", (unsigned long)[deleteProfile validate]);
      
      // -----------------------------------------------
      // Setters of StructDeleteProfile
  
      // -----------------------------------------------
      // Getters of StructDeleteProfile
      [deleteProfile getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deleteProfile toJson: %@", [deleteProfile toJson]);
```
 
 */
@interface StructDeleteProfile : NSObject

/**
 As in YANG: __input__
 
 @see StructInputDeleteProfile
 */
@property (atomic, retain) StructInputDeleteProfile *input;

/**
 Designated initializer for StructDeleteProfile either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeleteProfile if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl

/**
 StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl, as in YANG: __block__.
 
 Detailed Description: Immediate action for blocking a specific profile.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-parental-control -> block

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl example:
      StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl *block = [[StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"block init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!block) {
        NSLog(@"block is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"block init successful! toJson: %@", [block toJson]);
      NSLog(@"block validated result: %lu, 0 means it passes validation.", (unsigned long)[block validate]);
      
      // -----------------------------------------------
      // Setters of StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
  
      // -----------------------------------------------
      // Getters of StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl
      [block getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"block toJson: %@", [block toJson]);
```
 
 */
@interface StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUnblock
 */
@property (atomic, retain) StructInputUnblock *input;

/**
 Designated initializer for StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructBlockUrnZyxelCpeApplicationsZyxelApplicationsParentalControl if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSecondDnsServer

/**
 StructSecondDnsServer, as in YANG: __second-dns-server__.
 
 Detailed Description: The second DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ipv4-dns-server -> second-dns-server
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ipv4-dns-server -> first-dns-server
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ipv4-dns-server -> third-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSecondDnsServer example:
      StructSecondDnsServer *secondDnsServer = [[StructSecondDnsServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"secondDnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!secondDnsServer) {
        NSLog(@"secondDnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"secondDnsServer init successful! toJson: %@", [secondDnsServer toJson]);
      NSLog(@"secondDnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[secondDnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructSecondDnsServer
      if ((error = [secondDnsServer setDnsServerIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[secondDnsServer setDnsServerIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSecondDnsServer
      [secondDnsServer getDnsServer];
      [secondDnsServer getDnsServerIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"secondDnsServer toJson: %@", [secondDnsServer toJson]);
```
 
 */
@interface StructSecondDnsServer : NSObject


/**
 Designated initializer for StructSecondDnsServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSecondDnsServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for DnsServer.
 
 DNS server define type.
 
 @param aDnsServer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServer:(EnumDnsServerSecondDnsServer)aDnsServer;

/**
 Setter for DnsServerIp.
 
 The IPv4 address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aDnsServerIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDnsServerIp:(NSString *)aDnsServerIp;


/**
 Getter for DnsServer.
 
 DNS server define type.
 
 @return EnumDnsServerSecondDnsServer The value of property.
 */
- (EnumDnsServerSecondDnsServer)getDnsServer;

/**
 Getter for DnsServerIp.
 
 The IPv4 address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getDnsServerIp;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv4DnsServerCaseAccessPoint

/**
 StructIpv4DnsServerCaseAccessPoint, as in YANG: __ipv4-dns-server__.
 
 Detailed Description: IPv4 DNS server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ipv4-dns-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv4DnsServerCaseAccessPoint example:
      StructIpv4DnsServerCaseAccessPoint *ipv4DnsServer = [[StructIpv4DnsServerCaseAccessPoint alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv4DnsServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv4DnsServer) {
        NSLog(@"ipv4DnsServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv4DnsServer init successful! toJson: %@", [ipv4DnsServer toJson]);
      NSLog(@"ipv4DnsServer validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv4DnsServer validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv4DnsServerCaseAccessPoint
  
      // -----------------------------------------------
      // Getters of StructIpv4DnsServerCaseAccessPoint
      [ipv4DnsServer getSecondDnsServer];
      [ipv4DnsServer getFirstDnsServer];
      [ipv4DnsServer getThirdDnsServer];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv4DnsServer toJson: %@", [ipv4DnsServer toJson]);
```
 
 */
@interface StructIpv4DnsServerCaseAccessPoint : NSObject

/**
 As in YANG: __second-dns-server__
 
 @see StructSecondDnsServer
 */
@property (atomic, retain) StructSecondDnsServer *secondDnsServer;
/**
 As in YANG: __first-dns-server__
 
 @see StructSecondDnsServer
 */
@property (atomic, retain) StructSecondDnsServer *firstDnsServer;
/**
 As in YANG: __third-dns-server__
 
 @see StructSecondDnsServer
 */
@property (atomic, retain) StructSecondDnsServer *thirdDnsServer;

/**
 Designated initializer for StructIpv4DnsServerCaseAccessPoint either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv4DnsServerCaseAccessPoint if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticIpIpAddress

/**
 StructStaticIpIpAddress, as in YANG: __static-ip__.
 
 Detailed Description: Static IP.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ip-address -> static-ip
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticIpIpAddress example:
      StructStaticIpIpAddress *staticIp = [[StructStaticIpIpAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticIp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticIp) {
        NSLog(@"staticIp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticIp init successful! toJson: %@", [staticIp toJson]);
      NSLog(@"staticIp validated result: %lu, 0 means it passes validation.", (unsigned long)[staticIp validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticIpIpAddress
      if ((error = [staticIp setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIp setGateway:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setGateway:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIp setSubnet:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIp setSubnet:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticIpIpAddress
      [staticIp getIp];
      [staticIp getGateway];
      [staticIp getSubnet];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticIp toJson: %@", [staticIp toJson]);
```
 
 */
@interface StructStaticIpIpAddress : NSObject


/**
 Designated initializer for StructStaticIpIpAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticIpIpAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ip.
 
 Static IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for Gateway.
 
 The gateway address on the interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aGateway Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setGateway:(NSString *)aGateway;

/**
 Setter for Subnet.
 
 Subnet mask.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aSubnet Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSubnet:(NSString *)aSubnet;


/**
 Getter for Ip.
 
 Static IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for Gateway.
 
 The gateway address on the interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getGateway;

/**
 Getter for Subnet.
 
 Subnet mask.
 
 @return NSString * The value of property.
 */
- (NSString *)getSubnet;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpAddressCaseAccessPoint

/**
 StructIpAddressCaseAccessPoint, as in YANG: __ip-address__.
 
 Detailed Description: IP address.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point -> ip-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpAddressCaseAccessPoint example:
      StructIpAddressCaseAccessPoint *ipAddress = [[StructIpAddressCaseAccessPoint alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipAddress init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipAddress) {
        NSLog(@"ipAddress is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipAddress init successful! toJson: %@", [ipAddress toJson]);
      NSLog(@"ipAddress validated result: %lu, 0 means it passes validation.", (unsigned long)[ipAddress validate]);
      
      // -----------------------------------------------
      // Setters of StructIpAddressCaseAccessPoint
  
      // -----------------------------------------------
      // Getters of StructIpAddressCaseAccessPoint
      [ipAddress getIpAddressSetting];
      [ipAddress getStaticIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipAddress toJson: %@", [ipAddress toJson]);
```
 
 */
@interface StructIpAddressCaseAccessPoint : NSObject

/**
 As in YANG: __static-ip__
 
 @see StructStaticIpIpAddress
 */
@property (atomic, retain) StructStaticIpIpAddress *staticIp;

/**
 Designated initializer for StructIpAddressCaseAccessPoint either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpAddressCaseAccessPoint if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for IpAddressSetting.
 
 IP address.
 
 @param aIpAddressSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIpAddressSetting:(EnumIpAddressSettingIpAddressCaseAccessPoint)aIpAddressSetting;


/**
 Getter for IpAddressSetting.
 
 IP address.
 
 @return EnumIpAddressSettingIpAddressCaseAccessPoint The value of property.
 */
- (EnumIpAddressSettingIpAddressCaseAccessPoint)getIpAddressSetting;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseAccessPoint

/**
 StructCaseAccessPoint, as in YANG: __case_Access_Point__.
 
 Detailed Description: <b>Access_Point</b>(in YANG) is a case of choice: opmode
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Access_Point
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseAccessPoint example:
      StructCaseAccessPoint *caseAccessPoint = [[StructCaseAccessPoint alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseAccessPoint init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseAccessPoint) {
        NSLog(@"caseAccessPoint is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseAccessPoint init successful! toJson: %@", [caseAccessPoint toJson]);
      NSLog(@"caseAccessPoint validated result: %lu, 0 means it passes validation.", (unsigned long)[caseAccessPoint validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseAccessPoint
  
      // -----------------------------------------------
      // Getters of StructCaseAccessPoint
      [caseAccessPoint getIpv4DnsServer];
      [caseAccessPoint getIpAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseAccessPoint toJson: %@", [caseAccessPoint toJson]);
```
 
 */
@interface StructCaseAccessPoint : NSObject

/**
 As in YANG: __ipv4-dns-server__
 
 @see StructIpv4DnsServerCaseAccessPoint
 */
@property (atomic, retain) StructIpv4DnsServerCaseAccessPoint *ipv4DnsServer;
/**
 As in YANG: __ip-address__
 
 @see StructIpAddressCaseAccessPoint
 */
@property (atomic, retain) StructIpAddressCaseAccessPoint *ipAddress;

/**
 Designated initializer for StructCaseAccessPoint either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseAccessPoint if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDhcpServer

/**
 StructDhcpServer, as in YANG: __dhcp-server__.
 
 Detailed Description: DHCP server setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> dhcp-server
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDhcpServer example:
      StructDhcpServer *dhcpServer = [[StructDhcpServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dhcpServer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dhcpServer) {
        NSLog(@"dhcpServer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dhcpServer init successful! toJson: %@", [dhcpServer toJson]);
      NSLog(@"dhcpServer validated result: %lu, 0 means it passes validation.", (unsigned long)[dhcpServer validate]);
      
      // -----------------------------------------------
      // Setters of StructDhcpServer
      if ((error = [dhcpServer setPoolSize:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServer setPoolSize:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServer setPoolStartingAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServer setPoolStartingAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServer setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServer setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [dhcpServer setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[dhcpServer setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDhcpServer
      [dhcpServer getPoolSize];
      [dhcpServer getPoolStartingAddress];
      [dhcpServer getEnabled];
      [dhcpServer getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dhcpServer toJson: %@", [dhcpServer toJson]);
```
 
 */
@interface StructDhcpServer : NSObject


/**
 Designated initializer for StructDhcpServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDhcpServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PoolSize.
 
 The value plus starting address is the last IPv4 address in the pool
to be assigned by the DHCP server on the specified interface
 
 @param aPoolSize Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPoolSize:(NSInteger)aPoolSize;

/**
 Setter for PoolStartingAddress.
 
 Specifies first IPv4 address in the pool to be assigned by the DHCP
server on the specified interface.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aPoolStartingAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPoolStartingAddress:(NSString *)aPoolStartingAddress;

/**
 Setter for Enabled.
 
 Enable/Disable the DHCPv4 server entry.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Name.
 
 Name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for PoolSize.
 
 The value plus starting address is the last IPv4 address in the pool
to be assigned by the DHCP server on the specified interface
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPoolSize;

/**
 Getter for PoolStartingAddress.
 
 Specifies first IPv4 address in the pool to be assigned by the DHCP
server on the specified interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getPoolStartingAddress;

/**
 Getter for Enabled.
 
 Enable/Disable the DHCPv4 server entry.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Name.
 
 Name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticDhcpTableElement

/**
 StructStaticDhcpTableElement, as in YANG: __static-dhcp-table-element__.
 
 Detailed Description: Assign IP addressed on the LAN to specific individual devices based
on their MAC addressed.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> static-dhcp -> static-dhcp-table -> static-dhcp-table-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticDhcpTableElement example:
      StructStaticDhcpTableElement *staticDhcpTableElement = [[StructStaticDhcpTableElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticDhcpTableElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticDhcpTableElement) {
        NSLog(@"staticDhcpTableElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticDhcpTableElement init successful! toJson: %@", [staticDhcpTableElement toJson]);
      NSLog(@"staticDhcpTableElement validated result: %lu, 0 means it passes validation.", (unsigned long)[staticDhcpTableElement validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticDhcpTableElement
      if ((error = [staticDhcpTableElement setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticDhcpTableElement setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticDhcpTableElement setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticDhcpTableElement setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticDhcpTableElement
      [staticDhcpTableElement getIp];
      [staticDhcpTableElement getMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticDhcpTableElement toJson: %@", [staticDhcpTableElement toJson]);
```
 
 */
@interface StructStaticDhcpTableElement : NSObject


/**
 Designated initializer for StructStaticDhcpTableElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticDhcpTableElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ip.
 
 The assigned IPv4 address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for Mac.
 
 The MAC address of the sepcific individual device.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;


/**
 Getter for Ip.
 
 The assigned IPv4 address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for Mac.
 
 The MAC address of the sepcific individual device.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticDhcp

/**
 StructStaticDhcp, as in YANG: __static-dhcp__.
 
 Detailed Description: Static DHCP list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> static-dhcp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticDhcp example:
      StructStaticDhcp *staticDhcp = [[StructStaticDhcp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticDhcp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticDhcp) {
        NSLog(@"staticDhcp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticDhcp init successful! toJson: %@", [staticDhcp toJson]);
      NSLog(@"staticDhcp validated result: %lu, 0 means it passes validation.", (unsigned long)[staticDhcp validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticDhcp
  
      // -----------------------------------------------
      // Getters of StructStaticDhcp
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticDhcp toJson: %@", [staticDhcp toJson]);
```
 
 */
@interface StructStaticDhcp : NSObject

/**
 Array which contains StructStaticDhcpTableElement, as in YANG: __static-dhcp-table__
 
 Detailed Description: Assign IP addressed on the LAN to specific individual devices based
on their MAC addressed.
 
 @see StructStaticDhcpTableElement
 */
@property (atomic, retain) NSMutableArray <StructStaticDhcpTableElement *> *staticDhcpTable;

/**
 Designated initializer for StructStaticDhcp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticDhcp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructIpv6AddressRange

/**
 StructIpv6AddressRange, as in YANG: __ipv6-address-range__.
 
 Detailed Description: IPv6 address range.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> lan-ipv6-address-assignment -> enable-dhcpv6-pd -> ipv6-address-range
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructIpv6AddressRange example:
      StructIpv6AddressRange *ipv6AddressRange = [[StructIpv6AddressRange alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ipv6AddressRange init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ipv6AddressRange) {
        NSLog(@"ipv6AddressRange is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ipv6AddressRange init successful! toJson: %@", [ipv6AddressRange toJson]);
      NSLog(@"ipv6AddressRange validated result: %lu, 0 means it passes validation.", (unsigned long)[ipv6AddressRange validate]);
      
      // -----------------------------------------------
      // Setters of StructIpv6AddressRange
      if ((error = [ipv6AddressRange setStart:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipv6AddressRange setStart:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipv6AddressRange setEnd:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipv6AddressRange setEnd:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [ipv6AddressRange setLifetime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[ipv6AddressRange setLifetime:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructIpv6AddressRange
      [ipv6AddressRange getStart];
      [ipv6AddressRange getEnd];
      [ipv6AddressRange getLifetime];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ipv6AddressRange toJson: %@", [ipv6AddressRange toJson]);
```
 
 */
@interface StructIpv6AddressRange : NSObject


/**
 Designated initializer for StructIpv6AddressRange either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructIpv6AddressRange if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Start.
 
 Start address.
 
 @param aStart Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStart:(NSInteger)aStart;

/**
 Setter for End.
 
 End address.
 
 @param aEnd Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnd:(NSInteger)aEnd;

/**
 Setter for Lifetime.
 
 Lifetime.
 
 @param aLifetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLifetime:(NSInteger)aLifetime;


/**
 Getter for Start.
 
 Start address.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getStart;

/**
 Getter for End.
 
 End address.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getEnd;

/**
 Getter for Lifetime.
 
 Lifetime.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getLifetime;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructEnableDhcpv6Pd

/**
 StructEnableDhcpv6Pd, as in YANG: __enable-dhcpv6-pd__.
 
 Detailed Description: Enable DHCPv6 PD.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> lan-ipv6-address-assignment -> enable-dhcpv6-pd
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructEnableDhcpv6Pd example:
      StructEnableDhcpv6Pd *enableDhcpv6Pd = [[StructEnableDhcpv6Pd alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"enableDhcpv6Pd init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!enableDhcpv6Pd) {
        NSLog(@"enableDhcpv6Pd is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"enableDhcpv6Pd init successful! toJson: %@", [enableDhcpv6Pd toJson]);
      NSLog(@"enableDhcpv6Pd validated result: %lu, 0 means it passes validation.", (unsigned long)[enableDhcpv6Pd validate]);
      
      // -----------------------------------------------
      // Setters of StructEnableDhcpv6Pd
  
      // -----------------------------------------------
      // Getters of StructEnableDhcpv6Pd
      [enableDhcpv6Pd getAutoconfigurationType];
      [enableDhcpv6Pd getIpv6AddressRange];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"enableDhcpv6Pd toJson: %@", [enableDhcpv6Pd toJson]);
```
 
 */
@interface StructEnableDhcpv6Pd : NSObject

/**
 As in YANG: __ipv6-address-range__
 
 @see StructIpv6AddressRange
 */
@property (atomic, retain) StructIpv6AddressRange *ipv6AddressRange;

/**
 Designated initializer for StructEnableDhcpv6Pd either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructEnableDhcpv6Pd if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for AutoconfigurationType.
 
 Auto-configuration type.
 
 @param aAutoconfigurationType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAutoconfigurationType:(EnumAutoconfigurationType)aAutoconfigurationType;


/**
 Getter for AutoconfigurationType.
 
 Auto-configuration type.
 
 @return EnumAutoconfigurationType The value of property.
 */
- (EnumAutoconfigurationType)getAutoconfigurationType;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructStaticIpAddress

/**
 StructStaticIpAddress, as in YANG: __static-ip-address__.
 
 Detailed Description: Static IP address.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> lan-ipv6-address-assignment -> static-ip-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructStaticIpAddress example:
      StructStaticIpAddress *staticIpAddress = [[StructStaticIpAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"staticIpAddress init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!staticIpAddress) {
        NSLog(@"staticIpAddress is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"staticIpAddress init successful! toJson: %@", [staticIpAddress toJson]);
      NSLog(@"staticIpAddress validated result: %lu, 0 means it passes validation.", (unsigned long)[staticIpAddress validate]);
      
      // -----------------------------------------------
      // Setters of StructStaticIpAddress
      if ((error = [staticIpAddress setPrefixPreferredLifetime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpAddress setPrefixPreferredLifetime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpAddress setLanIpv6PrefixLength:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpAddress setLanIpv6PrefixLength:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpAddress setPrefixValidLifetime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpAddress setPrefixValidLifetime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [staticIpAddress setLanIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[staticIpAddress setLanIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructStaticIpAddress
      [staticIpAddress getPrefixPreferredLifetime];
      [staticIpAddress getLanIpv6PrefixLength];
      [staticIpAddress getPrefixValidLifetime];
      [staticIpAddress getLanIpv6Address];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"staticIpAddress toJson: %@", [staticIpAddress toJson]);
```
 
 */
@interface StructStaticIpAddress : NSObject


/**
 Designated initializer for StructStaticIpAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructStaticIpAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PrefixPreferredLifetime.
 
 Prefix preferred lifetime.
 
 @param aPrefixPreferredLifetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPrefixPreferredLifetime:(NSInteger)aPrefixPreferredLifetime;

/**
 Setter for LanIpv6PrefixLength.
 
 IPv6 prefix length.
 
 Range:       48..64

 @param aLanIpv6PrefixLength Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLanIpv6PrefixLength:(NSInteger)aLanIpv6PrefixLength;

/**
 Setter for PrefixValidLifetime.
 
 WAN name.
 
 @param aPrefixValidLifetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPrefixValidLifetime:(NSInteger)aPrefixValidLifetime;

/**
 Setter for LanIpv6Address.
 
 IPv6 address.
 
 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$,^([0-9a-fA-F:\.]*)$

 @param aLanIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLanIpv6Address:(NSString *)aLanIpv6Address;


/**
 Getter for PrefixPreferredLifetime.
 
 Prefix preferred lifetime.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPrefixPreferredLifetime;

/**
 Getter for LanIpv6PrefixLength.
 
 IPv6 prefix length.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getLanIpv6PrefixLength;

/**
 Getter for PrefixValidLifetime.
 
 WAN name.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPrefixValidLifetime;

/**
 Getter for LanIpv6Address.
 
 IPv6 address.
 
 @return NSString * The value of property.
 */
- (NSString *)getLanIpv6Address;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLanIpv6AddressAssignment

/**
 StructLanIpv6AddressAssignment, as in YANG: __lan-ipv6-address-assignment__.
 
 Detailed Description: IPv6 address assignment.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> lan-ipv6-address-assignment
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLanIpv6AddressAssignment example:
      StructLanIpv6AddressAssignment *lanIpv6AddressAssignment = [[StructLanIpv6AddressAssignment alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"lanIpv6AddressAssignment init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!lanIpv6AddressAssignment) {
        NSLog(@"lanIpv6AddressAssignment is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"lanIpv6AddressAssignment init successful! toJson: %@", [lanIpv6AddressAssignment toJson]);
      NSLog(@"lanIpv6AddressAssignment validated result: %lu, 0 means it passes validation.", (unsigned long)[lanIpv6AddressAssignment validate]);
      
      // -----------------------------------------------
      // Setters of StructLanIpv6AddressAssignment
      if ((error = [lanIpv6AddressAssignment setMinimumRaPeriod:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[lanIpv6AddressAssignment setMinimumRaPeriod:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructLanIpv6AddressAssignment
      [lanIpv6AddressAssignment getLinkLocalOnly];
      [lanIpv6AddressAssignment getAssignment];
      [lanIpv6AddressAssignment getEnableDhcpv6Pd];
      [lanIpv6AddressAssignment getMinimumRaPeriod];
      [lanIpv6AddressAssignment getUla];
      [lanIpv6AddressAssignment getStaticIpAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"lanIpv6AddressAssignment toJson: %@", [lanIpv6AddressAssignment toJson]);
```
 
 */
@interface StructLanIpv6AddressAssignment : NSObject

/**
 As in YANG: __enable-dhcpv6-pd__
 
 @see StructEnableDhcpv6Pd
 */
@property (atomic, retain) StructEnableDhcpv6Pd *enableDhcpv6Pd;
/**
 As in YANG: __static-ip-address__
 
 @see StructStaticIpAddress
 */
@property (atomic, retain) StructStaticIpAddress *staticIpAddress;

/**
 Designated initializer for StructLanIpv6AddressAssignment either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLanIpv6AddressAssignment if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Assignment.
 
 LAN IPv6 assignment address type.
 
 @param aAssignment Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAssignment:(EnumAssignment)aAssignment;

/**
 Setter for MinimumRaPeriod.
 
 Minmum RA period.
 
 @param aMinimumRaPeriod Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMinimumRaPeriod:(NSInteger)aMinimumRaPeriod;


/**
 Getter for Assignment.
 
 LAN IPv6 assignment address type.
 
 @return EnumAssignment The value of property.
 */
- (EnumAssignment)getAssignment;

/**
 Getter for MinimumRaPeriod.
 
 Minmum RA period.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMinimumRaPeriod;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLanIp

/**
 StructLanIp, as in YANG: __lan-ip__.
 
 Detailed Description: LAN IP setting.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router -> lan-ip
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLanIp example:
      StructLanIp *lanIp = [[StructLanIp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"lanIp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!lanIp) {
        NSLog(@"lanIp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"lanIp init successful! toJson: %@", [lanIp toJson]);
      NSLog(@"lanIp validated result: %lu, 0 means it passes validation.", (unsigned long)[lanIp validate]);
      
      // -----------------------------------------------
      // Setters of StructLanIp
      if ((error = [lanIp setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[lanIp setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [lanIp setSubnet:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[lanIp setSubnet:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructLanIp
      [lanIp getIp];
      [lanIp getSubnet];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"lanIp toJson: %@", [lanIp toJson]);
```
 
 */
@interface StructLanIp : NSObject


/**
 Designated initializer for StructLanIp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLanIp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Ip.
 
 The IP of LAN settings.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for Subnet.
 
 The subnet of LAN settings.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aSubnet Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSubnet:(NSString *)aSubnet;


/**
 Getter for Ip.
 
 The IP of LAN settings.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for Subnet.
 
 The subnet of LAN settings.
 
 @return NSString * The value of property.
 */
- (NSString *)getSubnet;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseRouter

/**
 StructCaseRouter, as in YANG: __case_Router__.
 
 Detailed Description: <b>Router</b>(in YANG) is a case of choice: opmode
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode -> case_Router
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseRouter example:
      StructCaseRouter *caseRouter = [[StructCaseRouter alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseRouter init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseRouter) {
        NSLog(@"caseRouter is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseRouter init successful! toJson: %@", [caseRouter toJson]);
      NSLog(@"caseRouter validated result: %lu, 0 means it passes validation.", (unsigned long)[caseRouter validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseRouter
  
      // -----------------------------------------------
      // Getters of StructCaseRouter
      [caseRouter getDhcpServer];
      [caseRouter getStaticDhcp];
      [caseRouter getLanIpv6AddressAssignment];
      [caseRouter getLanIp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseRouter toJson: %@", [caseRouter toJson]);
```
 
 */
@interface StructCaseRouter : NSObject

/**
 As in YANG: __dhcp-server__
 
 @see StructDhcpServer
 */
@property (atomic, retain) StructDhcpServer *dhcpServer;
/**
 As in YANG: __static-dhcp__
 
 @see StructStaticDhcp
 */
@property (atomic, retain) StructStaticDhcp *staticDhcp;
/**
 As in YANG: __lan-ipv6-address-assignment__
 
 @see StructLanIpv6AddressAssignment
 */
@property (atomic, retain) StructLanIpv6AddressAssignment *lanIpv6AddressAssignment;
/**
 As in YANG: __lan-ip__
 
 @see StructLanIp
 */
@property (atomic, retain) StructLanIp *lanIp;

/**
 Designated initializer for StructCaseRouter either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseRouter if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOpmode

/**
 StructOpmode, as in YANG: __opmode__.
 
 Detailed Description: Operation mode.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element -> opmode
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOpmode example:
      StructOpmode *opmode = [[StructOpmode alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"opmode init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!opmode) {
        NSLog(@"opmode is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"opmode init successful! toJson: %@", [opmode toJson]);
      NSLog(@"opmode validated result: %lu, 0 means it passes validation.", (unsigned long)[opmode validate]);
      
      // -----------------------------------------------
      // Setters of StructOpmode
  
      // -----------------------------------------------
      // Getters of StructOpmode
      [opmode getCaseAccessPoint];
      [opmode getCaseRouter];
      [opmode getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"opmode toJson: %@", [opmode toJson]);
```
 
 */
@interface StructOpmode : NSObject

/**
 As in YANG: __case_Access_Point__
 
 @see StructCaseAccessPoint
 */
@property (atomic, retain) StructCaseAccessPoint *caseAccessPoint;
/**
 As in YANG: __case_Router__
 
 @see StructCaseRouter
 */
@property (atomic, retain) StructCaseRouter *caseRouter;

/**
 Designated initializer for StructOpmode either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOpmode if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: opmode, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseOpmode)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: opmode, was not in original defined YANG data model.
 
 @return EnumCurrentCaseOpmode The value of property.
 */
- (EnumCurrentCaseOpmode)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNetworkElement

/**
 StructNetworkElement, as in YANG: __network-element__.
 
 Detailed Description: Network.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan -> network -> network-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNetworkElement example:
      StructNetworkElement *networkElement = [[StructNetworkElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"networkElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!networkElement) {
        NSLog(@"networkElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"networkElement init successful! toJson: %@", [networkElement toJson]);
      NSLog(@"networkElement validated result: %lu, 0 means it passes validation.", (unsigned long)[networkElement validate]);
      
      // -----------------------------------------------
      // Setters of StructNetworkElement
      if ((error = [networkElement setBaseInterface:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[networkElement setBaseInterface:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [networkElement setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[networkElement setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [networkElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[networkElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNetworkElement
      [networkElement getBaseInterface];
      [networkElement getEnabled];
      [networkElement getName];
      [networkElement getOpmode];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"networkElement toJson: %@", [networkElement toJson]);
```
 
 */
@interface StructNetworkElement : NSObject

/**
 As in YANG: __opmode__
 
 @see StructOpmode
 */
@property (atomic, retain) StructOpmode *opmode;

/**
 Designated initializer for StructNetworkElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNetworkElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for BaseInterface.
 
 Based interface.
 
 @param aBaseInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBaseInterface:(NSString *)aBaseInterface;

/**
 Setter for Enabled.
 
 Enable/disable this network.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;

/**
 Setter for Name.
 
 The name of this network. It is the key index of the network list.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for BaseInterface.
 
 Based interface.
 
 @return NSString * The value of property.
 */
- (NSString *)getBaseInterface;

/**
 Getter for Enabled.
 
 Enable/disable this network.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;

/**
 Getter for Name.
 
 The name of this network. It is the key index of the network list.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLan

/**
 StructLan, as in YANG: __lan__.
 
 Detailed Description: Local area network.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-lan-profile -> lan

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLan example:
      StructLan *lan = [[StructLan alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"lan init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!lan) {
        NSLog(@"lan is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"lan init successful! toJson: %@", [lan toJson]);
      NSLog(@"lan validated result: %lu, 0 means it passes validation.", (unsigned long)[lan validate]);
      
      // -----------------------------------------------
      // Setters of StructLan
  
      // -----------------------------------------------
      // Getters of StructLan
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"lan toJson: %@", [lan toJson]);
```
 
 */
@interface StructLan : NSObject

/**
 Array which contains StructNetworkElement, as in YANG: __network__
 
 Detailed Description: Network.
 
 @see StructNetworkElement
 */
@property (atomic, retain) NSMutableArray <StructNetworkElement *> *network;

/**
 Designated initializer for StructLan either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLan if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSetCurrentDatetime

/**
 StructInputSetCurrentDatetime, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> set-current-datetime -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSetCurrentDatetime example:
      StructInputSetCurrentDatetime *input = [[StructInputSetCurrentDatetime alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSetCurrentDatetime
      if ((error = [input setCurrentDatetime:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setCurrentDatetime:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSetCurrentDatetime
      [input getCurrentDatetime];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSetCurrentDatetime : NSObject


/**
 Designated initializer for StructInputSetCurrentDatetime either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSetCurrentDatetime if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentDatetime.
 
 The current system date and time.
For example: '1970-01-01T12:13:14+08:00'
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aCurrentDatetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentDatetime:(NSString *)aCurrentDatetime;


/**
 Getter for CurrentDatetime.
 
 The current system date and time.
For example: '1970-01-01T12:13:14+08:00'
 
 @return NSString * The value of property.
 */
- (NSString *)getCurrentDatetime;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetCurrentDatetime

/**
 StructSetCurrentDatetime, as in YANG: __set-current-datetime__.
 
 Detailed Description: Set the /system-state/clock/current-datetime leaf
to the specified value.

If the system is using NTP (i.e., /system/ntp/enabled
is set to 'true'), then this operation will fail with
error-tag 'operation-failed' and error-app-tag value of
'ntp-active'.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> set-current-datetime

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetCurrentDatetime example:
      StructSetCurrentDatetime *setCurrentDatetime = [[StructSetCurrentDatetime alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setCurrentDatetime init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setCurrentDatetime) {
        NSLog(@"setCurrentDatetime is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setCurrentDatetime init successful! toJson: %@", [setCurrentDatetime toJson]);
      NSLog(@"setCurrentDatetime validated result: %lu, 0 means it passes validation.", (unsigned long)[setCurrentDatetime validate]);
      
      // -----------------------------------------------
      // Setters of StructSetCurrentDatetime
  
      // -----------------------------------------------
      // Getters of StructSetCurrentDatetime
      [setCurrentDatetime getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setCurrentDatetime toJson: %@", [setCurrentDatetime toJson]);
```
 
 */
@interface StructSetCurrentDatetime : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSetCurrentDatetime
 */
@property (atomic, retain) StructInputSetCurrentDatetime *input;

/**
 Designated initializer for StructSetCurrentDatetime either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetCurrentDatetime if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemShutdown

/**
 StructSystemShutdown, as in YANG: __system-shutdown__.
 
 Detailed Description: Request that the entire system be shut down immediately.
A server SHOULD send an rpc reply to the client before
shutting down the system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-shutdown

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemShutdown example:
      StructSystemShutdown *systemShutdown = [[StructSystemShutdown alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemShutdown init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemShutdown) {
        NSLog(@"systemShutdown is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemShutdown init successful! toJson: %@", [systemShutdown toJson]);
      NSLog(@"systemShutdown validated result: %lu, 0 means it passes validation.", (unsigned long)[systemShutdown validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemShutdown
  
      // -----------------------------------------------
      // Getters of StructSystemShutdown
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemShutdown toJson: %@", [systemShutdown toJson]);
```
 
 */
@interface StructSystemShutdown : NSObject


/**
 Designated initializer for StructSystemShutdown either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemShutdown if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemConfigRestore

/**
 StructSystemConfigRestore, as in YANG: __system-config-restore__.
 
 Detailed Description: Restore the configuration after the configuration is uploaded.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-config-restore

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemConfigRestore example:
      StructSystemConfigRestore *systemConfigRestore = [[StructSystemConfigRestore alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemConfigRestore init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemConfigRestore) {
        NSLog(@"systemConfigRestore is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemConfigRestore init successful! toJson: %@", [systemConfigRestore toJson]);
      NSLog(@"systemConfigRestore validated result: %lu, 0 means it passes validation.", (unsigned long)[systemConfigRestore validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemConfigRestore
  
      // -----------------------------------------------
      // Getters of StructSystemConfigRestore
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemConfigRestore toJson: %@", [systemConfigRestore toJson]);
```
 
 */
@interface StructSystemConfigRestore : NSObject


/**
 Designated initializer for StructSystemConfigRestore either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemConfigRestore if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSystemFactoryPassword

/**
 StructInputSystemFactoryPassword, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-factory-password -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSystemFactoryPassword example:
      StructInputSystemFactoryPassword *input = [[StructInputSystemFactoryPassword alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSystemFactoryPassword
      if ((error = [input setPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSystemFactoryPassword
      [input getPassword];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSystemFactoryPassword : NSObject


/**
 Designated initializer for StructInputSystemFactoryPassword either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSystemFactoryPassword if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Password.
 
 a pre-defined string (like device serial number) to verify the
integrity for reseting the root password
 
 @param aPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPassword:(NSString *)aPassword;


/**
 Getter for Password.
 
 a pre-defined string (like device serial number) to verify the
integrity for reseting the root password
 
 @return NSString * The value of property.
 */
- (NSString *)getPassword;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemFactoryPassword

/**
 StructSystemFactoryPassword, as in YANG: __system-factory-password__.
 
 Detailed Description: input a pre-defined password for reset root password to factory default
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-factory-password

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemFactoryPassword example:
      StructSystemFactoryPassword *systemFactoryPassword = [[StructSystemFactoryPassword alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemFactoryPassword init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemFactoryPassword) {
        NSLog(@"systemFactoryPassword is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemFactoryPassword init successful! toJson: %@", [systemFactoryPassword toJson]);
      NSLog(@"systemFactoryPassword validated result: %lu, 0 means it passes validation.", (unsigned long)[systemFactoryPassword validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemFactoryPassword
  
      // -----------------------------------------------
      // Getters of StructSystemFactoryPassword
      [systemFactoryPassword getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemFactoryPassword toJson: %@", [systemFactoryPassword toJson]);
```
 
 */
@interface StructSystemFactoryPassword : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSystemFactoryPassword
 */
@property (atomic, retain) StructInputSystemFactoryPassword *input;

/**
 Designated initializer for StructSystemFactoryPassword either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemFactoryPassword if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputSystemConfigUpload

/**
 StructOutputSystemConfigUpload, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-config-upload -> output
- urn:zyxel:cpe:system:zyxel-system -> system-config-backup -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputSystemConfigUpload example:
      StructOutputSystemConfigUpload *output = [[StructOutputSystemConfigUpload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputSystemConfigUpload
  
      // -----------------------------------------------
      // Getters of StructOutputSystemConfigUpload
      [output getConfig];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputSystemConfigUpload : NSObject


/**
 Designated initializer for StructOutputSystemConfigUpload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputSystemConfigUpload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Config.
 
 Base64 encoded file.
 
 @param aConfig Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setConfig:(NSString *)aConfig;


/**
 Getter for Config.
 
 Base64 encoded file.
 
 @return NSString * The value of property.
 */
- (NSString *)getConfig;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemConfigUpload

/**
 StructSystemConfigUpload, as in YANG: __system-config-upload__.
 
 Detailed Description: Restore the configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-config-upload

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemConfigUpload example:
      StructSystemConfigUpload *systemConfigUpload = [[StructSystemConfigUpload alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemConfigUpload init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemConfigUpload) {
        NSLog(@"systemConfigUpload is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemConfigUpload init successful! toJson: %@", [systemConfigUpload toJson]);
      NSLog(@"systemConfigUpload validated result: %lu, 0 means it passes validation.", (unsigned long)[systemConfigUpload validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemConfigUpload
  
      // -----------------------------------------------
      // Getters of StructSystemConfigUpload
      [systemConfigUpload getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemConfigUpload toJson: %@", [systemConfigUpload toJson]);
```
 
 */
@interface StructSystemConfigUpload : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputSystemConfigUpload
 */
@property (atomic, retain) StructOutputSystemConfigUpload *output;

/**
 Designated initializer for StructSystemConfigUpload either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemConfigUpload if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemConfigBackup

/**
 StructSystemConfigBackup, as in YANG: __system-config-backup__.
 
 Detailed Description: Backup configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-config-backup

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemConfigBackup example:
      StructSystemConfigBackup *systemConfigBackup = [[StructSystemConfigBackup alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemConfigBackup init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemConfigBackup) {
        NSLog(@"systemConfigBackup is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemConfigBackup init successful! toJson: %@", [systemConfigBackup toJson]);
      NSLog(@"systemConfigBackup validated result: %lu, 0 means it passes validation.", (unsigned long)[systemConfigBackup validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemConfigBackup
  
      // -----------------------------------------------
      // Getters of StructSystemConfigBackup
      [systemConfigBackup getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemConfigBackup toJson: %@", [systemConfigBackup toJson]);
```
 
 */
@interface StructSystemConfigBackup : NSObject

/**
 As in YANG: __input__
 
 @see StructOutputSystemConfigUpload
 */
@property (atomic, retain) StructOutputSystemConfigUpload *input;

/**
 Designated initializer for StructSystemConfigBackup either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemConfigBackup if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLed

/**
 StructLed, as in YANG: __led__.
 
 Detailed Description: The LED configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> led
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLed example:
      StructLed *led = [[StructLed alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"led init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!led) {
        NSLog(@"led is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"led init successful! toJson: %@", [led toJson]);
      NSLog(@"led validated result: %lu, 0 means it passes validation.", (unsigned long)[led validate]);
      
      // -----------------------------------------------
      // Setters of StructLed
      if ((error = [led setTurnOn:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[led setTurnOn:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructLed
      [led getTurnOn];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"led toJson: %@", [led toJson]);
```
 
 */
@interface StructLed : NSObject


/**
 Designated initializer for StructLed either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLed if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for TurnOn.
 
 True for turning on LED. False for off.
 
 @param aTurnOn Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTurnOn:(BOOL)aTurnOn;


/**
 Getter for TurnOn.
 
 True for turning on LED. False for off.
 
 @return BOOL The value of property.
 */
- (BOOL)getTurnOn;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseTimezoneName

/**
 StructCaseTimezoneName, as in YANG: __case_timezone-name__.
 
 Detailed Description: <b>timezone-name</b>(in YANG) is a case of choice: timezone
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> clock -> timezone -> case_timezone-name
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseTimezoneName example:
      StructCaseTimezoneName *caseTimezoneName = [[StructCaseTimezoneName alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseTimezoneName init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseTimezoneName) {
        NSLog(@"caseTimezoneName is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseTimezoneName init successful! toJson: %@", [caseTimezoneName toJson]);
      NSLog(@"caseTimezoneName validated result: %lu, 0 means it passes validation.", (unsigned long)[caseTimezoneName validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseTimezoneName
      if ((error = [caseTimezoneName setTimezoneName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[caseTimezoneName setTimezoneName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseTimezoneName
      [caseTimezoneName getTimezoneName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseTimezoneName toJson: %@", [caseTimezoneName toJson]);
```
 
 */
@interface StructCaseTimezoneName : NSObject


/**
 Designated initializer for StructCaseTimezoneName either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseTimezoneName if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for TimezoneName.
 
 The TZ database name to use for the system, such
as 'Europe/Stockholm'.
 
 @param aTimezoneName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimezoneName:(NSString *)aTimezoneName;


/**
 Getter for TimezoneName.
 
 The TZ database name to use for the system, such
as 'Europe/Stockholm'.
 
 @return NSString * The value of property.
 */
- (NSString *)getTimezoneName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseTimezoneUtcOffset

/**
 StructCaseTimezoneUtcOffset, as in YANG: __case_timezone-utc-offset__.
 
 Detailed Description: <b>timezone-utc-offset</b>(in YANG) is a case of choice: timezone
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> clock -> timezone -> case_timezone-utc-offset
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseTimezoneUtcOffset example:
      StructCaseTimezoneUtcOffset *caseTimezoneUtcOffset = [[StructCaseTimezoneUtcOffset alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseTimezoneUtcOffset init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseTimezoneUtcOffset) {
        NSLog(@"caseTimezoneUtcOffset is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseTimezoneUtcOffset init successful! toJson: %@", [caseTimezoneUtcOffset toJson]);
      NSLog(@"caseTimezoneUtcOffset validated result: %lu, 0 means it passes validation.", (unsigned long)[caseTimezoneUtcOffset validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseTimezoneUtcOffset
      if ((error = [caseTimezoneUtcOffset setIndex:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[caseTimezoneUtcOffset setIndex:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [caseTimezoneUtcOffset setTimezoneUtcOffset:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[caseTimezoneUtcOffset setTimezoneUtcOffset:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructCaseTimezoneUtcOffset
      [caseTimezoneUtcOffset getIndex];
      [caseTimezoneUtcOffset getTimezoneUtcOffset];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseTimezoneUtcOffset toJson: %@", [caseTimezoneUtcOffset toJson]);
```
 
 */
@interface StructCaseTimezoneUtcOffset : NSObject


/**
 Designated initializer for StructCaseTimezoneUtcOffset either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseTimezoneUtcOffset if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The index of time zone list. In case of there are same utc offset
with different item like '(GMT+08:00) Perth, Taipei' and
'(GMT+08:00) Beijing, Hong Kong'
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSInteger)aIndex;

/**
 Setter for TimezoneUtcOffset.
 
 The number of minutes to add to UTC time to
identify the time zone for this system.  For example,
'UTC - 8:00 hours' would be represented as '-480'.
Note that automatic daylight saving time adjustment
is not provided if this object is used.
 
 Range:       -1500 .. 1500

 @param aTimezoneUtcOffset Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimezoneUtcOffset:(NSInteger)aTimezoneUtcOffset;


/**
 Getter for Index.
 
 The index of time zone list. In case of there are same utc offset
with different item like '(GMT+08:00) Perth, Taipei' and
'(GMT+08:00) Beijing, Hong Kong'
 
 @return NSInteger The value of property.
 */
- (NSInteger)getIndex;

/**
 Getter for TimezoneUtcOffset.
 
 The number of minutes to add to UTC time to
identify the time zone for this system.  For example,
'UTC - 8:00 hours' would be represented as '-480'.
Note that automatic daylight saving time adjustment
is not provided if this object is used.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getTimezoneUtcOffset;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTimezone

/**
 StructTimezone, as in YANG: __timezone__.
 
 Detailed Description: The system time zone information.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> clock -> timezone
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTimezone example:
      StructTimezone *timezone = [[StructTimezone alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"timezone init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!timezone) {
        NSLog(@"timezone is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"timezone init successful! toJson: %@", [timezone toJson]);
      NSLog(@"timezone validated result: %lu, 0 means it passes validation.", (unsigned long)[timezone validate]);
      
      // -----------------------------------------------
      // Setters of StructTimezone
  
      // -----------------------------------------------
      // Getters of StructTimezone
      [timezone getCaseTimezoneName];
      [timezone getCaseTimezoneUtcOffset];
      [timezone getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"timezone toJson: %@", [timezone toJson]);
```
 
 */
@interface StructTimezone : NSObject

/**
 As in YANG: __case_timezone-name__
 
 @see StructCaseTimezoneName
 */
@property (atomic, retain) StructCaseTimezoneName *caseTimezoneName;
/**
 As in YANG: __case_timezone-utc-offset__
 
 @see StructCaseTimezoneUtcOffset
 */
@property (atomic, retain) StructCaseTimezoneUtcOffset *caseTimezoneUtcOffset;

/**
 Designated initializer for StructTimezone either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTimezone if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: timezone, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseTimezone)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: timezone, was not in original defined YANG data model.
 
 @return EnumCurrentCaseTimezone The value of property.
 */
- (EnumCurrentCaseTimezone)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructClock

/**
 StructClock, as in YANG: __clock__.
 
 Detailed Description: Configuration of the system date and time properties.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> clock
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructClock example:
      StructClock *clock = [[StructClock alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"clock init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!clock) {
        NSLog(@"clock is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"clock init successful! toJson: %@", [clock toJson]);
      NSLog(@"clock validated result: %lu, 0 means it passes validation.", (unsigned long)[clock validate]);
      
      // -----------------------------------------------
      // Setters of StructClock
      if ((error = [clock setTimeSetting:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[clock setTimeSetting:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructClock
      [clock getTimezone];
      [clock getTimeSetting];
      [clock getMode];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"clock toJson: %@", [clock toJson]);
```
 
 */
@interface StructClock : NSObject

/**
 As in YANG: __timezone__
 
 @see StructTimezone
 */
@property (atomic, retain) StructTimezone *timezone;

/**
 Designated initializer for StructClock either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructClock if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for TimeSetting.
 
 set time manually
For example: '1970-01-01T12:13:14+08:00'
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aTimeSetting Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimeSetting:(NSString *)aTimeSetting;

/**
 Setter for Mode.
 
 mode for time setting manually or sync with ntp
 
 @param aMode Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMode:(EnumModeClock)aMode;


/**
 Getter for TimeSetting.
 
 set time manually
For example: '1970-01-01T12:13:14+08:00'
 
 @return NSString * The value of property.
 */
- (NSString *)getTimeSetting;

/**
 Getter for Mode.
 
 mode for time setting manually or sync with ntp
 
 @return EnumModeClock The value of property.
 */
- (EnumModeClock)getMode;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAddress

/**
 StructAddress, as in YANG: __address__.
 
 Detailed Description: The address of the NTP server.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp -> server -> server-element -> transport -> case_udp -> udp -> address
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> server -> server-element -> transport -> case_udp -> udp -> address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAddress example:
      StructAddress *address = [[StructAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"address init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!address) {
        NSLog(@"address is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"address init successful! toJson: %@", [address toJson]);
      NSLog(@"address validated result: %lu, 0 means it passes validation.", (unsigned long)[address validate]);
      
      // -----------------------------------------------
      // Setters of StructAddress
      if ((error = [address setUnionOfInetDomainName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[address setUnionOfInetDomainName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [address setUnionOfInetIpv4Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[address setUnionOfInetIpv4Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [address setUnionOfInetIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[address setUnionOfInetIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructAddress
      [address getUnionOfInetDomainName];
      [address getUnionOfInetIpv4Address];
      [address getUnionOfInetIpv6Address];
      [address getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"address toJson: %@", [address toJson]);
```
 
 */
@interface StructAddress : NSObject


/**
 Designated initializer for StructAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfInetDomainName.

 Length:      1..253

 Pattern:     ^(((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.)$

 @param aUnionOfInetDomainName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetDomainName:(NSString *)aUnionOfInetDomainName;

/**
 Setter for UnionOfInetIpv4Address.

 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aUnionOfInetIpv4Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv4Address:(NSString *)aUnionOfInetIpv4Address;

/**
 Setter for UnionOfInetIpv6Address.

 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$

 @param aUnionOfInetIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv6Address:(NSString *)aUnionOfInetIpv6Address;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: address, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItem)aCurrentUnionItem;


/**
 Getter for UnionOfInetDomainName.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetDomainName;

/**
 Getter for UnionOfInetIpv4Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv4Address;

/**
 Getter for UnionOfInetIpv6Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv6Address;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: address, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItem The value of property.
 */
- (EnumCurrentUnionItem)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUdp

/**
 StructUdp, as in YANG: __udp__.
 
 Detailed Description: Contains UDP-specific configuration parameters
for NTP.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp -> server -> server-element -> transport -> case_udp -> udp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUdp example:
      StructUdp *udp = [[StructUdp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"udp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!udp) {
        NSLog(@"udp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"udp init successful! toJson: %@", [udp toJson]);
      NSLog(@"udp validated result: %lu, 0 means it passes validation.", (unsigned long)[udp validate]);
      
      // -----------------------------------------------
      // Setters of StructUdp
      if ((error = [udp setPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[udp setPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUdp
      [udp getPort];
      [udp getAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"udp toJson: %@", [udp toJson]);
```
 
 */
@interface StructUdp : NSObject

/**
 As in YANG: __address__
 
 @see StructAddress
 */
@property (atomic, retain) StructAddress *address;

/**
 Designated initializer for StructUdp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUdp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Port.
 
 The port number of the NTP server.
 
 Range:       1..65535

 @param aPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPort:(NSInteger)aPort;


/**
 Getter for Port.
 
 The port number of the NTP server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseUdp

/**
 StructCaseUdp, as in YANG: __case_udp__.
 
 Detailed Description: <b>udp</b>(in YANG) is a case of choice: transport
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp -> server -> server-element -> transport -> case_udp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseUdp example:
      StructCaseUdp *caseUdp = [[StructCaseUdp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseUdp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseUdp) {
        NSLog(@"caseUdp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseUdp init successful! toJson: %@", [caseUdp toJson]);
      NSLog(@"caseUdp validated result: %lu, 0 means it passes validation.", (unsigned long)[caseUdp validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseUdp
  
      // -----------------------------------------------
      // Getters of StructCaseUdp
      [caseUdp getUdp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseUdp toJson: %@", [caseUdp toJson]);
```
 
 */
@interface StructCaseUdp : NSObject

/**
 As in YANG: __udp__
 
 @see StructUdp
 */
@property (atomic, retain) StructUdp *udp;

/**
 Designated initializer for StructCaseUdp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseUdp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTransport

/**
 StructTransport, as in YANG: __transport__.
 
 Detailed Description: The transport-protocol-specific parameters for this
server.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp -> server -> server-element -> transport
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTransport example:
      StructTransport *transport = [[StructTransport alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"transport init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!transport) {
        NSLog(@"transport is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"transport init successful! toJson: %@", [transport toJson]);
      NSLog(@"transport validated result: %lu, 0 means it passes validation.", (unsigned long)[transport validate]);
      
      // -----------------------------------------------
      // Setters of StructTransport
  
      // -----------------------------------------------
      // Getters of StructTransport
      [transport getCaseUdp];
      [transport getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"transport toJson: %@", [transport toJson]);
```
 
 */
@interface StructTransport : NSObject

/**
 As in YANG: __case_udp__
 
 @see StructCaseUdp
 */
@property (atomic, retain) StructCaseUdp *caseUdp;

/**
 Designated initializer for StructTransport either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTransport if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseTransport)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @return EnumCurrentCaseTransport The value of property.
 */
- (EnumCurrentCaseTransport)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructServerElement

/**
 StructServerElement, as in YANG: __server-element__.
 
 Detailed Description: List of NTP servers to use for system clock
synchronization.  If '/system/ntp/enabled'
is 'true', then the system will attempt to
contact and utilize the specified NTP servers.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp -> server -> server-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructServerElement example:
      StructServerElement *serverElement = [[StructServerElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"serverElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!serverElement) {
        NSLog(@"serverElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"serverElement init successful! toJson: %@", [serverElement toJson]);
      NSLog(@"serverElement validated result: %lu, 0 means it passes validation.", (unsigned long)[serverElement validate]);
      
      // -----------------------------------------------
      // Setters of StructServerElement
      if ((error = [serverElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serverElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serverElement setPrefer:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[serverElement setPrefer:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [serverElement setIburst:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[serverElement setIburst:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructServerElement
      [serverElement getName];
      [serverElement getPrefer];
      [serverElement getAssociationType];
      [serverElement getIburst];
      [serverElement getTransport];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"serverElement toJson: %@", [serverElement toJson]);
```
 
 */
@interface StructServerElement : NSObject

/**
 As in YANG: __transport__
 
 @see StructTransport
 */
@property (atomic, retain) StructTransport *transport;

/**
 Designated initializer for StructServerElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructServerElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 An arbitrary name for the NTP server.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Prefer.
 
 Indicates whether this server should be preferred
or not.
 
 @param aPrefer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPrefer:(BOOL)aPrefer;

/**
 Setter for AssociationType.
 
 The desired association type for this NTP server.
 
 @param aAssociationType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAssociationType:(EnumAssociationType)aAssociationType;

/**
 Setter for Iburst.
 
 Indicates whether this server should enable burst
synchronization or not.
 
 @param aIburst Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIburst:(BOOL)aIburst;


/**
 Getter for Name.
 
 An arbitrary name for the NTP server.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Prefer.
 
 Indicates whether this server should be preferred
or not.
 
 @return BOOL The value of property.
 */
- (BOOL)getPrefer;

/**
 Getter for AssociationType.
 
 The desired association type for this NTP server.
 
 @return EnumAssociationType The value of property.
 */
- (EnumAssociationType)getAssociationType;

/**
 Getter for Iburst.
 
 Indicates whether this server should enable burst
synchronization or not.
 
 @return BOOL The value of property.
 */
- (BOOL)getIburst;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNtp

/**
 StructNtp, as in YANG: __ntp__.
 
 Detailed Description: Configuration of the NTP client.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> ntp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNtp example:
      StructNtp *ntp = [[StructNtp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"ntp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!ntp) {
        NSLog(@"ntp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"ntp init successful! toJson: %@", [ntp toJson]);
      NSLog(@"ntp validated result: %lu, 0 means it passes validation.", (unsigned long)[ntp validate]);
      
      // -----------------------------------------------
      // Setters of StructNtp
      if ((error = [ntp setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[ntp setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNtp
      [ntp getEnabled];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"ntp toJson: %@", [ntp toJson]);
```
 
 */
@interface StructNtp : NSObject

/**
 Array which contains StructServerElement, as in YANG: __server__
 
 Detailed Description: List of NTP servers to use for system clock
synchronization.  If '/system/ntp/enabled'
is 'true', then the system will attempt to
contact and utilize the specified NTP servers.
 
 @see StructServerElement
 */
@property (atomic, retain) NSMutableArray <StructServerElement *> *server;

/**
 Designated initializer for StructNtp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNtp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 Indicates that the system should attempt to
synchronize the system clock with an NTP server
from the 'ntp/server' list.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;


/**
 Getter for Enabled.
 
 Indicates that the system should attempt to
synchronize the system clock with an NTP server
from the 'ntp/server' list.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGeneral

/**
 StructGeneral, as in YANG: __general__.
 
 Detailed Description: Configuration of the system general settings.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> general
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGeneral example:
      StructGeneral *general = [[StructGeneral alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"general init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!general) {
        NSLog(@"general is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"general init successful! toJson: %@", [general toJson]);
      NSLog(@"general validated result: %lu, 0 means it passes validation.", (unsigned long)[general validate]);
      
      // -----------------------------------------------
      // Setters of StructGeneral
      if ((error = [general setHostname:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[general setHostname:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [general setAdministratorInactivityTimer:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[general setAdministratorInactivityTimer:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [general setSystemName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[general setSystemName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [general setLocation:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[general setLocation:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructGeneral
      [general getHostname];
      [general getAdministratorInactivityTimer];
      [general getSystemName];
      [general getLocation];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"general toJson: %@", [general toJson]);
```
 
 */
@interface StructGeneral : NSObject


/**
 Designated initializer for StructGeneral either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGeneral if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Hostname.
 
 The name of the host.  This name can be a single domain
label or the fully qualified domain name of the host.
 
 Length:      1..253

 Pattern:     ^(((([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.)*([a-zA-Z0-9_]([a-zA-Z0-9\-_]){0,61})?[a-zA-Z0-9]\.?)|\.)$

 @param aHostname Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHostname:(NSString *)aHostname;

/**
 Setter for AdministratorInactivityTimer.
 
 The amount of minutes the management session can be left idle before
the session times out. The amount of time the management session can be
left idle before the session times out.
 
 @param aAdministratorInactivityTimer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAdministratorInactivityTimer:(NSInteger)aAdministratorInactivityTimer;

/**
 Setter for SystemName.
 
 A unique name to identify the device in an ethernet network.
 
 Length:      1..20

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aSystemName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSystemName:(NSString *)aSystemName;

/**
 Setter for Location.
 
 The system location.

A server implementation MAY map this leaf to the sysLocation
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and sysLocation.  The definition
of such a mechanism is outside the scope of this document.
 
 @param aLocation Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLocation:(NSString *)aLocation;


/**
 Getter for Hostname.
 
 The name of the host.  This name can be a single domain
label or the fully qualified domain name of the host.
 
 @return NSString * The value of property.
 */
- (NSString *)getHostname;

/**
 Getter for AdministratorInactivityTimer.
 
 The amount of minutes the management session can be left idle before
the session times out. The amount of time the management session can be
left idle before the session times out.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getAdministratorInactivityTimer;

/**
 Getter for SystemName.
 
 A unique name to identify the device in an ethernet network.
 
 @return NSString * The value of property.
 */
- (NSString *)getSystemName;

/**
 Getter for Location.
 
 The system location.

A server implementation MAY map this leaf to the sysLocation
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and sysLocation.  The definition
of such a mechanism is outside the scope of this document.
 
 @return NSString * The value of property.
 */
- (NSString *)getLocation;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAuthorizedKeyElement

/**
 StructAuthorizedKeyElement, as in YANG: __authorized-key-element__.
 
 Detailed Description: A list of public SSH keys for this user.  These keys
are allowed for SSH authentication, as described in
RFC 4253.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> authentication -> user -> user-element -> authorized-key -> authorized-key-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAuthorizedKeyElement example:
      StructAuthorizedKeyElement *authorizedKeyElement = [[StructAuthorizedKeyElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"authorizedKeyElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!authorizedKeyElement) {
        NSLog(@"authorizedKeyElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"authorizedKeyElement init successful! toJson: %@", [authorizedKeyElement toJson]);
      NSLog(@"authorizedKeyElement validated result: %lu, 0 means it passes validation.", (unsigned long)[authorizedKeyElement validate]);
      
      // -----------------------------------------------
      // Setters of StructAuthorizedKeyElement
      if ((error = [authorizedKeyElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[authorizedKeyElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [authorizedKeyElement setAlgorithm:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[authorizedKeyElement setAlgorithm:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructAuthorizedKeyElement
      [authorizedKeyElement getKeyData];
      [authorizedKeyElement getName];
      [authorizedKeyElement getAlgorithm];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"authorizedKeyElement toJson: %@", [authorizedKeyElement toJson]);
```
 
 */
@interface StructAuthorizedKeyElement : NSObject


/**
 Designated initializer for StructAuthorizedKeyElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAuthorizedKeyElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for KeyData.
 
 The binary public key data for this SSH key, as
specified by RFC 4253, Section 6.6, i.e.:

  string    certificate or public key format
            identifier
  byte[n]   key/certificate data.
 
 @param aKeyData Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setKeyData:(NSString *)aKeyData;

/**
 Setter for Name.
 
 An arbitrary name for the SSH key.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Algorithm.
 
 The public key algorithm name for this SSH key.

Valid values are the values in the IANA 'Secure Shell
(SSH) Protocol Parameters' registry, Public Key
Algorithm Names.
 
 @param aAlgorithm Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAlgorithm:(NSString *)aAlgorithm;


/**
 Getter for KeyData.
 
 The binary public key data for this SSH key, as
specified by RFC 4253, Section 6.6, i.e.:

  string    certificate or public key format
            identifier
  byte[n]   key/certificate data.
 
 @return NSString * The value of property.
 */
- (NSString *)getKeyData;

/**
 Getter for Name.
 
 An arbitrary name for the SSH key.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Algorithm.
 
 The public key algorithm name for this SSH key.

Valid values are the values in the IANA 'Secure Shell
(SSH) Protocol Parameters' registry, Public Key
Algorithm Names.
 
 @return NSString * The value of property.
 */
- (NSString *)getAlgorithm;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUserElement

/**
 StructUserElement, as in YANG: __user-element__.
 
 Detailed Description: The list of local users configured on this device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> authentication -> user -> user-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUserElement example:
      StructUserElement *userElement = [[StructUserElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"userElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!userElement) {
        NSLog(@"userElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"userElement init successful! toJson: %@", [userElement toJson]);
      NSLog(@"userElement validated result: %lu, 0 means it passes validation.", (unsigned long)[userElement validate]);
      
      // -----------------------------------------------
      // Setters of StructUserElement
      if ((error = [userElement setPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [userElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUserElement
      [userElement getPassword];
      [userElement getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"userElement toJson: %@", [userElement toJson]);
```
 
 */
@interface StructUserElement : NSObject

/**
 Array which contains StructAuthorizedKeyElement, as in YANG: __authorized-key__
 
 Detailed Description: A list of public SSH keys for this user.  These keys
are allowed for SSH authentication, as described in
RFC 4253.
 
 @see StructAuthorizedKeyElement
 */
@property (atomic, retain) NSMutableArray <StructAuthorizedKeyElement *> *authorizedKey;

/**
 Designated initializer for StructUserElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUserElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Password.
 
 The password for this entry.
 
 Pattern:     ^($0$.*|$1$[a-zA-Z0-9./]{1,8}$[a-zA-Z0-9./]{22}|$5$(rounds=\d+$)?[a-zA-Z0-9./]{1,16}$[a-zA-Z0-9./]{43}|$6$(rounds=\d+$)?[a-zA-Z0-9./]{1,16}$[a-zA-Z0-9./]{86})$

 @param aPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPassword:(NSString *)aPassword;

/**
 Setter for Name.
 
 The user name string identifying this entry.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Password.
 
 The password for this entry.
 
 @return NSString * The value of property.
 */
- (NSString *)getPassword;

/**
 Getter for Name.
 
 The user name string identifying this entry.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAuthentication

/**
 StructAuthentication, as in YANG: __authentication__.
 
 Detailed Description: The authentication configuration subtree.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> authentication
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAuthentication example:
      StructAuthentication *authentication = [[StructAuthentication alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"authentication init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!authentication) {
        NSLog(@"authentication is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"authentication init successful! toJson: %@", [authentication toJson]);
      NSLog(@"authentication validated result: %lu, 0 means it passes validation.", (unsigned long)[authentication validate]);
      
      // -----------------------------------------------
      // Setters of StructAuthentication
  
      // -----------------------------------------------
      // Getters of StructAuthentication
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"authentication toJson: %@", [authentication toJson]);
```
 
 */
@interface StructAuthentication : NSObject

/**
 Array which contains NSString, as in YANG: __user-authentication-order__
 
 Detailed Description: When the device authenticates a user with a password,
it tries the authentication methods in this leaf-list in
order.  If authentication with one method fails, the next
method is used.  If no method succeeds, the user is
denied access.

An empty user-authentication-order leaf-list still allows
authentication of users using mechanisms that do not
involve a password.

If the 'radius-authentication' feature is advertised by
the NETCONF server, the 'radius' identity can be added to
this list.

If the 'local-users' feature is advertised by the
NETCONF server, the 'local-users' identity can be
added to this list.
 
 @see NSString
 */
@property (atomic, retain) NSMutableArray <NSString *> *userAuthenticationOrder;
/**
 Array which contains StructUserElement, as in YANG: __user__
 
 Detailed Description: The list of local users configured on this device.
 
 @see StructUserElement
 */
@property (atomic, retain) NSMutableArray <StructUserElement *> *user;

/**
 Designated initializer for StructAuthentication either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAuthentication if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOptions

/**
 StructOptions, as in YANG: __options__.
 
 Detailed Description: RADIUS client options.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> options
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOptions example:
      StructOptions *options = [[StructOptions alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"options init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!options) {
        NSLog(@"options is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"options init successful! toJson: %@", [options toJson]);
      NSLog(@"options validated result: %lu, 0 means it passes validation.", (unsigned long)[options validate]);
      
      // -----------------------------------------------
      // Setters of StructOptions
      if ((error = [options setAttempts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[options setAttempts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [options setTimeout:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[options setTimeout:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOptions
      [options getAttempts];
      [options getTimeout];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"options toJson: %@", [options toJson]);
```
 
 */
@interface StructOptions : NSObject


/**
 Designated initializer for StructOptions either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOptions if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Attempts.
 
 The number of times the device will send a query to
all of its RADIUS servers before giving up.
 
 Range:       1..max

 @param aAttempts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAttempts:(NSInteger)aAttempts;

/**
 Setter for Timeout.
 
 The number of seconds the device will wait for a
response from each RADIUS server before trying with a
different server.
 
 Range:       1..max

 @param aTimeout Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimeout:(NSInteger)aTimeout;


/**
 Getter for Attempts.
 
 The number of times the device will send a query to
all of its RADIUS servers before giving up.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getAttempts;

/**
 Getter for Timeout.
 
 The number of seconds the device will wait for a
response from each RADIUS server before trying with a
different server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getTimeout;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUdpCaseUdp

/**
 StructUdpCaseUdp, as in YANG: __udp__.
 
 Detailed Description: Contains UDP-specific configuration parameters
for RADIUS.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> server -> server-element -> transport -> case_udp -> udp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUdpCaseUdp example:
      StructUdpCaseUdp *udp = [[StructUdpCaseUdp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"udp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!udp) {
        NSLog(@"udp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"udp init successful! toJson: %@", [udp toJson]);
      NSLog(@"udp validated result: %lu, 0 means it passes validation.", (unsigned long)[udp validate]);
      
      // -----------------------------------------------
      // Setters of StructUdpCaseUdp
      if ((error = [udp setSharedSecret:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[udp setSharedSecret:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [udp setAuthenticationPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[udp setAuthenticationPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUdpCaseUdp
      [udp getSharedSecret];
      [udp getAuthenticationPort];
      [udp getAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"udp toJson: %@", [udp toJson]);
```
 
 */
@interface StructUdpCaseUdp : NSObject

/**
 As in YANG: __address__
 
 @see StructAddress
 */
@property (atomic, retain) StructAddress *address;

/**
 Designated initializer for StructUdpCaseUdp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUdpCaseUdp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for SharedSecret.
 
 The shared secret, which is known to both the
RADIUS client and server.
 
 @param aSharedSecret Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSharedSecret:(NSString *)aSharedSecret;

/**
 Setter for AuthenticationPort.
 
 The port number of the RADIUS server.
 
 Range:       1..65535

 @param aAuthenticationPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAuthenticationPort:(NSInteger)aAuthenticationPort;


/**
 Getter for SharedSecret.
 
 The shared secret, which is known to both the
RADIUS client and server.
 
 @return NSString * The value of property.
 */
- (NSString *)getSharedSecret;

/**
 Getter for AuthenticationPort.
 
 The port number of the RADIUS server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getAuthenticationPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseUdpTransport

/**
 StructCaseUdpTransport, as in YANG: __case_udp__.
 
 Detailed Description: <b>udp</b>(in YANG) is a case of choice: transport
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> server -> server-element -> transport -> case_udp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseUdpTransport example:
      StructCaseUdpTransport *caseUdp = [[StructCaseUdpTransport alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseUdp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseUdp) {
        NSLog(@"caseUdp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseUdp init successful! toJson: %@", [caseUdp toJson]);
      NSLog(@"caseUdp validated result: %lu, 0 means it passes validation.", (unsigned long)[caseUdp validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseUdpTransport
  
      // -----------------------------------------------
      // Getters of StructCaseUdpTransport
      [caseUdp getUdp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseUdp toJson: %@", [caseUdp toJson]);
```
 
 */
@interface StructCaseUdpTransport : NSObject

/**
 As in YANG: __udp__
 
 @see StructUdpCaseUdp
 */
@property (atomic, retain) StructUdpCaseUdp *udp;

/**
 Designated initializer for StructCaseUdpTransport either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseUdpTransport if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTransportServerElement

/**
 StructTransportServerElement, as in YANG: __transport__.
 
 Detailed Description: The transport-protocol-specific parameters for this
server.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> server -> server-element -> transport
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTransportServerElement example:
      StructTransportServerElement *transport = [[StructTransportServerElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"transport init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!transport) {
        NSLog(@"transport is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"transport init successful! toJson: %@", [transport toJson]);
      NSLog(@"transport validated result: %lu, 0 means it passes validation.", (unsigned long)[transport validate]);
      
      // -----------------------------------------------
      // Setters of StructTransportServerElement
  
      // -----------------------------------------------
      // Getters of StructTransportServerElement
      [transport getCaseUdp];
      [transport getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"transport toJson: %@", [transport toJson]);
```
 
 */
@interface StructTransportServerElement : NSObject

/**
 As in YANG: __case_udp__
 
 @see StructCaseUdpTransport
 */
@property (atomic, retain) StructCaseUdpTransport *caseUdp;

/**
 Designated initializer for StructTransportServerElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTransportServerElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseTransport)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @return EnumCurrentCaseTransport The value of property.
 */
- (EnumCurrentCaseTransport)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructServerElementServer

/**
 StructServerElementServer, as in YANG: __server-element__.
 
 Detailed Description: List of RADIUS servers used by the device.

When the RADIUS client is invoked by a calling
application, it sends the query to the first server in
this list.  If no response has been received within
'timeout' seconds, the client continues with the next
server in the list.  If no response is received from any
server, the client continues with the first server again.
When the client has traversed the list 'attempts' times
without receiving any response, it gives up and returns an
error to the calling application.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius -> server -> server-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructServerElementServer example:
      StructServerElementServer *serverElement = [[StructServerElementServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"serverElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!serverElement) {
        NSLog(@"serverElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"serverElement init successful! toJson: %@", [serverElement toJson]);
      NSLog(@"serverElement validated result: %lu, 0 means it passes validation.", (unsigned long)[serverElement validate]);
      
      // -----------------------------------------------
      // Setters of StructServerElementServer
      if ((error = [serverElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serverElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructServerElementServer
      [serverElement getAuthenticationType];
      [serverElement getName];
      [serverElement getTransport];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"serverElement toJson: %@", [serverElement toJson]);
```
 
 */
@interface StructServerElementServer : NSObject

/**
 As in YANG: __transport__
 
 @see StructTransportServerElement
 */
@property (atomic, retain) StructTransportServerElement *transport;

/**
 Designated initializer for StructServerElementServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructServerElementServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for AuthenticationType.
 
 The authentication type requested from the RADIUS
server.
 
 @param aAuthenticationType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAuthenticationType:(NSString *)aAuthenticationType;

/**
 Setter for Name.
 
 An arbitrary name for the RADIUS server.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for AuthenticationType.
 
 The authentication type requested from the RADIUS
server.
 
 @return NSString * The value of property.
 */
- (NSString *)getAuthenticationType;

/**
 Getter for Name.
 
 An arbitrary name for the RADIUS server.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRadius

/**
 StructRadius, as in YANG: __radius__.
 
 Detailed Description: Configuration of the RADIUS client.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> radius
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRadius example:
      StructRadius *radius = [[StructRadius alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"radius init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!radius) {
        NSLog(@"radius is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"radius init successful! toJson: %@", [radius toJson]);
      NSLog(@"radius validated result: %lu, 0 means it passes validation.", (unsigned long)[radius validate]);
      
      // -----------------------------------------------
      // Setters of StructRadius
  
      // -----------------------------------------------
      // Getters of StructRadius
      [radius getOptions];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"radius toJson: %@", [radius toJson]);
```
 
 */
@interface StructRadius : NSObject

/**
 As in YANG: __options__
 
 @see StructOptions
 */
@property (atomic, retain) StructOptions *options;
/**
 Array which contains StructServerElementServer, as in YANG: __server__
 
 Detailed Description: List of RADIUS servers used by the device.

When the RADIUS client is invoked by a calling
application, it sends the query to the first server in
this list.  If no response has been received within
'timeout' seconds, the client continues with the next
server in the list.  If no response is received from any
server, the client continues with the first server again.
When the client has traversed the list 'attempts' times
without receiving any response, it gives up and returns an
error to the calling application.
 
 @see StructServerElementServer
 */
@property (atomic, retain) NSMutableArray <StructServerElementServer *> *server;

/**
 Designated initializer for StructRadius either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRadius if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructClientAddress

/**
 StructClientAddress, as in YANG: __client-address__.
 
 Detailed Description: secure client address
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> remote-management -> remote-access -> remote-access-element -> client-address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructClientAddress example:
      StructClientAddress *clientAddress = [[StructClientAddress alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"clientAddress init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!clientAddress) {
        NSLog(@"clientAddress is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"clientAddress init successful! toJson: %@", [clientAddress toJson]);
      NSLog(@"clientAddress validated result: %lu, 0 means it passes validation.", (unsigned long)[clientAddress validate]);
      
      // -----------------------------------------------
      // Setters of StructClientAddress
      if ((error = [clientAddress setUnionOfInetIpv4Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[clientAddress setUnionOfInetIpv4Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [clientAddress setUnionOfInetIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[clientAddress setUnionOfInetIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructClientAddress
      [clientAddress getUnionOfInetIpv4Address];
      [clientAddress getUnionOfInetIpv6Address];
      [clientAddress getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"clientAddress toJson: %@", [clientAddress toJson]);
```
 
 */
@interface StructClientAddress : NSObject


/**
 Designated initializer for StructClientAddress either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructClientAddress if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfInetIpv4Address.

 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aUnionOfInetIpv4Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv4Address:(NSString *)aUnionOfInetIpv4Address;

/**
 Setter for UnionOfInetIpv6Address.

 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$

 @param aUnionOfInetIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv6Address:(NSString *)aUnionOfInetIpv6Address;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: client-address, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemClientAddress)aCurrentUnionItem;


/**
 Getter for UnionOfInetIpv4Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv4Address;

/**
 Getter for UnionOfInetIpv6Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv6Address;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: client-address, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemClientAddress The value of property.
 */
- (EnumCurrentUnionItemClientAddress)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRemoteAccessElement

/**
 StructRemoteAccessElement, as in YANG: __remote-access-element__.
 
 Detailed Description: remote access
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> remote-management -> remote-access -> remote-access-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRemoteAccessElement example:
      StructRemoteAccessElement *remoteAccessElement = [[StructRemoteAccessElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"remoteAccessElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!remoteAccessElement) {
        NSLog(@"remoteAccessElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"remoteAccessElement init successful! toJson: %@", [remoteAccessElement toJson]);
      NSLog(@"remoteAccessElement validated result: %lu, 0 means it passes validation.", (unsigned long)[remoteAccessElement validate]);
      
      // -----------------------------------------------
      // Setters of StructRemoteAccessElement
      if ((error = [remoteAccessElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[remoteAccessElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [remoteAccessElement setClientCheck:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[remoteAccessElement setClientCheck:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [remoteAccessElement setInterfacelist:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[remoteAccessElement setInterfacelist:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [remoteAccessElement setPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[remoteAccessElement setPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRemoteAccessElement
      [remoteAccessElement getProtocol];
      [remoteAccessElement getName];
      [remoteAccessElement getClientCheck];
      [remoteAccessElement getInterfacelist];
      [remoteAccessElement getInterface];
      [remoteAccessElement getClientAddress];
      [remoteAccessElement getPort];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"remoteAccessElement toJson: %@", [remoteAccessElement toJson]);
```
 
 */
@interface StructRemoteAccessElement : NSObject

/**
 As in YANG: __client-address__
 
 @see StructClientAddress
 */
@property (atomic, retain) StructClientAddress *clientAddress;

/**
 Designated initializer for StructRemoteAccessElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRemoteAccessElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Protocol.
 
 remote access protocol
 
 @param aProtocol Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setProtocol:(EnumProtocolRemoteAccessElement)aProtocol;

/**
 Setter for Name.
 
 remote access rule name
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for ClientCheck.
 
 Secured Client IP Address
 
 @param aClientCheck Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setClientCheck:(BOOL)aClientCheck;

/**
 Setter for Interfacelist.
 
 The support interfaces of the protocol. Each interface in the
list follow the type of 'interface' in 'remote-access'.
 
 @param aInterfacelist Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterfacelist:(NSString *)aInterfacelist;

/**
 Setter for Interface.
 
 interface
 
 @param aInterface Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setInterface:(EnumInterface)aInterface;

/**
 Setter for Port.
 
 port of protocol
 
 Range:       1..65535

 @param aPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPort:(NSInteger)aPort;


/**
 Getter for Protocol.
 
 remote access protocol
 
 @return EnumProtocolRemoteAccessElement The value of property.
 */
- (EnumProtocolRemoteAccessElement)getProtocol;

/**
 Getter for Name.
 
 remote access rule name
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for ClientCheck.
 
 Secured Client IP Address
 
 @return BOOL The value of property.
 */
- (BOOL)getClientCheck;

/**
 Getter for Interfacelist.
 
 The support interfaces of the protocol. Each interface in the
list follow the type of 'interface' in 'remote-access'.
 
 @return NSString * The value of property.
 */
- (NSString *)getInterfacelist;

/**
 Getter for Interface.
 
 interface
 
 @return EnumInterface The value of property.
 */
- (EnumInterface)getInterface;

/**
 Getter for Port.
 
 port of protocol
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructMacListElement

/**
 StructMacListElement, as in YANG: __mac-list-element__.
 
 Detailed Description: The mac address list for wake on lan option.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> remote-management -> wake-on-lan-over-wan -> mac-list -> mac-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructMacListElement example:
      StructMacListElement *macListElement = [[StructMacListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"macListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!macListElement) {
        NSLog(@"macListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"macListElement init successful! toJson: %@", [macListElement toJson]);
      NSLog(@"macListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[macListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructMacListElement
      if ((error = [macListElement setMacAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[macListElement setMacAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructMacListElement
      [macListElement getMacAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"macListElement toJson: %@", [macListElement toJson]);
```
 
 */
@interface StructMacListElement : NSObject


/**
 Designated initializer for StructMacListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructMacListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MacAddress.
 
 mac address of lan device to be wakened
 
 Pattern:     ^(([0-9a-fA-F]{2}(:[0-9a-fA-F]{2})*)?)$

 @param aMacAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddress:(NSString *)aMacAddress;


/**
 Getter for MacAddress.
 
 mac address of lan device to be wakened
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructWakeOnLanOverWan

/**
 StructWakeOnLanOverWan, as in YANG: __wake-on-lan-over-wan__.
 
 Detailed Description: wake up lan device over wan
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> remote-management -> wake-on-lan-over-wan
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructWakeOnLanOverWan example:
      StructWakeOnLanOverWan *wakeOnLanOverWan = [[StructWakeOnLanOverWan alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"wakeOnLanOverWan init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!wakeOnLanOverWan) {
        NSLog(@"wakeOnLanOverWan is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"wakeOnLanOverWan init successful! toJson: %@", [wakeOnLanOverWan toJson]);
      NSLog(@"wakeOnLanOverWan validated result: %lu, 0 means it passes validation.", (unsigned long)[wakeOnLanOverWan validate]);
      
      // -----------------------------------------------
      // Setters of StructWakeOnLanOverWan
      if ((error = [wakeOnLanOverWan setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[wakeOnLanOverWan setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [wakeOnLanOverWan setPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[wakeOnLanOverWan setPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructWakeOnLanOverWan
      [wakeOnLanOverWan getEnable];
      [wakeOnLanOverWan getPort];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"wakeOnLanOverWan toJson: %@", [wakeOnLanOverWan toJson]);
```
 
 */
@interface StructWakeOnLanOverWan : NSObject

/**
 Array which contains StructMacListElement, as in YANG: __mac-list__
 
 Detailed Description: The mac address list for wake on lan option.
 
 @see StructMacListElement
 */
@property (atomic, retain) NSMutableArray <StructMacListElement *> *macList;

/**
 Designated initializer for StructWakeOnLanOverWan either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructWakeOnLanOverWan if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enable.
 
 enable wake lan device over wan
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for Port.
 
 wake-on-lan destination port used for passing the wol packet to
lan
 
 Range:       1..65535

 @param aPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPort:(NSInteger)aPort;


/**
 Getter for Enable.
 
 enable wake lan device over wan
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for Port.
 
 wake-on-lan destination port used for passing the wol packet to
lan
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRemoteManagement

/**
 StructRemoteManagement, as in YANG: __remote-management__.
 
 Detailed Description: remote management.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> remote-management
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRemoteManagement example:
      StructRemoteManagement *remoteManagement = [[StructRemoteManagement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"remoteManagement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!remoteManagement) {
        NSLog(@"remoteManagement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"remoteManagement init successful! toJson: %@", [remoteManagement toJson]);
      NSLog(@"remoteManagement validated result: %lu, 0 means it passes validation.", (unsigned long)[remoteManagement validate]);
      
      // -----------------------------------------------
      // Setters of StructRemoteManagement
  
      // -----------------------------------------------
      // Getters of StructRemoteManagement
      [remoteManagement getWakeOnLanOverWan];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"remoteManagement toJson: %@", [remoteManagement toJson]);
```
 
 */
@interface StructRemoteManagement : NSObject

/**
 Array which contains StructRemoteAccessElement, as in YANG: __remote-access__
 
 Detailed Description: remote access
 
 @see StructRemoteAccessElement
 */
@property (atomic, retain) NSMutableArray <StructRemoteAccessElement *> *remoteAccess;
/**
 As in YANG: __wake-on-lan-over-wan__
 
 @see StructWakeOnLanOverWan
 */
@property (atomic, retain) StructWakeOnLanOverWan *wakeOnLanOverWan;

/**
 Designated initializer for StructRemoteManagement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRemoteManagement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOptionsDnsResolver

/**
 StructOptionsDnsResolver, as in YANG: __options__.
 
 Detailed Description: Resolver options.  The set of available options has been
limited to those that are generally available across
different resolver implementations and generally useful.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> options
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOptionsDnsResolver example:
      StructOptionsDnsResolver *options = [[StructOptionsDnsResolver alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"options init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!options) {
        NSLog(@"options is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"options init successful! toJson: %@", [options toJson]);
      NSLog(@"options validated result: %lu, 0 means it passes validation.", (unsigned long)[options validate]);
      
      // -----------------------------------------------
      // Setters of StructOptionsDnsResolver
      if ((error = [options setAttempts:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[options setAttempts:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [options setTimeout:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[options setTimeout:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOptionsDnsResolver
      [options getAttempts];
      [options getTimeout];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"options toJson: %@", [options toJson]);
```
 
 */
@interface StructOptionsDnsResolver : NSObject


/**
 Designated initializer for StructOptionsDnsResolver either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOptionsDnsResolver if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Attempts.
 
 The number of times the resolver will send a query to
all of its name servers before giving up and returning
an error to the calling application.
 
 Range:       1..max

 @param aAttempts Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAttempts:(NSInteger)aAttempts;

/**
 Setter for Timeout.
 
 The amount of time the resolver will wait for a
response from each remote name server before
retrying the query via a different name server.
 
 Range:       1..max

 @param aTimeout Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setTimeout:(NSInteger)aTimeout;


/**
 Getter for Attempts.
 
 The number of times the resolver will send a query to
all of its name servers before giving up and returning
an error to the calling application.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getAttempts;

/**
 Getter for Timeout.
 
 The amount of time the resolver will wait for a
response from each remote name server before
retrying the query via a different name server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getTimeout;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAddressUdpAndTcp

/**
 StructAddressUdpAndTcp, as in YANG: __address__.
 
 Detailed Description: The address of the DNS server.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> server -> server-element -> transport -> case_udp-and-tcp -> udp-and-tcp -> address
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAddressUdpAndTcp example:
      StructAddressUdpAndTcp *address = [[StructAddressUdpAndTcp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"address init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!address) {
        NSLog(@"address is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"address init successful! toJson: %@", [address toJson]);
      NSLog(@"address validated result: %lu, 0 means it passes validation.", (unsigned long)[address validate]);
      
      // -----------------------------------------------
      // Setters of StructAddressUdpAndTcp
      if ((error = [address setUnionOfInetIpv4Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[address setUnionOfInetIpv4Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [address setUnionOfInetIpv6Address:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[address setUnionOfInetIpv6Address:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructAddressUdpAndTcp
      [address getUnionOfInetIpv4Address];
      [address getUnionOfInetIpv6Address];
      [address getCurrentUnionItem];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"address toJson: %@", [address toJson]);
```
 
 */
@interface StructAddressUdpAndTcp : NSObject


/**
 Designated initializer for StructAddressUdpAndTcp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAddressUdpAndTcp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for UnionOfInetIpv4Address.

 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$

 @param aUnionOfInetIpv4Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv4Address:(NSString *)aUnionOfInetIpv4Address;

/**
 Setter for UnionOfInetIpv6Address.

 Pattern:     ^(((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9]))))$,^((([^:]+:){6}(([^:]+:[^:]+)|(.*\..*)))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)(%.+)?)$

 @param aUnionOfInetIpv6Address Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUnionOfInetIpv6Address:(NSString *)aUnionOfInetIpv6Address;

/**
 Setter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: address, was not in original defined YANG data model.
 
 @param aCurrentUnionItem Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentUnionItem:(EnumCurrentUnionItemAddress)aCurrentUnionItem;


/**
 Getter for UnionOfInetIpv4Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv4Address;

/**
 Getter for UnionOfInetIpv6Address.

 @return NSString * The value of property.
 */
- (NSString *)getUnionOfInetIpv6Address;

/**
 Getter for CurrentUnionItem.
 
 This enumeration is code generated for setting/getting the union of: address, was not in original defined YANG data model.
 
 @return EnumCurrentUnionItemAddress The value of property.
 */
- (EnumCurrentUnionItemAddress)getCurrentUnionItem;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUdpAndTcp

/**
 StructUdpAndTcp, as in YANG: __udp-and-tcp__.
 
 Detailed Description: Contains UDP- and TCP-specific configuration
parameters for DNS.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> server -> server-element -> transport -> case_udp-and-tcp -> udp-and-tcp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUdpAndTcp example:
      StructUdpAndTcp *udpAndTcp = [[StructUdpAndTcp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"udpAndTcp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!udpAndTcp) {
        NSLog(@"udpAndTcp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"udpAndTcp init successful! toJson: %@", [udpAndTcp toJson]);
      NSLog(@"udpAndTcp validated result: %lu, 0 means it passes validation.", (unsigned long)[udpAndTcp validate]);
      
      // -----------------------------------------------
      // Setters of StructUdpAndTcp
      if ((error = [udpAndTcp setPort:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[udpAndTcp setPort:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUdpAndTcp
      [udpAndTcp getPort];
      [udpAndTcp getAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"udpAndTcp toJson: %@", [udpAndTcp toJson]);
```
 
 */
@interface StructUdpAndTcp : NSObject

/**
 As in YANG: __address__
 
 @see StructAddressUdpAndTcp
 */
@property (atomic, retain) StructAddressUdpAndTcp *address;

/**
 Designated initializer for StructUdpAndTcp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUdpAndTcp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Port.
 
 The UDP and TCP port number of the DNS server.
 
 Range:       1..65535

 @param aPort Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPort:(NSInteger)aPort;


/**
 Getter for Port.
 
 The UDP and TCP port number of the DNS server.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getPort;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCaseUdpAndTcp

/**
 StructCaseUdpAndTcp, as in YANG: __case_udp-and-tcp__.
 
 Detailed Description: <b>udp-and-tcp</b>(in YANG) is a case of choice: transport
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> server -> server-element -> transport -> case_udp-and-tcp
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCaseUdpAndTcp example:
      StructCaseUdpAndTcp *caseUdpAndTcp = [[StructCaseUdpAndTcp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"caseUdpAndTcp init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!caseUdpAndTcp) {
        NSLog(@"caseUdpAndTcp is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"caseUdpAndTcp init successful! toJson: %@", [caseUdpAndTcp toJson]);
      NSLog(@"caseUdpAndTcp validated result: %lu, 0 means it passes validation.", (unsigned long)[caseUdpAndTcp validate]);
      
      // -----------------------------------------------
      // Setters of StructCaseUdpAndTcp
  
      // -----------------------------------------------
      // Getters of StructCaseUdpAndTcp
      [caseUdpAndTcp getUdpAndTcp];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"caseUdpAndTcp toJson: %@", [caseUdpAndTcp toJson]);
```
 
 */
@interface StructCaseUdpAndTcp : NSObject

/**
 As in YANG: __udp-and-tcp__
 
 @see StructUdpAndTcp
 */
@property (atomic, retain) StructUdpAndTcp *udpAndTcp;

/**
 Designated initializer for StructCaseUdpAndTcp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCaseUdpAndTcp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTransportServerElementServer

/**
 StructTransportServerElementServer, as in YANG: __transport__.
 
 Detailed Description: The transport-protocol-specific parameters for this
server.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> server -> server-element -> transport
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTransportServerElementServer example:
      StructTransportServerElementServer *transport = [[StructTransportServerElementServer alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"transport init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!transport) {
        NSLog(@"transport is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"transport init successful! toJson: %@", [transport toJson]);
      NSLog(@"transport validated result: %lu, 0 means it passes validation.", (unsigned long)[transport validate]);
      
      // -----------------------------------------------
      // Setters of StructTransportServerElementServer
  
      // -----------------------------------------------
      // Getters of StructTransportServerElementServer
      [transport getCaseUdpAndTcp];
      [transport getCurrentCase];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"transport toJson: %@", [transport toJson]);
```
 
 */
@interface StructTransportServerElementServer : NSObject

/**
 As in YANG: __case_udp-and-tcp__
 
 @see StructCaseUdpAndTcp
 */
@property (atomic, retain) StructCaseUdpAndTcp *caseUdpAndTcp;

/**
 Designated initializer for StructTransportServerElementServer either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTransportServerElementServer if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @param aCurrentCase Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentCase:(EnumCurrentCaseTransportServerElement)aCurrentCase;


/**
 Getter for CurrentCase.
 
 This enumeration is code generated for setting/getting the choice of: transport, was not in original defined YANG data model.
 
 @return EnumCurrentCaseTransportServerElement The value of property.
 */
- (EnumCurrentCaseTransportServerElement)getCurrentCase;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructServerElementServerDnsResolver

/**
 StructServerElementServerDnsResolver, as in YANG: __server-element__.
 
 Detailed Description: List of the DNS servers that the resolver should query.

When the resolver is invoked by a calling application, it
sends the query to the first name server in this list.  If
no response has been received within 'timeout' seconds,
the resolver continues with the next server in the list.
If no response is received from any server, the resolver
continues with the first server again.  When the resolver
has traversed the list 'attempts' times without receiving
any response, it gives up and returns an error to the
calling application.

Implementations MAY limit the number of entries in this
list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver -> server -> server-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructServerElementServerDnsResolver example:
      StructServerElementServerDnsResolver *serverElement = [[StructServerElementServerDnsResolver alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"serverElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!serverElement) {
        NSLog(@"serverElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"serverElement init successful! toJson: %@", [serverElement toJson]);
      NSLog(@"serverElement validated result: %lu, 0 means it passes validation.", (unsigned long)[serverElement validate]);
      
      // -----------------------------------------------
      // Setters of StructServerElementServerDnsResolver
      if ((error = [serverElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[serverElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructServerElementServerDnsResolver
      [serverElement getName];
      [serverElement getTransport];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"serverElement toJson: %@", [serverElement toJson]);
```
 
 */
@interface StructServerElementServerDnsResolver : NSObject

/**
 As in YANG: __transport__
 
 @see StructTransportServerElementServer
 */
@property (atomic, retain) StructTransportServerElementServer *transport;

/**
 Designated initializer for StructServerElementServerDnsResolver either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructServerElementServerDnsResolver if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Name.
 
 An arbitrary name for the DNS server.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Name.
 
 An arbitrary name for the DNS server.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDnsResolver

/**
 StructDnsResolver, as in YANG: __dns-resolver__.
 
 Detailed Description: Configuration of the DNS resolver.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> dns-resolver
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDnsResolver example:
      StructDnsResolver *dnsResolver = [[StructDnsResolver alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"dnsResolver init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!dnsResolver) {
        NSLog(@"dnsResolver is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"dnsResolver init successful! toJson: %@", [dnsResolver toJson]);
      NSLog(@"dnsResolver validated result: %lu, 0 means it passes validation.", (unsigned long)[dnsResolver validate]);
      
      // -----------------------------------------------
      // Setters of StructDnsResolver
      [dnsResolver.search addObject:@"abc"];
  
      // -----------------------------------------------
      // Getters of StructDnsResolver
      for (NSString *o in dnsResolver.search) {
          NSLog(@"element in dnsResolver.search: %@", o);
      }
      [dnsResolver getOptions];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"dnsResolver toJson: %@", [dnsResolver toJson]);
```
 
 */
@interface StructDnsResolver : NSObject

/**
 Array which contains NSString, as in YANG: __search__
 
 Detailed Description: An ordered list of domains to search when resolving
a host name.
 
 @see NSString
 */
@property (atomic, retain) NSMutableArray <NSString *> *search;
/**
 As in YANG: __options__
 
 @see StructOptionsDnsResolver
 */
@property (atomic, retain) StructOptionsDnsResolver *options;
/**
 Array which contains StructServerElementServerDnsResolver, as in YANG: __server__
 
 Detailed Description: List of the DNS servers that the resolver should query.

When the resolver is invoked by a calling application, it
sends the query to the first name server in this list.  If
no response has been received within 'timeout' seconds,
the resolver continues with the next server in the list.
If no response is received from any server, the resolver
continues with the first server again.  When the resolver
has traversed the list 'attempts' times without receiving
any response, it gives up and returns an error to the
calling application.

Implementations MAY limit the number of entries in this
list.
 
 @see StructServerElementServerDnsResolver
 */
@property (atomic, retain) NSMutableArray <StructServerElementServerDnsResolver *> *server;

/**
 Designated initializer for StructDnsResolver either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDnsResolver if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSetRootPassword

/**
 StructSetRootPassword, as in YANG: __set-root-password__.
 
 Detailed Description: Request that the entire system be reset immediately.
A server SHOULD send an rpc reply to the client before
resetting the system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> set-root-password
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSetRootPassword example:
      StructSetRootPassword *setRootPassword = [[StructSetRootPassword alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"setRootPassword init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!setRootPassword) {
        NSLog(@"setRootPassword is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"setRootPassword init successful! toJson: %@", [setRootPassword toJson]);
      NSLog(@"setRootPassword validated result: %lu, 0 means it passes validation.", (unsigned long)[setRootPassword validate]);
      
      // -----------------------------------------------
      // Setters of StructSetRootPassword
      if ((error = [setRootPassword setNewPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[setRootPassword setNewPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [setRootPassword setCurrentPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[setRootPassword setCurrentPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSetRootPassword
      [setRootPassword getNewPassword];
      [setRootPassword getCurrentPassword];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"setRootPassword toJson: %@", [setRootPassword toJson]);
```
 
 */
@interface StructSetRootPassword : NSObject


/**
 Designated initializer for StructSetRootPassword either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSetRootPassword if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for NewPassword.
 
 The new password.
 
 Length:      4..30

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aNewPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setNewPassword:(NSString *)aNewPassword;

/**
 Setter for CurrentPassword.
 
 The current password.
 
 Length:      4..30

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aCurrentPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentPassword:(NSString *)aCurrentPassword;


/**
 Getter for NewPassword.
 
 The new password.
 
 @return NSString * The value of property.
 */
- (NSString *)getNewPassword;

/**
 Getter for CurrentPassword.
 
 The current password.
 
 @return NSString * The value of property.
 */
- (NSString *)getCurrentPassword;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDaylightSavings

/**
 StructDaylightSavings, as in YANG: __daylight-savings__.
 
 Detailed Description: The daylight savings configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> daylight-savings
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDaylightSavings example:
      StructDaylightSavings *daylightSavings = [[StructDaylightSavings alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"daylightSavings init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!daylightSavings) {
        NSLog(@"daylightSavings is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"daylightSavings init successful! toJson: %@", [daylightSavings toJson]);
      NSLog(@"daylightSavings validated result: %lu, 0 means it passes validation.", (unsigned long)[daylightSavings validate]);
      
      // -----------------------------------------------
      // Setters of StructDaylightSavings
      if ((error = [daylightSavings setStartNum:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setStartNum:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEndMonth:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEndMonth:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEndMonthday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEndMonthday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEndWeekday:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEndWeekday:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEndClock:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEndClock:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setStartMonth:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setStartMonth:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setEndNum:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setEndNum:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setStartWeekday:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setStartWeekday:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setStartClock:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setStartClock:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [daylightSavings setStartMonthday:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[daylightSavings setStartMonthday:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDaylightSavings
      [daylightSavings getStartNum];
      [daylightSavings getEnable];
      [daylightSavings getEndMonth];
      [daylightSavings getEndMonthday];
      [daylightSavings getEndWeekday];
      [daylightSavings getEndClock];
      [daylightSavings getStartMonth];
      [daylightSavings getEndNum];
      [daylightSavings getStartWeekday];
      [daylightSavings getStartClock];
      [daylightSavings getStartMonthday];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"daylightSavings toJson: %@", [daylightSavings toJson]);
```
 
 */
@interface StructDaylightSavings : NSObject


/**
 Designated initializer for StructDaylightSavings either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDaylightSavings if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for StartNum.
 
 The order for weekday like second Monday.
 
 @param aStartNum Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStartNum:(NSInteger)aStartNum;

/**
 Setter for Enable.
 
 Enable or disable daylight savings.
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for EndMonth.
 
 The end month. (MM)
 
 @param aEndMonth Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEndMonth:(NSString *)aEndMonth;

/**
 Setter for EndMonthday.
 
 The end day. (DD)
 
 @param aEndMonthday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEndMonthday:(NSString *)aEndMonthday;

/**
 Setter for EndWeekday.
 
 The sequence for a day in a week.
 
 @param aEndWeekday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEndWeekday:(NSInteger)aEndWeekday;

/**
 Setter for EndClock.
 
 The end clock. (mm)
 
 @param aEndClock Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEndClock:(NSString *)aEndClock;

/**
 Setter for StartMonth.
 
 The start month. (MM)
 
 @param aStartMonth Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStartMonth:(NSString *)aStartMonth;

/**
 Setter for EndNum.
 
 The order for weekday like second Monday.
 
 @param aEndNum Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEndNum:(NSInteger)aEndNum;

/**
 Setter for StartWeekday.
 
 The sequence for a day in a week. 0 for Sunday.
 
 @param aStartWeekday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStartWeekday:(NSInteger)aStartWeekday;

/**
 Setter for StartClock.
 
 The start clock. (mm)
 
 @param aStartClock Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStartClock:(NSString *)aStartClock;

/**
 Setter for StartMonthday.
 
 The start day. (DD)
 
 @param aStartMonthday Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStartMonthday:(NSString *)aStartMonthday;


/**
 Getter for StartNum.
 
 The order for weekday like second Monday.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getStartNum;

/**
 Getter for Enable.
 
 Enable or disable daylight savings.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for EndMonth.
 
 The end month. (MM)
 
 @return NSString * The value of property.
 */
- (NSString *)getEndMonth;

/**
 Getter for EndMonthday.
 
 The end day. (DD)
 
 @return NSString * The value of property.
 */
- (NSString *)getEndMonthday;

/**
 Getter for EndWeekday.
 
 The sequence for a day in a week.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getEndWeekday;

/**
 Getter for EndClock.
 
 The end clock. (mm)
 
 @return NSString * The value of property.
 */
- (NSString *)getEndClock;

/**
 Getter for StartMonth.
 
 The start month. (MM)
 
 @return NSString * The value of property.
 */
- (NSString *)getStartMonth;

/**
 Getter for EndNum.
 
 The order for weekday like second Monday.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getEndNum;

/**
 Getter for StartWeekday.
 
 The sequence for a day in a week. 0 for Sunday.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getStartWeekday;

/**
 Getter for StartClock.
 
 The start clock. (mm)
 
 @return NSString * The value of property.
 */
- (NSString *)getStartClock;

/**
 Getter for StartMonthday.
 
 The start day. (DD)
 
 @return NSString * The value of property.
 */
- (NSString *)getStartMonthday;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUserElementUser

/**
 StructUserElementUser, as in YANG: __user-element__.
 
 Detailed Description: User
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> users -> user -> user-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUserElementUser example:
      StructUserElementUser *userElement = [[StructUserElementUser alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"userElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!userElement) {
        NSLog(@"userElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"userElement init successful! toJson: %@", [userElement toJson]);
      NSLog(@"userElement validated result: %lu, 0 means it passes validation.", (unsigned long)[userElement validate]);
      
      // -----------------------------------------------
      // Setters of StructUserElementUser
      if ((error = [userElement setUsername:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setUsername:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [userElement setEnable:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setEnable:YES] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [userElement setPassword:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setPassword:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [userElement setAccessPrivilege:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[userElement setAccessPrivilege:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUserElementUser
      [userElement getUsername];
      [userElement getEnable];
      [userElement getPassword];
      [userElement getAccessPrivilege];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"userElement toJson: %@", [userElement toJson]);
```
 
 */
@interface StructUserElementUser : NSObject


/**
 Designated initializer for StructUserElementUser either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUserElementUser if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Username.
 
 usename for login device
 
 @param aUsername Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUsername:(NSString *)aUsername;

/**
 Setter for Enable.
 
 enable this user can login device or not
 
 @param aEnable Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnable:(BOOL)aEnable;

/**
 Setter for Password.
 
 password for login device
 
 @param aPassword Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPassword:(NSString *)aPassword;

/**
 Setter for AccessPrivilege.
 
 access privilege of device
 
 @param aAccessPrivilege Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAccessPrivilege:(NSString *)aAccessPrivilege;


/**
 Getter for Username.
 
 usename for login device
 
 @return NSString * The value of property.
 */
- (NSString *)getUsername;

/**
 Getter for Enable.
 
 enable this user can login device or not
 
 @return BOOL The value of property.
 */
- (BOOL)getEnable;

/**
 Getter for Password.
 
 password for login device
 
 @return NSString * The value of property.
 */
- (NSString *)getPassword;

/**
 Getter for AccessPrivilege.
 
 access privilege of device
 
 @return NSString * The value of property.
 */
- (NSString *)getAccessPrivilege;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUsers

/**
 StructUsers, as in YANG: __users__.
 
 Detailed Description: user can login the device
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system -> users
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUsers example:
      StructUsers *users = [[StructUsers alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"users init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!users) {
        NSLog(@"users is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"users init successful! toJson: %@", [users toJson]);
      NSLog(@"users validated result: %lu, 0 means it passes validation.", (unsigned long)[users validate]);
      
      // -----------------------------------------------
      // Setters of StructUsers
  
      // -----------------------------------------------
      // Getters of StructUsers
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"users toJson: %@", [users toJson]);
```
 
 */
@interface StructUsers : NSObject

/**
 Array which contains StructUserElementUser, as in YANG: __user__
 
 Detailed Description: User
 
 @see StructUserElementUser
 */
@property (atomic, retain) NSMutableArray <StructUserElementUser *> *user;

/**
 Designated initializer for StructUsers either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUsers if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystem

/**
 StructSystem, as in YANG: __system__.
 
 Detailed Description: System group configuration.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystem example:
      StructSystem *system = [[StructSystem alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"system init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!system) {
        NSLog(@"system is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"system init successful! toJson: %@", [system toJson]);
      NSLog(@"system validated result: %lu, 0 means it passes validation.", (unsigned long)[system validate]);
      
      // -----------------------------------------------
      // Setters of StructSystem
      if ((error = [system setContact:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[system setContact:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSystem
      [system getLed];
      [system getClock];
      [system getNtp];
      [system getGeneral];
      [system getAuthentication];
      [system getContact];
      [system getRadius];
      [system getRemoteManagement];
      [system getDnsResolver];
      [system getSetRootPassword];
      [system getDaylightSavings];
      [system getUsers];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"system toJson: %@", [system toJson]);
```
 
 */
@interface StructSystem : NSObject

/**
 As in YANG: __led__
 
 @see StructLed
 */
@property (atomic, retain) StructLed *led;
/**
 As in YANG: __clock__
 
 @see StructClock
 */
@property (atomic, retain) StructClock *clock;
/**
 As in YANG: __ntp__
 
 @see StructNtp
 */
@property (atomic, retain) StructNtp *ntp;
/**
 As in YANG: __general__
 
 @see StructGeneral
 */
@property (atomic, retain) StructGeneral *general;
/**
 As in YANG: __authentication__
 
 @see StructAuthentication
 */
@property (atomic, retain) StructAuthentication *authentication;
/**
 As in YANG: __radius__
 
 @see StructRadius
 */
@property (atomic, retain) StructRadius *radius;
/**
 As in YANG: __remote-management__
 
 @see StructRemoteManagement
 */
@property (atomic, retain) StructRemoteManagement *remoteManagement;
/**
 As in YANG: __dns-resolver__
 
 @see StructDnsResolver
 */
@property (atomic, retain) StructDnsResolver *dnsResolver;
/**
 As in YANG: __set-root-password__
 
 @see StructSetRootPassword
 */
@property (atomic, retain) StructSetRootPassword *setRootPassword;
/**
 As in YANG: __daylight-savings__
 
 @see StructDaylightSavings
 */
@property (atomic, retain) StructDaylightSavings *daylightSavings;
/**
 As in YANG: __users__
 
 @see StructUsers
 */
@property (atomic, retain) StructUsers *users;

/**
 Designated initializer for StructSystem either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystem if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Contact.
 
 The administrator contact information for the system.

A server implementation MAY map this leaf to the sysContact
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and sysContact.  The definition of
such a mechanism is outside the scope of this document.
 
 @param aContact Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setContact:(NSString *)aContact;


/**
 Getter for Contact.
 
 The administrator contact information for the system.

A server implementation MAY map this leaf to the sysContact
MIB object.  Such an implementation needs to use some
mechanism to handle the differences in size and characters
allowed between this leaf and sysContact.  The definition of
such a mechanism is outside the scope of this document.
 
 @return NSString * The value of property.
 */
- (NSString *)getContact;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPrinterElement

/**
 StructPrinterElement, as in YANG: __printer-element__.
 
 Detailed Description: The list of printer.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state -> printer -> printer -> printer-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPrinterElement example:
      StructPrinterElement *printerElement = [[StructPrinterElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"printerElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!printerElement) {
        NSLog(@"printerElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"printerElement init successful! toJson: %@", [printerElement toJson]);
      NSLog(@"printerElement validated result: %lu, 0 means it passes validation.", (unsigned long)[printerElement validate]);
      
      // -----------------------------------------------
      // Setters of StructPrinterElement
      if ((error = [printerElement setIndex:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[printerElement setIndex:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [printerElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[printerElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructPrinterElement
      [printerElement getIndex];
      [printerElement getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"printerElement toJson: %@", [printerElement toJson]);
```
 
 */
@interface StructPrinterElement : NSObject


/**
 Designated initializer for StructPrinterElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPrinterElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Index.
 
 The printer index.
 
 @param aIndex Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIndex:(NSString *)aIndex;

/**
 Setter for Name.
 
 The printer name.
 
 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Index.
 
 The printer index.
 
 @return NSString * The value of property.
 */
- (NSString *)getIndex;

/**
 Getter for Name.
 
 The printer name.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPrinter

/**
 StructPrinter, as in YANG: __printer__.
 
 Detailed Description: Printer information.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state -> printer
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPrinter example:
      StructPrinter *printer = [[StructPrinter alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"printer init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!printer) {
        NSLog(@"printer is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"printer init successful! toJson: %@", [printer toJson]);
      NSLog(@"printer validated result: %lu, 0 means it passes validation.", (unsigned long)[printer validate]);
      
      // -----------------------------------------------
      // Setters of StructPrinter
  
      // -----------------------------------------------
      // Getters of StructPrinter
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"printer toJson: %@", [printer toJson]);
```
 
 */
@interface StructPrinter : NSObject

/**
 Array which contains StructPrinterElement, as in YANG: __printer__
 
 Detailed Description: The list of printer.
 
 @see StructPrinterElement
 */
@property (atomic, retain) NSMutableArray <StructPrinterElement *> *printer;

/**
 Designated initializer for StructPrinter either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPrinter if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructClockSystemState

/**
 StructClockSystemState, as in YANG: __clock__.
 
 Detailed Description: Monitoring of the system date and time properties.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state -> clock
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructClockSystemState example:
      StructClockSystemState *clock = [[StructClockSystemState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"clock init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!clock) {
        NSLog(@"clock is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"clock init successful! toJson: %@", [clock toJson]);
      NSLog(@"clock validated result: %lu, 0 means it passes validation.", (unsigned long)[clock validate]);
      
      // -----------------------------------------------
      // Setters of StructClockSystemState
      if ((error = [clock setUptime:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[clock setUptime:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [clock setBootDatetime:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[clock setBootDatetime:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [clock setCurrentDatetime:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[clock setCurrentDatetime:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructClockSystemState
      [clock getUptime];
      [clock getBootDatetime];
      [clock getCurrentDatetime];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"clock toJson: %@", [clock toJson]);
```
 
 */
@interface StructClockSystemState : NSObject


/**
 Designated initializer for StructClockSystemState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructClockSystemState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Uptime.
 
 The system uptime in sec.
 
 Range:       1..max

 @param aUptime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUptime:(NSInteger)aUptime;

/**
 Setter for BootDatetime.
 
 The system date and time when the system last restarted.
For example: '1970-01-01T12:13:14+08:00'
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aBootDatetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setBootDatetime:(NSString *)aBootDatetime;

/**
 Setter for CurrentDatetime.
 
 The current system date and time.
For example: '1970-01-01T12:13:14+08:00'
 
 Pattern:     ^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?(Z|[\+\-]\d{2}:\d{2}))$

 @param aCurrentDatetime Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCurrentDatetime:(NSString *)aCurrentDatetime;


/**
 Getter for Uptime.
 
 The system uptime in sec.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getUptime;

/**
 Getter for BootDatetime.
 
 The system date and time when the system last restarted.
For example: '1970-01-01T12:13:14+08:00'
 
 @return NSString * The value of property.
 */
- (NSString *)getBootDatetime;

/**
 Getter for CurrentDatetime.
 
 The current system date and time.
For example: '1970-01-01T12:13:14+08:00'
 
 @return NSString * The value of property.
 */
- (NSString *)getCurrentDatetime;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructPlatform

/**
 StructPlatform, as in YANG: __platform__.
 
 Detailed Description: Contains vendor-specific information for
identifying the system platform and operating system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state -> platform
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructPlatform example:
      StructPlatform *platform = [[StructPlatform alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"platform init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!platform) {
        NSLog(@"platform is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"platform init successful! toJson: %@", [platform toJson]);
      NSLog(@"platform validated result: %lu, 0 means it passes validation.", (unsigned long)[platform validate]);
      
      // -----------------------------------------------
      // Setters of StructPlatform
      if ((error = [platform setMachine:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setMachine:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setSoftwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setSoftwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setOsRelease:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setOsRelease:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setSerialNumber:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setSerialNumber:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setOsVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setOsVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setOsName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setOsName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setModelName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setModelName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [platform setManufacturer:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[platform setManufacturer:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructPlatform
      [platform getMachine];
      [platform getSoftwareVersion];
      [platform getOsRelease];
      [platform getSerialNumber];
      [platform getOsVersion];
      [platform getOsName];
      [platform getModelName];
      [platform getManufacturer];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"platform toJson: %@", [platform toJson]);
```
 
 */
@interface StructPlatform : NSObject


/**
 Designated initializer for StructPlatform either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructPlatform if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Machine.
 
 A vendor-specific identifier string representing
the hardware in use.
 
 @param aMachine Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMachine:(NSString *)aMachine;

/**
 Setter for SoftwareVersion.
 
 A string identifying the software version currently installed in the device
 
 @param aSoftwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSoftwareVersion:(NSString *)aSoftwareVersion;

/**
 Setter for OsRelease.
 
 The current release level of the operating
system in use.  This string MAY indicate
the OS source code revision.
 
 @param aOsRelease Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOsRelease:(NSString *)aOsRelease;

/**
 Setter for SerialNumber.
 
 Identifier of the particular device that is unique for the indicated class of product and manufacturer
 
 @param aSerialNumber Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSerialNumber:(NSString *)aSerialNumber;

/**
 Setter for OsVersion.
 
 The current version level of the operating
system in use.  This string MAY indicate
the specific OS build date and target variant
information.
 
 @param aOsVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOsVersion:(NSString *)aOsVersion;

/**
 Setter for OsName.
 
 The name of the operating system in use -
for example, 'Linux'.
 
 @param aOsName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOsName:(NSString *)aOsName;

/**
 Setter for ModelName.
 
 Model name of the device (human readable string).
 
 @param aModelName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setModelName:(NSString *)aModelName;

/**
 Setter for Manufacturer.
 
 The manufacturer of the device (human readable string).
 
 @param aManufacturer Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setManufacturer:(NSString *)aManufacturer;


/**
 Getter for Machine.
 
 A vendor-specific identifier string representing
the hardware in use.
 
 @return NSString * The value of property.
 */
- (NSString *)getMachine;

/**
 Getter for SoftwareVersion.
 
 A string identifying the software version currently installed in the device
 
 @return NSString * The value of property.
 */
- (NSString *)getSoftwareVersion;

/**
 Getter for OsRelease.
 
 The current release level of the operating
system in use.  This string MAY indicate
the OS source code revision.
 
 @return NSString * The value of property.
 */
- (NSString *)getOsRelease;

/**
 Getter for SerialNumber.
 
 Identifier of the particular device that is unique for the indicated class of product and manufacturer
 
 @return NSString * The value of property.
 */
- (NSString *)getSerialNumber;

/**
 Getter for OsVersion.
 
 The current version level of the operating
system in use.  This string MAY indicate
the specific OS build date and target variant
information.
 
 @return NSString * The value of property.
 */
- (NSString *)getOsVersion;

/**
 Getter for OsName.
 
 The name of the operating system in use -
for example, 'Linux'.
 
 @return NSString * The value of property.
 */
- (NSString *)getOsName;

/**
 Getter for ModelName.
 
 Model name of the device (human readable string).
 
 @return NSString * The value of property.
 */
- (NSString *)getModelName;

/**
 Getter for Manufacturer.
 
 The manufacturer of the device (human readable string).
 
 @return NSString * The value of property.
 */
- (NSString *)getManufacturer;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUsage

/**
 StructUsage, as in YANG: __usage__.
 
 Detailed Description: Current usage of CPU and memory.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state -> usage
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUsage example:
      StructUsage *usage = [[StructUsage alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"usage init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!usage) {
        NSLog(@"usage is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"usage init successful! toJson: %@", [usage toJson]);
      NSLog(@"usage validated result: %lu, 0 means it passes validation.", (unsigned long)[usage validate]);
      
      // -----------------------------------------------
      // Setters of StructUsage
      if ((error = [usage setMemory:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[usage setMemory:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [usage setCpu:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[usage setCpu:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructUsage
      [usage getMemory];
      [usage getCpu];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"usage toJson: %@", [usage toJson]);
```
 
 */
@interface StructUsage : NSObject


/**
 Designated initializer for StructUsage either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUsage if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Memory.
 
 Current memory usage in percent.
 
 Range:       0..100

 @param aMemory Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMemory:(NSInteger)aMemory;

/**
 Setter for Cpu.
 
 Current CPU usage in percent.
 
 Range:       0..100

 @param aCpu Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setCpu:(NSInteger)aCpu;


/**
 Getter for Memory.
 
 Current memory usage in percent.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getMemory;

/**
 Getter for Cpu.
 
 Current CPU usage in percent.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getCpu;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemState

/**
 StructSystemState, as in YANG: __system-state__.
 
 Detailed Description: System group operational state.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-state

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemState example:
      StructSystemState *systemState = [[StructSystemState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemState init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemState) {
        NSLog(@"systemState is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemState init successful! toJson: %@", [systemState toJson]);
      NSLog(@"systemState validated result: %lu, 0 means it passes validation.", (unsigned long)[systemState validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemState
  
      // -----------------------------------------------
      // Getters of StructSystemState
      [systemState getPrinter];
      [systemState getClock];
      [systemState getPlatform];
      [systemState getUsage];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemState toJson: %@", [systemState toJson]);
```
 
 */
@interface StructSystemState : NSObject

/**
 As in YANG: __printer__
 
 @see StructPrinter
 */
@property (atomic, retain) StructPrinter *printer;
/**
 As in YANG: __clock__
 
 @see StructClockSystemState
 */
@property (atomic, retain) StructClockSystemState *clock;
/**
 As in YANG: __platform__
 
 @see StructPlatform
 */
@property (atomic, retain) StructPlatform *platform;
/**
 As in YANG: __usage__
 
 @see StructUsage
 */
@property (atomic, retain) StructUsage *usage;

/**
 Designated initializer for StructSystemState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSystemWakeOnLan

/**
 StructInputSystemWakeOnLan, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-wake-on-lan -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSystemWakeOnLan example:
      StructInputSystemWakeOnLan *input = [[StructInputSystemWakeOnLan alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSystemWakeOnLan
      if ((error = [input setMacAddress:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMacAddress:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSystemWakeOnLan
      [input getMacAddress];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSystemWakeOnLan : NSObject


/**
 Designated initializer for StructInputSystemWakeOnLan either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSystemWakeOnLan if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MacAddress.
 
 mac address of lan device to be wakened
 
 @param aMacAddress Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMacAddress:(NSString *)aMacAddress;


/**
 Getter for MacAddress.
 
 mac address of lan device to be wakened
 
 @return NSString * The value of property.
 */
- (NSString *)getMacAddress;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemWakeOnLan

/**
 StructSystemWakeOnLan, as in YANG: __system-wake-on-lan__.
 
 Detailed Description: wake up lan device
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-wake-on-lan

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemWakeOnLan example:
      StructSystemWakeOnLan *systemWakeOnLan = [[StructSystemWakeOnLan alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemWakeOnLan init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemWakeOnLan) {
        NSLog(@"systemWakeOnLan is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemWakeOnLan init successful! toJson: %@", [systemWakeOnLan toJson]);
      NSLog(@"systemWakeOnLan validated result: %lu, 0 means it passes validation.", (unsigned long)[systemWakeOnLan validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemWakeOnLan
  
      // -----------------------------------------------
      // Getters of StructSystemWakeOnLan
      [systemWakeOnLan getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemWakeOnLan toJson: %@", [systemWakeOnLan toJson]);
```
 
 */
@interface StructSystemWakeOnLan : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSystemWakeOnLan
 */
@property (atomic, retain) StructInputSystemWakeOnLan *input;

/**
 Designated initializer for StructSystemWakeOnLan either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemWakeOnLan if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputApiVersion

/**
 StructOutputApiVersion, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> api-version -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputApiVersion example:
      StructOutputApiVersion *output = [[StructOutputApiVersion alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputApiVersion
      if ((error = [output setMinimumAppVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setMinimumAppVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputApiVersion
      [output getMinimumAppVersion];
      [output getVersion];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputApiVersion : NSObject


/**
 Designated initializer for StructOutputApiVersion either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputApiVersion if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for MinimumAppVersion.
 
 The oldest compatible APP version.
 
 @param aMinimumAppVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMinimumAppVersion:(NSString *)aMinimumAppVersion;

/**
 Setter for Version.
 
 Current API version.
 
 @param aVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setVersion:(NSString *)aVersion;


/**
 Getter for MinimumAppVersion.
 
 The oldest compatible APP version.
 
 @return NSString * The value of property.
 */
- (NSString *)getMinimumAppVersion;

/**
 Getter for Version.
 
 Current API version.
 
 @return NSString * The value of property.
 */
- (NSString *)getVersion;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructApiVersion

/**
 StructApiVersion, as in YANG: __api-version__.
 
 Detailed Description: API version and compatibility.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> api-version

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructApiVersion example:
      StructApiVersion *apiVersion = [[StructApiVersion alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"apiVersion init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!apiVersion) {
        NSLog(@"apiVersion is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"apiVersion init successful! toJson: %@", [apiVersion toJson]);
      NSLog(@"apiVersion validated result: %lu, 0 means it passes validation.", (unsigned long)[apiVersion validate]);
      
      // -----------------------------------------------
      // Setters of StructApiVersion
  
      // -----------------------------------------------
      // Getters of StructApiVersion
      [apiVersion getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"apiVersion toJson: %@", [apiVersion toJson]);
```
 
 */
@interface StructApiVersion : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputApiVersion
 */
@property (atomic, retain) StructOutputApiVersion *output;

/**
 Designated initializer for StructApiVersion either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructApiVersion if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemRestart

/**
 StructSystemRestart, as in YANG: __system-restart__.
 
 Detailed Description: Request that the entire system be restarted immediately.
A server SHOULD send an rpc reply to the client before
restarting the system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-restart

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemRestart example:
      StructSystemRestart *systemRestart = [[StructSystemRestart alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemRestart init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemRestart) {
        NSLog(@"systemRestart is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemRestart init successful! toJson: %@", [systemRestart toJson]);
      NSLog(@"systemRestart validated result: %lu, 0 means it passes validation.", (unsigned long)[systemRestart validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemRestart
  
      // -----------------------------------------------
      // Getters of StructSystemRestart
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemRestart toJson: %@", [systemRestart toJson]);
```
 
 */
@interface StructSystemRestart : NSObject


/**
 Designated initializer for StructSystemRestart either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemRestart if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputCurrentBandWidth

/**
 StructOutputCurrentBandWidth, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> current-band-width -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputCurrentBandWidth example:
      StructOutputCurrentBandWidth *output = [[StructOutputCurrentBandWidth alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputCurrentBandWidth
      if ((error = [output setDownload:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[output setDownload:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setUpload:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[output setUpload:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputCurrentBandWidth
      [output getDownload];
      [output getUpload];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputCurrentBandWidth : NSObject


/**
 Designated initializer for StructOutputCurrentBandWidth either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputCurrentBandWidth if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Download.
 
 download rate. bits per second
 
 @param aDownload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setDownload:(NSInteger)aDownload;

/**
 Setter for Upload.
 
 upload rate. bits per second
 
 @param aUpload Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setUpload:(NSInteger)aUpload;


/**
 Getter for Download.
 
 download rate. bits per second
 
 @return NSInteger The value of property.
 */
- (NSInteger)getDownload;

/**
 Getter for Upload.
 
 upload rate. bits per second
 
 @return NSInteger The value of property.
 */
- (NSInteger)getUpload;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructCurrentBandWidth

/**
 StructCurrentBandWidth, as in YANG: __current-band-width__.
 
 Detailed Description: current upload and download rate
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> current-band-width

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructCurrentBandWidth example:
      StructCurrentBandWidth *currentBandWidth = [[StructCurrentBandWidth alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"currentBandWidth init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!currentBandWidth) {
        NSLog(@"currentBandWidth is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"currentBandWidth init successful! toJson: %@", [currentBandWidth toJson]);
      NSLog(@"currentBandWidth validated result: %lu, 0 means it passes validation.", (unsigned long)[currentBandWidth validate]);
      
      // -----------------------------------------------
      // Setters of StructCurrentBandWidth
  
      // -----------------------------------------------
      // Getters of StructCurrentBandWidth
      [currentBandWidth getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"currentBandWidth toJson: %@", [currentBandWidth toJson]);
```
 
 */
@interface StructCurrentBandWidth : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputCurrentBandWidth
 */
@property (atomic, retain) StructOutputCurrentBandWidth *output;

/**
 Designated initializer for StructCurrentBandWidth either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructCurrentBandWidth if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemResetToDefault

/**
 StructSystemResetToDefault, as in YANG: __system-reset-to-default__.
 
 Detailed Description: Request that the entire system be reset immediately.
A server SHOULD send an rpc reply to the client before
resetting the system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system -> system-reset-to-default

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemResetToDefault example:
      StructSystemResetToDefault *systemResetToDefault = [[StructSystemResetToDefault alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemResetToDefault init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemResetToDefault) {
        NSLog(@"systemResetToDefault is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemResetToDefault init successful! toJson: %@", [systemResetToDefault toJson]);
      NSLog(@"systemResetToDefault validated result: %lu, 0 means it passes validation.", (unsigned long)[systemResetToDefault validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemResetToDefault
  
      // -----------------------------------------------
      // Getters of StructSystemResetToDefault
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemResetToDefault toJson: %@", [systemResetToDefault toJson]);
```
 
 */
@interface StructSystemResetToDefault : NSObject


/**
 Designated initializer for StructSystemResetToDefault either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemResetToDefault if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp

/**
 StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp, as in YANG: __top__.
 
 Detailed Description: UPnP configuration
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-upnp -> top

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp example:
      StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp *top = [[StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"top init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!top) {
        NSLog(@"top is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"top init successful! toJson: %@", [top toJson]);
      NSLog(@"top validated result: %lu, 0 means it passes validation.", (unsigned long)[top validate]);
      
      // -----------------------------------------------
      // Setters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp
      if ((error = [top setEnabled:YES]) != ZapiErrorCode_OK) {
          NSLog(@"[top setEnabled:YES] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp
      [top getEnabled];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"top toJson: %@", [top toJson]);
```
 
 */
@interface StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp : NSObject


/**
 Designated initializer for StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructTopUrnZyxelCpeApplicationsZyxelApplicationsUpnp if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Enabled.
 
 Enable/Disable UPnP.
 
 @param aEnabled Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setEnabled:(BOOL)aEnabled;


/**
 Getter for Enabled.
 
 Enable/Disable UPnP.
 
 @return BOOL The value of property.
 */
- (BOOL)getEnabled;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructLedDeviceElement

/**
 StructLedDeviceElement, as in YANG: __led__.
 
 Detailed Description: The led status.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> system-devices-state -> device -> device-element -> led
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructLedDeviceElement example:
      StructLedDeviceElement *led = [[StructLedDeviceElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"led init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!led) {
        NSLog(@"led is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"led init successful! toJson: %@", [led toJson]);
      NSLog(@"led validated result: %lu, 0 means it passes validation.", (unsigned long)[led validate]);
      
      // -----------------------------------------------
      // Setters of StructLedDeviceElement
  
      // -----------------------------------------------
      // Getters of StructLedDeviceElement
      [led getStatus];
      [led getSwitch];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"led toJson: %@", [led toJson]);
```
 
 */
@interface StructLedDeviceElement : NSObject


/**
 Designated initializer for StructLedDeviceElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructLedDeviceElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Status.
 
 LED current status.
 
 @param aStatus Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setStatus:(EnumStatusLed)aStatus;

/**
 Setter for Switch.
 
 LED switch status.
 
 @param aSwitch Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setSwitch:(EnumSwitch)aSwitch;


/**
 Getter for Status.
 
 LED current status.
 
 @return EnumStatusLed The value of property.
 */
- (EnumStatusLed)getStatus;

/**
 Getter for Switch.
 
 LED switch status.
 
 @return EnumSwitch The value of property.
 */
- (EnumSwitch)getSwitch;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNeighborListElement

/**
 StructNeighborListElement, as in YANG: __neighbor-list-element__.
 
 Detailed Description: Connected system device list.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> system-devices-state -> device -> device-element -> neighbor-list -> neighbor-list-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNeighborListElement example:
      StructNeighborListElement *neighborListElement = [[StructNeighborListElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"neighborListElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!neighborListElement) {
        NSLog(@"neighborListElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"neighborListElement init successful! toJson: %@", [neighborListElement toJson]);
      NSLog(@"neighborListElement validated result: %lu, 0 means it passes validation.", (unsigned long)[neighborListElement validate]);
      
      // -----------------------------------------------
      // Setters of StructNeighborListElement
      if ((error = [neighborListElement setPeerApBssid:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[neighborListElement setPeerApBssid:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [neighborListElement setMyStaMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[neighborListElement setMyStaMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [neighborListElement setRate:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[neighborListElement setRate:1234] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [neighborListElement setPeerAlMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[neighborListElement setPeerAlMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [neighborListElement setRssi:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[neighborListElement setRssi:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructNeighborListElement
      [neighborListElement getPeerApBssid];
      [neighborListElement getMyStaMac];
      [neighborListElement getRate];
      [neighborListElement getPeerAlMac];
      [neighborListElement getRssi];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"neighborListElement toJson: %@", [neighborListElement toJson]);
```
 
 */
@interface StructNeighborListElement : NSObject


/**
 Designated initializer for StructNeighborListElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNeighborListElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for PeerApBssid.
 
 The BSSID of the AP my STA is connected to.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aPeerApBssid Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPeerApBssid:(NSString *)aPeerApBssid;

/**
 Setter for MyStaMac.
 
 My STA MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMyStaMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMyStaMac:(NSString *)aMyStaMac;

/**
 Setter for Rate.
 
 Neighbor's downlink data rate(Mbps).
 
 @param aRate Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRate:(NSInteger)aRate;

/**
 Setter for PeerAlMac.
 
 The abstraction layer MAC address of the AP my STA is connected
to.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aPeerAlMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setPeerAlMac:(NSString *)aPeerAlMac;

/**
 Setter for Rssi.
 
 The RSSI of the neighbor's downlink.
 
 @param aRssi Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRssi:(NSInteger)aRssi;


/**
 Getter for PeerApBssid.
 
 The BSSID of the AP my STA is connected to.
 
 @return NSString * The value of property.
 */
- (NSString *)getPeerApBssid;

/**
 Getter for MyStaMac.
 
 My STA MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMyStaMac;

/**
 Getter for Rate.
 
 Neighbor's downlink data rate(Mbps).
 
 @return NSInteger The value of property.
 */
- (NSInteger)getRate;

/**
 Getter for PeerAlMac.
 
 The abstraction layer MAC address of the AP my STA is connected
to.
 
 @return NSString * The value of property.
 */
- (NSString *)getPeerAlMac;

/**
 Getter for Rssi.
 
 The RSSI of the neighbor's downlink.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getRssi;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructDeviceElementDevice

/**
 StructDeviceElementDevice, as in YANG: __device-element__.
 
 Detailed Description: The information of the device in the WiFi system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> system-devices-state -> device -> device-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructDeviceElementDevice example:
      StructDeviceElementDevice *deviceElement = [[StructDeviceElementDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"deviceElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!deviceElement) {
        NSLog(@"deviceElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"deviceElement init successful! toJson: %@", [deviceElement toJson]);
      NSLog(@"deviceElement validated result: %lu, 0 means it passes validation.", (unsigned long)[deviceElement validate]);
      
      // -----------------------------------------------
      // Setters of StructDeviceElementDevice
      if ((error = [deviceElement setFirmwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setFirmwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setHardwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setHardwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setIp:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setIp:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setRepresentMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setRepresentMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [deviceElement setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[deviceElement setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructDeviceElementDevice
      [deviceElement getFirmwareVersion];
      [deviceElement getHardwareVersion];
      [deviceElement getLed];
      [deviceElement getName];
      [deviceElement getIp];
      [deviceElement getRepresentMac];
      [deviceElement getMac];
      [deviceElement getRole];
      [deviceElement getOnOffLine];
      [deviceElement getAuthorization];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"deviceElement toJson: %@", [deviceElement toJson]);
```
 
 */
@interface StructDeviceElementDevice : NSObject

/**
 As in YANG: __led__
 
 @see StructLedDeviceElement
 */
@property (atomic, retain) StructLedDeviceElement *led;
/**
 Array which contains StructNeighborListElement, as in YANG: __neighbor-list__
 
 Detailed Description: Connected system device list.
 
 @see StructNeighborListElement
 */
@property (atomic, retain) NSMutableArray <StructNeighborListElement *> *neighborList;

/**
 Designated initializer for StructDeviceElementDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructDeviceElementDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for FirmwareVersion.
 
 Firmware version of the system device.
 
 @param aFirmwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFirmwareVersion:(NSString *)aFirmwareVersion;

/**
 Setter for HardwareVersion.
 
 Hardware version of the system device.
 
 @param aHardwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHardwareVersion:(NSString *)aHardwareVersion;

/**
 Setter for Name.
 
 The name of the system device.
 
 Length:      2..24

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;

/**
 Setter for Ip.
 
 Device IP address.
 
 Pattern:     ^((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))$,^([0-9\.]*)$

 @param aIp Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setIp:(NSString *)aIp;

/**
 Setter for RepresentMac.
 
 The system device represent MAC address. It can be the same as 
abstraction layer MAC or other interface MAC address
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aRepresentMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRepresentMac:(NSString *)aRepresentMac;

/**
 Setter for Mac.
 
 The system device abstraction layer MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for Role.
 
 The operation mode.
 
 @param aRole Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setRole:(EnumOperationMode)aRole;

/**
 Setter for OnOffLine.
 
 The device is online or offline
 
 @param aOnOffLine Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setOnOffLine:(EnumOnOffLine)aOnOffLine;

/**
 Setter for Authorization.
 
 The device is authorizated to join the system or not.
 
 @param aAuthorization Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setAuthorization:(EnumAuthorization)aAuthorization;


/**
 Getter for FirmwareVersion.
 
 Firmware version of the system device.
 
 @return NSString * The value of property.
 */
- (NSString *)getFirmwareVersion;

/**
 Getter for HardwareVersion.
 
 Hardware version of the system device.
 
 @return NSString * The value of property.
 */
- (NSString *)getHardwareVersion;

/**
 Getter for Name.
 
 The name of the system device.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;

/**
 Getter for Ip.
 
 Device IP address.
 
 @return NSString * The value of property.
 */
- (NSString *)getIp;

/**
 Getter for RepresentMac.
 
 The system device represent MAC address. It can be the same as 
abstraction layer MAC or other interface MAC address
 
 @return NSString * The value of property.
 */
- (NSString *)getRepresentMac;

/**
 Getter for Mac.
 
 The system device abstraction layer MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for Role.
 
 The operation mode.
 
 @return EnumOperationMode The value of property.
 */
- (EnumOperationMode)getRole;

/**
 Getter for OnOffLine.
 
 The device is online or offline
 
 @return EnumOnOffLine The value of property.
 */
- (EnumOnOffLine)getOnOffLine;

/**
 Getter for Authorization.
 
 The device is authorizated to join the system or not.
 
 @return EnumAuthorization The value of property.
 */
- (EnumAuthorization)getAuthorization;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSystemDevicesState

/**
 StructSystemDevicesState, as in YANG: __system-devices-state__.
 
 Detailed Description: WiFi system device state.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> system-devices-state

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSystemDevicesState example:
      StructSystemDevicesState *systemDevicesState = [[StructSystemDevicesState alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"systemDevicesState init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!systemDevicesState) {
        NSLog(@"systemDevicesState is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"systemDevicesState init successful! toJson: %@", [systemDevicesState toJson]);
      NSLog(@"systemDevicesState validated result: %lu, 0 means it passes validation.", (unsigned long)[systemDevicesState validate]);
      
      // -----------------------------------------------
      // Setters of StructSystemDevicesState
      if ((error = [systemDevicesState setFirmwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[systemDevicesState setFirmwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructSystemDevicesState
      [systemDevicesState getFirmwareVersion];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"systemDevicesState toJson: %@", [systemDevicesState toJson]);
```
 
 */
@interface StructSystemDevicesState : NSObject

/**
 Array which contains StructDeviceElementDevice, as in YANG: __device__
 
 Detailed Description: The information of the device in the WiFi system.
 
 @see StructDeviceElementDevice
 */
@property (atomic, retain) NSMutableArray <StructDeviceElementDevice *> *device;

/**
 Designated initializer for StructSystemDevicesState either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSystemDevicesState if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for FirmwareVersion.
 
 The WiFi system firmware version.
 
 @param aFirmwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setFirmwareVersion:(NSString *)aFirmwareVersion;


/**
 Getter for FirmwareVersion.
 
 The WiFi system firmware version.
 
 @return NSString * The value of property.
 */
- (NSString *)getFirmwareVersion;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRgbElement

/**
 StructRgbElement, as in YANG: __rgb-element__.
 
 Detailed Description: The LED status
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> switch-led -> input -> rgb -> rgb-element
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRgbElement example:
      StructRgbElement *rgbElement = [[StructRgbElement alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"rgbElement init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!rgbElement) {
        NSLog(@"rgbElement is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"rgbElement init successful! toJson: %@", [rgbElement toJson]);
      NSLog(@"rgbElement validated result: %lu, 0 means it passes validation.", (unsigned long)[rgbElement validate]);
      
      // -----------------------------------------------
      // Setters of StructRgbElement
      if ((error = [rgbElement setLedType:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[rgbElement setLedType:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [rgbElement setValue:1234]) != ZapiErrorCode_OK) {
          NSLog(@"[rgbElement setValue:1234] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructRgbElement
      [rgbElement getLedType];
      [rgbElement getValue];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"rgbElement toJson: %@", [rgbElement toJson]);
```
 
 */
@interface StructRgbElement : NSObject


/**
 Designated initializer for StructRgbElement either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRgbElement if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for LedType.
 
 LED type. Like red, green or blue.
 
 @param aLedType Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLedType:(NSString *)aLedType;

/**
 Setter for Value.
 
 The setting value for the LED.
 
 @param aValue Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setValue:(NSInteger)aValue;


/**
 Getter for LedType.
 
 LED type. Like red, green or blue.
 
 @return NSString * The value of property.
 */
- (NSString *)getLedType;

/**
 Getter for Value.
 
 The setting value for the LED.
 
 @return NSInteger The value of property.
 */
- (NSInteger)getValue;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputSwitchLed

/**
 StructInputSwitchLed, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> switch-led -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputSwitchLed example:
      StructInputSwitchLed *input = [[StructInputSwitchLed alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputSwitchLed
      if ((error = [input setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputSwitchLed
      [input getMac];
      [input getLedSwitch];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputSwitchLed : NSObject

/**
 Array which contains StructRgbElement, as in YANG: __rgb__
 
 Detailed Description: The LED status
 
 @see StructRgbElement
 */
@property (atomic, retain) NSMutableArray <StructRgbElement *> *rgb;

/**
 Designated initializer for StructInputSwitchLed either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputSwitchLed if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 System device MAC address. If it is null, the rpc is for all
WiFi system devices.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for LedSwitch.
 
 LED parameters.
 
 @param aLedSwitch Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setLedSwitch:(EnumLedSwitch)aLedSwitch;


/**
 Getter for Mac.
 
 System device MAC address. If it is null, the rpc is for all
WiFi system devices.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for LedSwitch.
 
 LED parameters.
 
 @return EnumLedSwitch The value of property.
 */
- (EnumLedSwitch)getLedSwitch;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructSwitchLed

/**
 StructSwitchLed, as in YANG: __switch-led__.
 
 Detailed Description: Turn on/off the device LED.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> switch-led

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructSwitchLed example:
      StructSwitchLed *switchLed = [[StructSwitchLed alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"switchLed init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!switchLed) {
        NSLog(@"switchLed is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"switchLed init successful! toJson: %@", [switchLed toJson]);
      NSLog(@"switchLed validated result: %lu, 0 means it passes validation.", (unsigned long)[switchLed validate]);
      
      // -----------------------------------------------
      // Setters of StructSwitchLed
  
      // -----------------------------------------------
      // Getters of StructSwitchLed
      [switchLed getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"switchLed toJson: %@", [switchLed toJson]);
```
 
 */
@interface StructSwitchLed : NSObject

/**
 As in YANG: __input__
 
 @see StructInputSwitchLed
 */
@property (atomic, retain) StructInputSwitchLed *input;

/**
 Designated initializer for StructSwitchLed either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructSwitchLed if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputAuthorizeDevice

/**
 StructInputAuthorizeDevice, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> authorize-device -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputAuthorizeDevice example:
      StructInputAuthorizeDevice *input = [[StructInputAuthorizeDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputAuthorizeDevice
      if ((error = [input setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setHardwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setHardwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputAuthorizeDevice
      [input getMac];
      [input getHardwareVersion];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputAuthorizeDevice : NSObject


/**
 Designated initializer for StructInputAuthorizeDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputAuthorizeDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 System device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for HardwareVersion.
 
 Hardware version of the system device.
 
 @param aHardwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHardwareVersion:(NSString *)aHardwareVersion;


/**
 Getter for Mac.
 
 System device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for HardwareVersion.
 
 Hardware version of the system device.
 
 @return NSString * The value of property.
 */
- (NSString *)getHardwareVersion;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructAuthorizeDevice

/**
 StructAuthorizeDevice, as in YANG: __authorize-device__.
 
 Detailed Description: Add a system device into a WiFi system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> authorize-device

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructAuthorizeDevice example:
      StructAuthorizeDevice *authorizeDevice = [[StructAuthorizeDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"authorizeDevice init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!authorizeDevice) {
        NSLog(@"authorizeDevice is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"authorizeDevice init successful! toJson: %@", [authorizeDevice toJson]);
      NSLog(@"authorizeDevice validated result: %lu, 0 means it passes validation.", (unsigned long)[authorizeDevice validate]);
      
      // -----------------------------------------------
      // Setters of StructAuthorizeDevice
  
      // -----------------------------------------------
      // Getters of StructAuthorizeDevice
      [authorizeDevice getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"authorizeDevice toJson: %@", [authorizeDevice toJson]);
```
 
 */
@interface StructAuthorizeDevice : NSObject

/**
 As in YANG: __input__
 
 @see StructInputAuthorizeDevice
 */
@property (atomic, retain) StructInputAuthorizeDevice *input;

/**
 Designated initializer for StructAuthorizeDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructAuthorizeDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructFinishSetup

/**
 StructFinishSetup, as in YANG: __finish-setup__.
 
 Detailed Description: Finish setup a system device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> finish-setup

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructFinishSetup example:
      StructFinishSetup *finishSetup = [[StructFinishSetup alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"finishSetup init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!finishSetup) {
        NSLog(@"finishSetup is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"finishSetup init successful! toJson: %@", [finishSetup toJson]);
      NSLog(@"finishSetup validated result: %lu, 0 means it passes validation.", (unsigned long)[finishSetup validate]);
      
      // -----------------------------------------------
      // Setters of StructFinishSetup
  
      // -----------------------------------------------
      // Getters of StructFinishSetup
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"finishSetup toJson: %@", [finishSetup toJson]);
```
 
 */
@interface StructFinishSetup : NSObject


/**
 Designated initializer for StructFinishSetup either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructFinishSetup if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputUnauthorizeDevice

/**
 StructInputUnauthorizeDevice, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> unauthorize-device -> input
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> restart -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputUnauthorizeDevice example:
      StructInputUnauthorizeDevice *input = [[StructInputUnauthorizeDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputUnauthorizeDevice
      if ((error = [input setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputUnauthorizeDevice
      [input getMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputUnauthorizeDevice : NSObject


/**
 Designated initializer for StructInputUnauthorizeDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputUnauthorizeDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 System device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;


/**
 Getter for Mac.
 
 System device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructUnauthorizeDevice

/**
 StructUnauthorizeDevice, as in YANG: __unauthorize-device__.
 
 Detailed Description: Remove a system device from a WiFi system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> unauthorize-device

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructUnauthorizeDevice example:
      StructUnauthorizeDevice *unauthorizeDevice = [[StructUnauthorizeDevice alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"unauthorizeDevice init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!unauthorizeDevice) {
        NSLog(@"unauthorizeDevice is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"unauthorizeDevice init successful! toJson: %@", [unauthorizeDevice toJson]);
      NSLog(@"unauthorizeDevice validated result: %lu, 0 means it passes validation.", (unsigned long)[unauthorizeDevice validate]);
      
      // -----------------------------------------------
      // Setters of StructUnauthorizeDevice
  
      // -----------------------------------------------
      // Getters of StructUnauthorizeDevice
      [unauthorizeDevice getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"unauthorizeDevice toJson: %@", [unauthorizeDevice toJson]);
```
 
 */
@interface StructUnauthorizeDevice : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUnauthorizeDevice
 */
@property (atomic, retain) StructInputUnauthorizeDevice *input;

/**
 Designated initializer for StructUnauthorizeDevice either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructUnauthorizeDevice if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructResetWifiSystem

/**
 StructResetWifiSystem, as in YANG: __reset-wifi-system__.
 
 Detailed Description: Reset the WiFi system. System device will reset to factory default.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> reset-wifi-system

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructResetWifiSystem example:
      StructResetWifiSystem *resetWifiSystem = [[StructResetWifiSystem alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"resetWifiSystem init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!resetWifiSystem) {
        NSLog(@"resetWifiSystem is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"resetWifiSystem init successful! toJson: %@", [resetWifiSystem toJson]);
      NSLog(@"resetWifiSystem validated result: %lu, 0 means it passes validation.", (unsigned long)[resetWifiSystem validate]);
      
      // -----------------------------------------------
      // Setters of StructResetWifiSystem
  
      // -----------------------------------------------
      // Getters of StructResetWifiSystem
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"resetWifiSystem toJson: %@", [resetWifiSystem toJson]);
```
 
 */
@interface StructResetWifiSystem : NSObject


/**
 Designated initializer for StructResetWifiSystem either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructResetWifiSystem if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructInputNaming

/**
 StructInputNaming, as in YANG: __input__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> naming -> input
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructInputNaming example:
      StructInputNaming *input = [[StructInputNaming alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"input init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!input) {
        NSLog(@"input is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"input init successful! toJson: %@", [input toJson]);
      NSLog(@"input validated result: %lu, 0 means it passes validation.", (unsigned long)[input validate]);
      
      // -----------------------------------------------
      // Setters of StructInputNaming
      if ((error = [input setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [input setName:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[input setName:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructInputNaming
      [input getMac];
      [input getName];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"input toJson: %@", [input toJson]);
```
 
 */
@interface StructInputNaming : NSObject


/**
 Designated initializer for StructInputNaming either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructInputNaming if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 System device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for Name.
 
 The name of the system device.
 
 Length:      2..24

 Pattern:     ^([^\x22\x27\x60\x3C\x3E\x5E\x24\x26\x{1F60}-\x{1F64}\x{2702}-\x{27B0}\x{1F68}-\x{1F6C}\x{1F30}-\x{1F70}\x{2600}-\x{26ff}]*)$

 @param aName Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setName:(NSString *)aName;


/**
 Getter for Mac.
 
 System device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for Name.
 
 The name of the system device.
 
 @return NSString * The value of property.
 */
- (NSString *)getName;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructNaming

/**
 StructNaming, as in YANG: __naming__.
 
 Detailed Description: Naming the system device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> naming

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructNaming example:
      StructNaming *naming = [[StructNaming alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"naming init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!naming) {
        NSLog(@"naming is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"naming init successful! toJson: %@", [naming toJson]);
      NSLog(@"naming validated result: %lu, 0 means it passes validation.", (unsigned long)[naming validate]);
      
      // -----------------------------------------------
      // Setters of StructNaming
  
      // -----------------------------------------------
      // Getters of StructNaming
      [naming getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"naming toJson: %@", [naming toJson]);
```
 
 */
@interface StructNaming : NSObject

/**
 As in YANG: __input__
 
 @see StructInputNaming
 */
@property (atomic, retain) StructInputNaming *input;

/**
 Designated initializer for StructNaming either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructNaming if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputRetriveDeviceInformation

/**
 StructOutputRetriveDeviceInformation, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> retrive-device-information -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputRetriveDeviceInformation example:
      StructOutputRetriveDeviceInformation *output = [[StructOutputRetriveDeviceInformation alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputRetriveDeviceInformation
      if ((error = [output setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
      if ((error = [output setHardwareVersion:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setHardwareVersion:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputRetriveDeviceInformation
      [output getMac];
      [output getHardwareVersion];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputRetriveDeviceInformation : NSObject


/**
 Designated initializer for StructOutputRetriveDeviceInformation either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputRetriveDeviceInformation if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 System device MAC address.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;

/**
 Setter for HardwareVersion.
 
 Hardware version of the device.
 
 @param aHardwareVersion Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setHardwareVersion:(NSString *)aHardwareVersion;


/**
 Getter for Mac.
 
 System device MAC address.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;

/**
 Getter for HardwareVersion.
 
 Hardware version of the device.
 
 @return NSString * The value of property.
 */
- (NSString *)getHardwareVersion;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRetriveDeviceInformation

/**
 StructRetriveDeviceInformation, as in YANG: __retrive-device-information__.
 
 Detailed Description: Retrive system device information. The information will be used for
adding the system device into a WiFi system.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> retrive-device-information

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRetriveDeviceInformation example:
      StructRetriveDeviceInformation *retriveDeviceInformation = [[StructRetriveDeviceInformation alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"retriveDeviceInformation init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!retriveDeviceInformation) {
        NSLog(@"retriveDeviceInformation is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"retriveDeviceInformation init successful! toJson: %@", [retriveDeviceInformation toJson]);
      NSLog(@"retriveDeviceInformation validated result: %lu, 0 means it passes validation.", (unsigned long)[retriveDeviceInformation validate]);
      
      // -----------------------------------------------
      // Setters of StructRetriveDeviceInformation
  
      // -----------------------------------------------
      // Getters of StructRetriveDeviceInformation
      [retriveDeviceInformation getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"retriveDeviceInformation toJson: %@", [retriveDeviceInformation toJson]);
```
 
 */
@interface StructRetriveDeviceInformation : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputRetriveDeviceInformation
 */
@property (atomic, retain) StructOutputRetriveDeviceInformation *output;

/**
 Designated initializer for StructRetriveDeviceInformation either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRetriveDeviceInformation if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructRestart

/**
 StructRestart, as in YANG: __restart__.
 
 Detailed Description: Restart a system device.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:system:zyxel-system-wifi-system -> restart

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructRestart example:
      StructRestart *restart = [[StructRestart alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"restart init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!restart) {
        NSLog(@"restart is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"restart init successful! toJson: %@", [restart toJson]);
      NSLog(@"restart validated result: %lu, 0 means it passes validation.", (unsigned long)[restart validate]);
      
      // -----------------------------------------------
      // Setters of StructRestart
  
      // -----------------------------------------------
      // Getters of StructRestart
      [restart getInput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"restart toJson: %@", [restart toJson]);
```
 
 */
@interface StructRestart : NSObject

/**
 As in YANG: __input__
 
 @see StructInputUnauthorizeDevice
 */
@property (atomic, retain) StructInputUnauthorizeDevice *input;

/**
 Designated initializer for StructRestart either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructRestart if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructOutputGetMac

/**
 StructOutputGetMac, as in YANG: __output__.
 
 Detailed Description: N/A
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-echo-server -> get-mac -> output
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructOutputGetMac example:
      StructOutputGetMac *output = [[StructOutputGetMac alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"output init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!output) {
        NSLog(@"output is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"output init successful! toJson: %@", [output toJson]);
      NSLog(@"output validated result: %lu, 0 means it passes validation.", (unsigned long)[output validate]);
      
      // -----------------------------------------------
      // Setters of StructOutputGetMac
      if ((error = [output setMac:@"12341234"]) != ZapiErrorCode_OK) {
          NSLog(@"[output setMac:@\"12341234\"] failed, error: %lu", (unsigned long)error);
      }
  
      // -----------------------------------------------
      // Getters of StructOutputGetMac
      [output getMac];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"output toJson: %@", [output toJson]);
```
 
 */
@interface StructOutputGetMac : NSObject


/**
 Designated initializer for StructOutputGetMac either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructOutputGetMac if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Getter & Setter

/**
 Setter for Mac.
 
 Source MAC address of the ping request to this server.
 
 Pattern:     ^([0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5})$

 @param aMac Property to set with.
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully set, otherwise if failed.
 */
- (ZapiErrorCode)setMac:(NSString *)aMac;


/**
 Getter for Mac.
 
 Source MAC address of the ping request to this server.
 
 @return NSString * The value of property.
 */
- (NSString *)getMac;


// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma mark - StructGetMac

/**
 StructGetMac, as in YANG: __get-mac__.
 
 Detailed Description: Get incoming packet source MAC.
 
  Used in the following data model: 
 
- urn:zyxel:cpe:applications:zyxel-applications-echo-server -> get-mac

 @note This is root object under its namespace.
 
 Code snippet of example usage:
 
```objective-c
      // You can add your own test JSON string right here.
      NSString *jsonString = nil;
      ZapiErrorCode error = ZapiErrorCode_OK;
      // -----------------------------------------------
      // Create StructGetMac example:
      StructGetMac *getMac = [[StructGetMac alloc] initWithJson:jsonString orFromObj:nil errorCode:&error];
      if (error != ZapiErrorCode_OK) {
        NSLog(@"getMac init failed! error code: %lu", (unsigned long)error);
        return;
      }
      if (!getMac) {
        NSLog(@"getMac is nil with no error code, Please Contact Zapi team should such issue occured.");
        return;
      }
      // -----------------------------------------------
      // To Json & validate example:
      NSLog(@"getMac init successful! toJson: %@", [getMac toJson]);
      NSLog(@"getMac validated result: %lu, 0 means it passes validation.", (unsigned long)[getMac validate]);
      
      // -----------------------------------------------
      // Setters of StructGetMac
  
      // -----------------------------------------------
      // Getters of StructGetMac
      [getMac getOutput];
  
      // -----------------------------------------------
      // After setter, get json string again:
      NSLog(@"getMac toJson: %@", [getMac toJson]);
```
 
 */
@interface StructGetMac : NSObject

/**
 As in YANG: __output__
 
 @see StructOutputGetMac
 */
@property (atomic, retain) StructOutputGetMac *output;

/**
 Designated initializer for StructGetMac either from JSON string, object, or simply an empty entity.
 
 @param json JSON string to convert, if you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param fromObj object to convert, can only be NSArray, NSDictionary, or nil. If you want an empty entity please pass nil for this parameter. Note that you can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 @param errorCode ZapiErrorCode_OK if successfully created, otherwise if failed.
 @return The initialized StructGetMac if successful, otherwise nil.
 @note You can only choose one between json and fromObj, pass both objects with non nil will fail to initialize and return error.
 */
- (id)initWithJson:(NSString *)json orFromObj:(id)fromObj errorCode:(ZapiErrorCode *)errorCode;

// -----------------------------------------------
// Validate & toJson

/**
 Validate .
 
 @return ZapiErrorCode, ZapiErrorCode_OK if successfully validated, otherwise if failed.
 */
- (ZapiErrorCode)validate:(NSString **)errorMessage;

/**
 Convert to JSON String
 
 @return JSON string.
 */
- (NSString *)toJson;

@end

